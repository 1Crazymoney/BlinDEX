
// const path = require('path');
// const envPath = path.join(__dirname, '../../.env');
// require('dotenv').config({ path: envPath });

// import BigNumber from 'bignumber.js';
// import '@nomiclabs/hardhat-ethers';
// import {HardhatRuntimeEnvironment} from 'hardhat/types';
// import {DeployFunction} from 'hardhat-deploy/types';

// require('@openzeppelin/test-helpers/configure')({
// 	provider: process.env.NETWORK_ENDPOINT,
// });

// const func: DeployFunction = async function (hre: HardhatRuntimeEnvironment) {

// const {deploy} = hre.deployments;
// const {deployer} = await hre.getNamedAccounts();
// const { expectEvent, send, shouldFail, time } = require('@openzeppelin/test-helpers');
// const BIG6 = new BigNumber("1e6");
// const BIG18 = new BigNumber("1e18");
// const chalk = require('chalk');

// const Address = await hre.ethers.getContractFactory("contracts/Utils/Address");
// const BlockMiner = await hre.ethers.getContractFactory("contracts/Utils/BlockMiner");
// const MigrationHelper = await hre.ethers.getContractFactory("contracts/Utils/MigrationHelper");
// const StringHelpers = await hre.ethers.getContractFactory("contracts/Utils/StringHelpers");
// const Math = await hre.ethers.getContractFactory("contracts/Math/Math");
// const SafeMath = await hre.ethers.getContractFactory("contracts/Math/SafeMath");
// const Babylonian = await hre.ethers.getContractFactory("contracts/Math/Babylonian");
// const FixedPoint = await hre.ethers.getContractFactory("contracts/Math/FixedPoint");
// const UQ112x112 = await hre.ethers.getContractFactory("contracts/Math/UQ112x112");
// const Owned = await hre.ethers.getContractFactory("contracts/Staking/Owned");
// const ERC20 = await hre.ethers.getContractFactory("contracts/ERC20/ERC20");
// const ERC20Custom = await hre.ethers.getContractFactory("contracts/ERC20/ERC20Custom");
// const SafeERC20 = await hre.ethers.getContractFactory("contracts/ERC20/SafeERC20");

// // Uniswap related
// const TransferHelper = await hre.ethers.getContractFactory("contracts/Uniswap/TransferHelper");
// const SwapToPrice = await hre.ethers.getContractFactory("contracts/Uniswap/SwapToPrice");
// const UniswapV2ERC20 = await hre.ethers.getContractFactory("contracts/Uniswap/UniswapV2ERC20");
// const UniswapV2Factory = await hre.ethers.getContractFactory("contracts/Uniswap/UniswapV2Factory");
// const UniswapV2Library = await hre.ethers.getContractFactory("contracts/Uniswap/UniswapV2Library");
// const UniswapV2OracleLibrary = await hre.ethers.getContractFactory("contracts/Uniswap/UniswapV2OracleLibrary");
// const UniswapV2Pair = await hre.ethers.getContractFactory("contracts/Uniswap/UniswapV2Pair");
// const UniswapV2Router02 = await hre.ethers.getContractFactory("contracts/Uniswap/UniswapV2Router02");
// const UniswapV2Router02_Modified = await hre.ethers.getContractFactory("contracts/Uniswap/UniswapV2Router02_Modified");

// // Collateral
// const WETH = await hre.ethers.getContractFactory("contracts/ERC20/WETH");
// const FakeCollateral_USDC = await hre.ethers.getContractFactory("contracts/FakeCollateral/FakeCollateral_USDC");
// const FakeCollateral_USDT = await hre.ethers.getContractFactory("contracts/FakeCollateral/FakeCollateral_USDT");


// // Collateral Pools
// const FraxPoolLibrary = await hre.ethers.getContractFactory("contracts/Frax/Pools/FraxPoolLibrary");
// const Pool_USDC = await hre.ethers.getContractFactory("contracts/Frax/Pools/Pool_USDC");
// const Pool_USDT = await hre.ethers.getContractFactory("contracts/Frax/Pools/Pool_USDT");


// // Oracles
// const UniswapPairOracle_FRAX_WETH = await hre.ethers.getContractFactory("contracts/Oracle/Variants/UniswapPairOracle_FRAX_WETH");
// const UniswapPairOracle_FRAX_USDC = await hre.ethers.getContractFactory("contracts/Oracle/Variants/UniswapPairOracle_FRAX_USDC");
// const UniswapPairOracle_FRAX_USDT = await hre.ethers.getContractFactory("contracts/Oracle/Variants/UniswapPairOracle_FRAX_USDT");

// const UniswapPairOracle_FRAX_FXS = await hre.ethers.getContractFactory("contracts/Oracle/Variants/UniswapPairOracle_FRAX_FXS");
// const UniswapPairOracle_FXS_WETH = await hre.ethers.getContractFactory("contracts/Oracle/Variants/UniswapPairOracle_FXS_WETH");
// const UniswapPairOracle_FXS_USDC = await hre.ethers.getContractFactory("contracts/Oracle/Variants/UniswapPairOracle_FXS_USDC");
// const UniswapPairOracle_FXS_USDT = await hre.ethers.getContractFactory("contracts/Oracle/Variants/UniswapPairOracle_FXS_USDT");

// const UniswapPairOracle_USDC_WETH = await hre.ethers.getContractFactory("contracts/Oracle/Variants/UniswapPairOracle_USDC_WETH");
// const UniswapPairOracle_USDT_WETH = await hre.ethers.getContractFactory("contracts/Oracle/Variants/UniswapPairOracle_USDT_WETH");


// // Chainlink Price Consumer
// const ChainlinkETHUSDPriceConsumer = await hre.ethers.getContractFactory("contracts/Oracle/ChainlinkETHUSDPriceConsumer");
// const ChainlinkETHUSDPriceConsumerTest = await hre.ethers.getContractFactory("contracts/Oracle/ChainlinkETHUSDPriceConsumerTest");

// // FRAX core
// const FRAXStablecoin = await hre.ethers.getContractFactory("contracts/Frax/FRAXStablecoin");
// const FRAXShares = await hre.ethers.getContractFactory("contracts/FXS/FRAXShares");
// const TokenVesting = await hre.ethers.getContractFactory("contracts/FXS/TokenVesting");

// // Governance related
// const GovernorAlpha = await hre.ethers.getContractFactory("contracts/Governance/GovernorAlpha");
// const Timelock = await hre.ethers.getContractFactory("contracts/Governance/Timelock");

// // Staking contracts
// const StakingRewards_FRAX_WETH = await hre.ethers.getContractFactory("contracts/Staking/Variants/Stake_FRAX_WETH.sol");
// const StakingRewards_FRAX_USDC = await hre.ethers.getContractFactory("contracts/Staking/Variants/Stake_FRAX_USDC.sol");
// const StakingRewards_FRAX_FXS = await hre.ethers.getContractFactory("contracts/Staking/Variants/Stake_FRAX_FXS.sol");
// const StakingRewards_FXS_WETH = await hre.ethers.getContractFactory("contracts/Staking/Variants/Stake_FXS_WETH.sol");

// const DUMP_ADDRESS = "0x6666666666666666666666666666666666666666";

// // Make sure Ganache is running beforehand
// 	const USE_MAINNET_EXISTING = true;
// 	const IS_MAINNET = (process.env.MIGRATION_MODE == 'mainnet');
// 	const IS_ROPSTEN = (process.env.MIGRATION_MODE == 'ropsten');
	
// 	// ======== Set the addresses ========
	
// 	const DEPLOYER_ADDRESS = accounts[0];
// 	const COLLATERAL_FRAX_AND_FXS_OWNER = accounts[1];
// 	const ORACLE_ADDRESS = accounts[2];
// 	const POOL_CREATOR = accounts[3];
// 	const TIMELOCK_ADMIN = accounts[4];
// 	const GOVERNOR_GUARDIAN_ADDRESS = accounts[5];
// 	const STAKING_OWNER = accounts[6];
// 	const STAKING_REWARDS_DISTRIBUTOR = accounts[7];
// 	// const COLLATERAL_FRAX_AND_FXS_OWNER = accounts[8];

// 	// ======== Set other constants ========
	
// 	const ONE_MILLION_DEC18 = new BigNumber("1000000e18");
// 	const FIVE_MILLION_DEC18 = new BigNumber("5000000e18");
// 	const TEN_MILLION_DEC18 = new BigNumber("10000000e18");
// 	const ONE_HUNDRED_MILLION_DEC18 = new BigNumber("100000000e18");
// 	const ONE_HUNDRED_MILLION_DEC6 = new BigNumber("100000000e6");
// 	const ONE_BILLION_DEC18 = new BigNumber("1000000000e18");
// 	const COLLATERAL_SEED_DEC18 = new BigNumber(508500e18);

// 	// Starting seed amounts
// 	const FRAX_SEED_AMOUNT_DEC18 = new BigNumber("10000e18");
// 	const FXS_SEED_AMOUNT_DEC18 = new BigNumber("10000e18");
	
// 	const REDEMPTION_FEE = 400; // 0.04%
// 	const MINTING_FEE = 300; // 0.03%
// 	const COLLATERAL_PRICE = 1040000; // $1.04
// 	const TIMELOCK_DELAY = 2 * 86400; // 2 days
// 	const DUMP_ADDRESS = "0x6666666666666666666666666666666666666666";
// 	const METAMASK_ADDRESS = process.env.METAMASK_ADDRESS;;

// 	// Print the addresses
// 	// ================= Start Initializing =================

// 	if (process.env.MIGRATION_MODE == 'ganache'){
// 		// ======== Give Metamask some ether ========
// 		console.log(chalk.yellow('===== GIVE METAMASK SOME ETHER ====='));
// 		send.ether(COLLATERAL_FRAX_AND_FXS_OWNER, METAMASK_ADDRESS, 2e18);
// 	}

// 	// ======== Deploy most of the contracts ========
// 	console.log(chalk.yellow('===== DEPLOY MOST OF THE CONTRACTS ====='));
	
// 	const address = await deployer.deploy(Address);
// 	const blockMiner = await deployer.deploy(BlockMiner);
// 	const babylonian = await deployer.deploy(Babylonian);
// 	const uQ112x112 = await deployer.deploy(UQ112x112);
// 	const stringHelpers = await deployer.deploy(StringHelpers);
// 	await deployer.link(UQ112x112, [UniswapV2Pair]);
// 	await deployer.link(Babylonian, [FixedPoint, SwapToPrice]);
// 	const fixedPoint = await deployer.deploy(FixedPoint);
// 	await deployer.link(FixedPoint, [UniswapV2OracleLibrary, UniswapPairOracle_FRAX_WETH, UniswapPairOracle_FRAX_USDC, UniswapPairOracle_FRAX_USDT, UniswapPairOracle_FRAX_FXS, UniswapPairOracle_FXS_WETH, UniswapPairOracle_FXS_USDC, UniswapPairOracle_FXS_USDT, UniswapPairOracle_USDC_WETH, UniswapPairOracle_USDT_WETH]);
// 	await deployer.link(Address, [ERC20, ERC20Custom, SafeERC20, WETH, FakeCollateral_USDC, FakeCollateral_USDT]);
// 	const math = await deployer.deploy(Math);
// 	await deployer.link(Math, [StakingRewards_FRAX_WETH, StakingRewards_FRAX_WETH, StakingRewards_FRAX_USDC, StakingRewards_FRAX_FXS, StakingRewards_FXS_WETH, UniswapV2ERC20, UniswapV2Pair]);
// 	const safeMath = await deployer.deploy(SafeMath);
// 	await deployer.link(SafeMath, [ERC20, ERC20Custom, SafeERC20, WETH, FakeCollateral_USDC, FakeCollateral_USDT, FRAXStablecoin, Pool_USDC, Pool_USDT, FRAXShares, StakingRewards_FRAX_WETH, StakingRewards_FRAX_USDC, StakingRewards_FRAX_FXS, StakingRewards_FXS_WETH, UniswapV2ERC20, UniswapV2Library, UniswapV2Router02, UniswapV2Router02_Modified, SwapToPrice, Timelock]);
// 	const transferHelper = await deployer.deploy(TransferHelper);
// 	await deployer.link(TransferHelper, [UniswapV2Router02, UniswapV2Router02_Modified, SwapToPrice, StakingRewards_FRAX_WETH, StakingRewards_FRAX_USDC, StakingRewards_FRAX_FXS, StakingRewards_FXS_WETH, Pool_USDC, Pool_USDT]);
// 	const uniswapV2ERC20 = await deployer.deploy(UniswapV2ERC20);
// 	await deployer.link(UniswapV2ERC20, [UniswapV2Pair]);
// 	const uniswapV2OracleLibrary = await deployer.deploy(UniswapV2OracleLibrary);
// 	await deployer.link(UniswapV2OracleLibrary, [UniswapPairOracle_FRAX_WETH, UniswapPairOracle_FRAX_USDC, UniswapPairOracle_FRAX_USDT, UniswapPairOracle_FRAX_FXS, UniswapPairOracle_FXS_WETH, UniswapPairOracle_FXS_WETH, UniswapPairOracle_FXS_USDC, UniswapPairOracle_FXS_USDT, UniswapPairOracle_USDC_WETH, UniswapPairOracle_USDT_WETH]);
// 	const uniswapV2Library = await deployer.deploy(UniswapV2Library);
// 	await deployer.link(UniswapV2Library, [UniswapPairOracle_FRAX_WETH, UniswapPairOracle_FRAX_USDC, UniswapPairOracle_FXS_WETH, UniswapPairOracle_FXS_USDC, UniswapPairOracle_USDC_WETH, UniswapV2Router02, UniswapV2Router02_Modified, SwapToPrice]);
// 	const uniswapV2Pair = await deployer.deploy(UniswapV2Pair);
// 	await deployer.link(UniswapV2Pair, [UniswapV2Factory]);
// 	const uniswapV2Factory = await deployer.deploy(UniswapV2Factory, DUMP_ADDRESS);
// 	const safeERC20 = await deployer.deploy(SafeERC20);
// 	await deployer.link(SafeERC20, [WETH, FakeCollateral_USDC, FakeCollateral_USDT, FRAXStablecoin, Pool_USDC, Pool_USDT, FRAXShares, StakingRewards_FRAX_WETH, StakingRewards_FRAX_USDC, StakingRewards_FRAX_FXS, StakingRewards_FXS_WETH]);
// 	const fraxPoolLibrary = await deployer.deploy(FraxPoolLibrary);
// 	await deployer.link(FraxPoolLibrary, [Pool_USDC, Pool_USDT]);
// 	const owned = await deployer.deploy(Owned, COLLATERAL_FRAX_AND_FXS_OWNER);
// 	const chainlinkETHUSDPriceConsumer = await deployer.deploy(ChainlinkETHUSDPriceConsumer);
// 	const chainlinkETHUSDPriceConsumerTest = await deployer.deploy(ChainlinkETHUSDPriceConsumerTest);
// 	const timelock = await deployer.deploy(Timelock, TIMELOCK_ADMIN, TIMELOCK_DELAY);
// 	const migrationHelper = await deployer.deploy(MigrationHelper, TIMELOCK_ADMIN);

// 	// Timelock and MigrationHelper
// 	const timelockInstance = await timelock.deployed();
// 	const migrationHelperInstance = await migrationHelper.deployed();

// 	// FRAX
// 	const fRAXStablecoin = await deployer.deploy(FRAXStablecoin, "Frax", "FRAX", COLLATERAL_FRAX_AND_FXS_OWNER, timelockInstance.address);
// 	const fraxInstance = await fRAXStablecoin.deployed();

// 	// FXS
// 	const fRAXShares = await deployer.deploy(FRAXShares, "Frax Share", "FXS", ORACLE_ADDRESS, COLLATERAL_FRAX_AND_FXS_OWNER, timelockInstance.address);
// 	const fxsInstance = await fRAXShares.deployed();

// 	console.log(chalk.yellow("===== Make sure name()'s work ====="));
// 	let frax_name = await fraxInstance.name.call();
// 	let fxs_name = await fxsInstance.name.call();
// 	console.log(`frax_name: [${frax_name}]`);
// 	console.log(`fxs_name: [${fxs_name}]`);


// 	// ======== Deploy the governance contract and its associated timelock ========
// 	console.log(chalk.yellow('===== DEPLOY THE GOVERNANCE CONTRACT ====='));
// 	const governorAlpha = await deployer.deploy(GovernorAlpha, timelockInstance.address, fxsInstance.address, GOVERNOR_GUARDIAN_ADDRESS);
// 	const governanceInstance = await governorAlpha.deployed();
// 	await governanceInstance.__setTimelockAddress(timelockInstance.address, { from: GOVERNOR_GUARDIAN_ADDRESS });

// 	// ======== Set the Governance contract as the timelock admin [Phase 1] ========
// 	console.log(chalk.yellow('===== SET THE GOVERNANCE CONTRACT AS THE TIMELOCK ADMIN [Phase 1] ====='));
// 	console.log("GOVERNANCE_ADDRESS [BEFORE]: ", governanceInstance.address );
// 	let timelock_admin_address = await timelockInstance.admin.call();
// 	console.log("timelock_admin [BEFORE]: ", timelock_admin_address)

// 	// // Give control from TIMELOCK_ADMIN to GovernorAlpha
// 	let current_timestamp = (await time.latest()).toNumber();
// 	let timelock_delay = (await timelockInstance.delay.call()).toNumber();
// 	let eta_with_delay = current_timestamp + timelock_delay + 300; // 5 minute buffer
// 	console.log("timelock_delay [BEFORE]: ", timelock_delay);
// 	console.log("current_timestamp [BEFORE]: ", current_timestamp);
// 	console.log("current_timestamp + timelock_delay [BEFORE]: ", eta_with_delay);
// 	await migrationHelperInstance.setGovToTimeLockETA(eta_with_delay, { from: TIMELOCK_ADMIN });

// 	const tx_nugget = [
// 		timelockInstance.address, 
// 		0, 
// 		"setPendingAdmin(address)",
// 		web3.eth.abi.encodeParameters(['address'], [governanceInstance.address]),
// 		eta_with_delay,
// 		{ from: TIMELOCK_ADMIN }
// 	]
// 	await timelockInstance.queueTransaction(...tx_nugget);

// 	console.log(chalk.red.bold('NEED TO DO THIS PART LATER [Execute timelock]'));

// 	// ======== Set FRAX FXS address ========
// 	console.log(chalk.yellow('===== FRAX FXS ADDRESS ====='));

// 	// Link the FXS contract to the FRAX contract
// 	await fraxInstance.setFXSAddress(fxsInstance.address, { from: COLLATERAL_FRAX_AND_FXS_OWNER });

// 	// ======== Create or link the collateral ERC20 contracts ========
// 	let wethInstance;
// 	let col_instance_USDC;
// 	let col_instance_USDT;
	
// 	if (IS_MAINNET){
// 		console.log(chalk.yellow('===== REAL COLLATERAL ====='));
// 		wethInstance = await WETH.at("0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2");
// 		col_instance_USDC = await FakeCollateral_USDC.at("0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"); 
// 		col_instance_USDT = await FakeCollateral_USDT.at("0xdac17f958d2ee523a2206206994597c13d831ec7"); 

// 	}
// 	else {
// 		console.log(chalk.yellow('===== FAKE COLLATERAL ====='));

// 		const wETH = await deployer.deploy(WETH, COLLATERAL_FRAX_AND_FXS_OWNER);
// 		const fakeCollateral_USDC = await deployer.deploy(FakeCollateral_USDC, COLLATERAL_FRAX_AND_FXS_OWNER, ONE_HUNDRED_MILLION_DEC6, "USDC", 6);
// 		const fakeCollateral_USDT = await deployer.deploy(FakeCollateral_USDT, COLLATERAL_FRAX_AND_FXS_OWNER, ONE_HUNDRED_MILLION_DEC6, "USDT", 6);
// 		wethInstance = await wETH.deployed();
// 		col_instance_USDC = await fakeCollateral_USDC.deployed(); 
// 		col_instance_USDT = await fakeCollateral_USDT.deployed(); 
// 	}


// 	let CONTRACT_ADDRESSES_PHASE_1 = {
// 		[process.env.MIGRATION_MODE]: {
// 			main: {
// 				FRAX: fraxInstance.address,
// 				FXS: fxsInstance.address,
// 				vesting: "NOT_DEPLOYED_YET"
// 			},
// 			weth: wethInstance.address,
// 			oracles: {
// 				FRAX_WETH: "NOT_DEPLOYED_YET",
// 				FRAX_USDC: "NOT_DEPLOYED_YET",
// 				FRAX_USDT: "NOT_DEPLOYED_YET",
// 				FRAX_FXS: "NOT_DEPLOYED_YET",
// 				FXS_WETH: "NOT_DEPLOYED_YET",
// 				FXS_USDC: "NOT_DEPLOYED_YET",
// 				FXS_USDT: "NOT_DEPLOYED_YET",
// 				USDC_WETH: "NOT_DEPLOYED_YET",
// 				USDT_WETH: "NOT_DEPLOYED_YET",
// 			},
// 			collateral: {
// 				USDC: col_instance_USDC.address,
// 				USDT: col_instance_USDT.address,
// 			},
// 			governance: governanceInstance.address,
// 			pools: {
// 				USDC: "NOT_DEPLOYED_YET",
// 				USDT: "NOT_DEPLOYED_YET",
// 			},
// 			uniswap_other: {
// 				router: "NOT_DEPLOYED_YET",
// 				factory: "NOT_DEPLOYED_YET",
// 			},
// 			pricing: {
// 				swap_to_price: "NOT_DEPLOYED_YET"
// 			},
// 			misc: {
// 				timelock: timelockInstance.address,
// 				migration_helper: migrationHelperInstance.address
// 			},
// 			libraries: {
// 				UniswapV2OracleLibrary: uniswapV2OracleLibrary.address,
// 				UniswapV2Library: uniswapV2Library.address,
// 				FraxPoolLibrary: fraxPoolLibrary.address,
// 			},
// 			pair_tokens: {
// 				'Uniswap FRAX/WETH': "NOT_DEPLOYED_YET",
// 				'Uniswap FRAX/USDC': "NOT_DEPLOYED_YET",
// 				'Uniswap FRAX/FXS': "NOT_DEPLOYED_YET",
// 				'Uniswap FXS/WETH': "NOT_DEPLOYED_YET",
// 			},
// 			staking_contracts: {
// 				'Uniswap FRAX/WETH': "NOT_DEPLOYED_YET",
// 				'Uniswap FRAX/USDC': "NOT_DEPLOYED_YET",
// 				'Uniswap FRAX/FXS': "NOT_DEPLOYED_YET",
// 				'Uniswap FXS/WETH': "NOT_DEPLOYED_YET",
// 			}
// 		}      
// 	}

// 	console.log("CONTRACT_ADDRESSES: ", CONTRACT_ADDRESSES_PHASE_1);
// }
// export default func;