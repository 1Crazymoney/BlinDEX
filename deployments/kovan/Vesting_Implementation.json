{
  "address": "0x93615E03510a0cFDff496c8D974ef46E8690E06C",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ScheduleCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vestedTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vestingScheduler",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fundsProvider",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_vestingTimeInSeconds",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount_d18",
          "type": "uint256"
        }
      ],
      "name": "schedule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fundsProvider",
          "type": "address"
        }
      ],
      "name": "setFundsProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vestingScheduler",
          "type": "address"
        }
      ],
      "name": "setVestingScheduler",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vestingTimeInSeconds",
          "type": "uint256"
        }
      ],
      "name": "setVestingTimeInSeconds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vestingSchedules",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "vestingStartedTimeStamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalVestedAmount_d18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releasedAmount_d18",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingTimeInSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x00325680205c28807feaed69f2b5168599782d42e8662790700674469498ed28",
  "receipt": {
    "to": null,
    "from": "0x774289Cb40c98B4f5b64a152BF7e5F94Fee38669",
    "contractAddress": "0x93615E03510a0cFDff496c8D974ef46E8690E06C",
    "transactionIndex": 7,
    "gasUsed": "1035496",
    "logsBloom": "0x
    "blockHash": "0x4f559191e23bf50ea1dd6a58eb9d78ee5c459d8548db394729133ff4a0d5258a",
    "transactionHash": "0x00325680205c28807feaed69f2b5168599782d42e8662790700674469498ed28",
    "logs": [],
    "blockNumber": 27646088,
    "cumulativeGasUsed": "1206562",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "7fc5f7df362effb291697cb25232d91e",
  "metadata": "{\"compiler\":{\"version\":\"0.6.11+commit.5ef660b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ScheduleCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vestedTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vestingScheduler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fundsProvider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_vestingTimeInSeconds\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount_d18\",\"type\":\"uint256\"}],\"name\":\"schedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundsProvider\",\"type\":\"address\"}],\"name\":\"setFundsProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vestingScheduler\",\"type\":\"address\"}],\"name\":\"setVestingScheduler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vestingTimeInSeconds\",\"type\":\"uint256\"}],\"name\":\"setVestingTimeInSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestingSchedules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vestingStartedTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVestedAmount_d18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedAmount_d18\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingTimeInSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking/Vesting.sol\":\"Vesting\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"contracts/Common/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0xab7f5e4a82f376a8889907d757e75d56fd78cba9192f9433593b55aed67f2a2d\",\"license\":\"MIT\"},\"contracts/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\nimport \\\"../Common/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../Math/SafeMath.sol\\\";\\nimport \\\"../Utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20Mintable}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\n \\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n    \\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.approve(address spender, uint256 amount)\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for `accounts`'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller's allowance.\\n     *\\n     * See {_burn} and {_approve}.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal virtual {\\n        _burn(account, amount);\\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of `from`'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of `from`'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:using-hooks.adoc[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xec02b36c44975c6d8e06b94ae13cd5896a6e61f97c7184e0b96bdd991980c76b\",\"license\":\"MIT\"},\"contracts/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\nimport \\\"../Common/Context.sol\\\";\\nimport \\\"../Math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\",\"keccak256\":\"0x378bd5aac1c064748b64c390549ebd943298b8bb3f800e9a61e7bbbad384757d\",\"license\":\"MIT\"},\"contracts/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../Math/SafeMath.sol\\\";\\nimport \\\"../Utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0xddb39ad3d5fd09874098ad70f2bbe255a13eca80451bab4cf299c082f478c79e\",\"license\":\"MIT\"},\"contracts/Math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\",\"keccak256\":\"0xedbfa18a7b17763dce7a0972726cc169a463122d28f2bbe431551891c7e7dcb8\",\"license\":\"MIT\"},\"contracts/Math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0xd59454f079791fa65de99df4f72d7efc0443657dacff0a1e41fcd0542bb5ee71\",\"license\":\"MIT\"},\"contracts/Staking/StakingRewardsDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.11;\\r\\n\\r\\nimport \\\"../Math/Math.sol\\\";\\r\\nimport \\\"../Math/SafeMath.sol\\\";\\r\\nimport '../Uniswap/TransferHelper.sol';\\r\\nimport \\\"../ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\ncontract StakingRewardsDistribution is OwnableUpgradeable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 public constant TOTAL_BDX_SUPPLY = 21000000;\\r\\n    uint256 private constant ERC20_PRCISON = 1e18;\\r\\n\\r\\n    // BDX minting schedule\\r\\n    // They sum up to 50% of TOTAL_BDX_SUPPLY\\r\\n    //   as this much is reserved for liquidity mining rewards\\r\\n    uint256 public constant BDX_MINTING_SCHEDULE_PRECISON = 1000;\\r\\n    uint256 public BDX_MINTING_SCHEDULE_YEAR_1;\\r\\n    uint256 public BDX_MINTING_SCHEDULE_YEAR_2;\\r\\n    uint256 public BDX_MINTING_SCHEDULE_YEAR_3;\\r\\n    uint256 public BDX_MINTING_SCHEDULE_YEAR_4;\\r\\n    uint256 public BDX_MINTING_SCHEDULE_YEAR_5;\\r\\n\\r\\n    uint256 public EndOfYear_1;\\r\\n    uint256 public EndOfYear_2;\\r\\n    uint256 public EndOfYear_3;\\r\\n    uint256 public EndOfYear_4;\\r\\n    uint256 public EndOfYear_5;\\r\\n\\r\\n    uint256 public vestingRewardRatio_percent;\\r\\n\\r\\n    ERC20 rewardsToken;\\r\\n\\r\\n    mapping(address => uint256) public stakingRewardsWeights;\\r\\n    address[] public stakingRewardsAddresses;\\r\\n    uint256 public stakingRewardsWeightsTotal;\\r\\n\\r\\n    function initialize(address _rewardsToken, uint256 _vestingRewardRatio_percent) external initializer {\\r\\n        __Ownable_init();\\r\\n\\r\\n        rewardsToken = ERC20(_rewardsToken);\\r\\n\\r\\n        BDX_MINTING_SCHEDULE_YEAR_1 = TOTAL_BDX_SUPPLY.mul(ERC20_PRCISON).mul(200).div(BDX_MINTING_SCHEDULE_PRECISON);\\r\\n        BDX_MINTING_SCHEDULE_YEAR_2 = TOTAL_BDX_SUPPLY.mul(ERC20_PRCISON).mul(125).div(BDX_MINTING_SCHEDULE_PRECISON);\\r\\n        BDX_MINTING_SCHEDULE_YEAR_3 = TOTAL_BDX_SUPPLY.mul(ERC20_PRCISON).mul(100).div(BDX_MINTING_SCHEDULE_PRECISON);\\r\\n        BDX_MINTING_SCHEDULE_YEAR_4 = TOTAL_BDX_SUPPLY.mul(ERC20_PRCISON).mul(50).div(BDX_MINTING_SCHEDULE_PRECISON);\\r\\n        BDX_MINTING_SCHEDULE_YEAR_5 = TOTAL_BDX_SUPPLY.mul(ERC20_PRCISON).mul(25).div(BDX_MINTING_SCHEDULE_PRECISON);\\r\\n\\r\\n        EndOfYear_1 = block.timestamp + 365 days;\\r\\n        EndOfYear_2 = block.timestamp + 2 * 365 days;\\r\\n        EndOfYear_3 = block.timestamp + 3 * 365 days;\\r\\n        EndOfYear_4 = block.timestamp + 4 * 365 days;\\r\\n        EndOfYear_5 = block.timestamp + 5 * 365 days;\\r\\n\\r\\n        vestingRewardRatio_percent = _vestingRewardRatio_percent;\\r\\n    }\\r\\n\\r\\n    // Precision 1e18 for compatibility with ERC20 token\\r\\n    function getRewardRatePerSecond(address _stakingRewardsAddress) external view returns (uint256) {\\r\\n        uint256 yearSchedule = 0;\\r\\n\\r\\n        if(block.timestamp < EndOfYear_1){\\r\\n            yearSchedule = BDX_MINTING_SCHEDULE_YEAR_1;\\r\\n        } else if(block.timestamp < EndOfYear_2){\\r\\n            yearSchedule = BDX_MINTING_SCHEDULE_YEAR_2;\\r\\n        } else if(block.timestamp < EndOfYear_3){\\r\\n            yearSchedule = BDX_MINTING_SCHEDULE_YEAR_3;\\r\\n        } else if(block.timestamp < EndOfYear_4){\\r\\n            yearSchedule = BDX_MINTING_SCHEDULE_YEAR_4;\\r\\n        } else if(block.timestamp < EndOfYear_5){\\r\\n            yearSchedule = BDX_MINTING_SCHEDULE_YEAR_5;\\r\\n        } else {\\r\\n            yearSchedule = 0;\\r\\n        }\\r\\n\\r\\n        uint256 bdxPerSecond = yearSchedule.div(365*24*60*60).mul(stakingRewardsWeights[_stakingRewardsAddress]).div(stakingRewardsWeightsTotal);\\r\\n\\r\\n        return bdxPerSecond;\\r\\n    }\\r\\n\\r\\n    function registerPools(address[] calldata _stakingRewardsAddresses, uint[] calldata _stakingRewardsWeights) external onlyByOwner {\\r\\n        require(_stakingRewardsAddresses.length == _stakingRewardsWeights.length, \\\"Pools addresses and weights lengths should be the same\\\");\\r\\n\\r\\n        for(uint i = 0; i < _stakingRewardsAddresses.length; i++){\\r\\n            if(stakingRewardsWeights[_stakingRewardsAddresses[i]] == 0) { // to avoid duplicates\\r\\n                stakingRewardsAddresses.push(_stakingRewardsAddresses[i]);\\r\\n            }\\r\\n\\r\\n            stakingRewardsWeightsTotal -= stakingRewardsWeights[_stakingRewardsAddresses[i]]; // to support override\\r\\n            stakingRewardsWeights[_stakingRewardsAddresses[i]] = _stakingRewardsWeights[i];\\r\\n            stakingRewardsWeightsTotal += _stakingRewardsWeights[i];\\r\\n        }\\r\\n\\r\\n        emit PoolsRegistered(_stakingRewardsAddresses, _stakingRewardsWeights);\\r\\n    }\\r\\n\\r\\n    function resetRewardsWeights() external onlyByOwner {\\r\\n        for(uint i = 0; i < stakingRewardsAddresses.length; i++){\\r\\n            stakingRewardsWeights[stakingRewardsAddresses[i]] = 0;\\r\\n        }\\r\\n\\r\\n        stakingRewardsWeightsTotal = 0;\\r\\n\\r\\n        delete stakingRewardsAddresses;\\r\\n\\r\\n        emit RewardsWeightsReset();\\r\\n    }\\r\\n\\r\\n    function transferRewards(address _recepient, uint256 amountErc20) external onlyStakingRewards {\\r\\n        TransferHelper.safeTransfer(address(rewardsToken), _recepient, amountErc20);\\r\\n    }\\r\\n\\r\\n    function setVestingRewardRatio(uint256 _vestingRewardRatio) external onlyByOwner {\\r\\n        require(0 <= _vestingRewardRatio && _vestingRewardRatio <= 100, \\\"vestingRewardRatio should be expressed as percent\\\");\\r\\n        vestingRewardRatio_percent = _vestingRewardRatio;\\r\\n    }\\r\\n\\r\\n    function approveRewardTransferTo(address spenderAddress, uint256 amountErc20) external onlyStakingRewards {\\r\\n        rewardsToken.approve(spenderAddress, amountErc20);\\r\\n    }\\r\\n\\r\\n    modifier onlyStakingRewards() {\\r\\n        require(stakingRewardsWeights[msg.sender] > 0, \\\"Only registered staking rewards contracts allowed\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyByOwner() {\\r\\n        require(msg.sender == owner(), \\\"You are not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ---------- EVENTS ----------\\r\\n    event RewardsWeightsReset();\\r\\n    event PoolsRegistered(address[] indexed stakingRewardsAddresses, uint[] indexed stakingRewardsWeights);\\r\\n}\\r\\n\",\"keccak256\":\"0x4526b38132e316c6c1755b27407296d6d2bf330f2185de335b77af849d9719ff\",\"license\":\"MIT\"},\"contracts/Staking/Vesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.11;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"../Math/Math.sol\\\";\\r\\nimport \\\"../Math/SafeMath.sol\\\";\\r\\nimport \\\"../ERC20/ERC20.sol\\\";\\r\\nimport '../Uniswap/TransferHelper.sol';\\r\\nimport \\\"../ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"./StakingRewardsDistribution.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\ncontract Vesting is OwnableUpgradeable\\r\\n{\\r\\n    using SafeERC20 for ERC20;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    struct VestingSchedule {\\r\\n        uint256 vestingStartedTimeStamp;\\r\\n        uint256 totalVestedAmount_d18;\\r\\n        uint256 releasedAmount_d18;\\r\\n    }\\r\\n\\r\\n    mapping(address => VestingSchedule[]) public vestingSchedules;\\r\\n    \\r\\n    address vestingScheduler;\\r\\n    address fundsProvider;\\r\\n    uint256 public vestingTimeInSeconds;\\r\\n\\r\\n    ERC20 private vestedToken;\\r\\n\\r\\n    function initialize(\\r\\n        address _vestedTokenAddress,\\r\\n        address _vestingScheduler,\\r\\n        address _fundsProvider,\\r\\n        uint256 _vestingTimeInSeconds\\r\\n    ) \\r\\n        external\\r\\n        initializer\\r\\n    {\\r\\n        __Ownable_init();\\r\\n\\r\\n        vestedToken = ERC20(_vestedTokenAddress);\\r\\n        vestingScheduler = _vestingScheduler;\\r\\n        fundsProvider = _fundsProvider;\\r\\n        vestingTimeInSeconds = _vestingTimeInSeconds;\\r\\n    }\\r\\n\\r\\n    function schedule(address _receiver, uint256 _amount_d18) external {\\r\\n        // to prevent melicious users form cloging user's schedules\\r\\n        require(msg.sender == vestingScheduler,\\r\\n            \\\"Only vesting scheduler can create vesting schedules\\\");\\r\\n\\r\\n        vestingSchedules[_receiver].push(VestingSchedule(\\r\\n            block.timestamp,\\r\\n            _amount_d18,\\r\\n            0\\r\\n        ));\\r\\n\\r\\n        TransferHelper.safeTransferFrom(address(vestedToken), fundsProvider, address(this), _amount_d18);\\r\\n\\r\\n        emit ScheduleCreated(_receiver, _amount_d18);\\r\\n    }\\r\\n\\r\\n    function claim() external {\\r\\n        VestingSchedule[] storage userVestingSchedules = vestingSchedules[msg.sender];\\r\\n        uint256 rewardsToClaim = 0;\\r\\n        for (uint256 i = 0; i < userVestingSchedules.length; i++) {\\r\\n            if (isFullyVested(userVestingSchedules[i])) {\\r\\n                rewardsToClaim = rewardsToClaim.add(userVestingSchedules[i].totalVestedAmount_d18.sub(userVestingSchedules[i].releasedAmount_d18));\\r\\n                delete userVestingSchedules[i];\\r\\n            } else {\\r\\n                uint256 proprtionalReward = getAvailableReward(userVestingSchedules[i]);\\r\\n                rewardsToClaim = rewardsToClaim.add(proprtionalReward);\\r\\n                userVestingSchedules[i].releasedAmount_d18 = userVestingSchedules[i].releasedAmount_d18.add(proprtionalReward);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        TransferHelper.safeTransfer(address(vestedToken), msg.sender, rewardsToClaim);\\r\\n\\r\\n        emit RewardClaimed(msg.sender, rewardsToClaim);\\r\\n    }\\r\\n\\r\\n    function isFullyVested(VestingSchedule memory _schedule) internal view returns(bool) {\\r\\n        return _schedule.vestingStartedTimeStamp.add(vestingTimeInSeconds) <= block.timestamp;\\r\\n    }\\r\\n\\r\\n    function getAvailableReward(VestingSchedule memory _schedule) internal view returns(uint256) {\\r\\n        return (_schedule.totalVestedAmount_d18\\r\\n            .mul(block.timestamp.sub(_schedule.vestingStartedTimeStamp))\\r\\n            .div(vestingTimeInSeconds)\\r\\n        )\\r\\n        .sub(_schedule.releasedAmount_d18);\\r\\n    }\\r\\n\\r\\n    function setVestingScheduler(address _vestingScheduler)\\r\\n        external\\r\\n        onlyByOwner\\r\\n    {\\r\\n        vestingScheduler = _vestingScheduler;\\r\\n    }\\r\\n\\r\\n    function setVestingTimeInSeconds(uint256 _vestingTimeInSeconds)\\r\\n        external\\r\\n        onlyByOwner\\r\\n    {\\r\\n        vestingTimeInSeconds = _vestingTimeInSeconds;\\r\\n    }\\r\\n\\r\\n    function setFundsProvider(address _fundsProvider) external onlyByOwner {\\r\\n        fundsProvider = _fundsProvider;\\r\\n    }\\r\\n\\r\\n    modifier onlyByOwner() {\\r\\n        require(msg.sender == owner(),  \\\"You are not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    event ScheduleCreated(address user, uint256 amount);\\r\\n    event RewardClaimed(address user, uint256 amount);\\r\\n}\",\"keccak256\":\"0xcaa1f2dfa6263a22c1d66b26c9e5d8f7ea12bbe640a641c5e2569ff48494a1e0\",\"license\":\"MIT\"},\"contracts/Uniswap/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GNU General Public License v3.0\\npragma solidity 0.6.11;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\",\"keccak256\":\"0x2adf61136e68f5dd2c5f65365866027eacbee73cc8b9f2732ac3701ab2d4fa02\",\"license\":\"GNU General Public License v3.0\"},\"contracts/Utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0x575884da86647cef4f5517212498dea9ec0389302d508ebc3ce19a0bbb74a897\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506111c6806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80638f242197116100715780638f24219714610115578063a7ee9c8a14610128578063b84c8ce51461013b578063bfa56bbd1461014e578063cf756fdf14610161578063f2fde38b14610174576100a9565b806345626bd6146100ae5780634e71d92d146100d9578063530f702c146100e3578063715018a6146100f85780638da5cb5b14610100575b600080fd5b6100c16100bc366004610dec565b610187565b6040516100d093929190611135565b60405180910390f35b6100e16101c6565b005b6100eb6103cf565b6040516100d0919061112c565b6100e16103d5565b610108610467565b6040516100d09190610e6a565b6100e1610123366004610e36565b610476565b6100e1610136366004610d81565b6104b3565b6100e1610149366004610dec565b61050d565b6100e161015c366004610d81565b6105da565b6100e161016f366004610d9c565b610634565b6100e1610182366004610d81565b610705565b606560205281600052604060002081815481106101a057fe5b600091825260209091206003909102018054600182015460029092015490935090915083565b33600090815260656020526040812090805b825481101561037a5761022c8382815481106101f057fe5b906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820154815250506107c6565b156102be5761028e61028184838154811061024357fe5b90600052602060002090600302016002015485848154811061026157fe5b9060005260206000209060030201600101546107e790919063ffffffff16565b839063ffffffff61083216565b915082818154811061029c57fe5b6000918252602082206003909102018181556001810182905560020155610372565b600061030b8483815481106102cf57fe5b90600052602060002090600302016040518060600160405290816000820154815260200160018201548152602001600282015481525050610857565b905061031d838263ffffffff61083216565b925061034f8185848154811061032f57fe5b90600052602060002090600302016002015461083290919063ffffffff16565b84838154811061035b57fe5b906000526020600020906003020160020181905550505b6001016101d8565b50606954610392906001600160a01b031633836108aa565b7f106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f724133826040516103c3929190610e7e565b60405180910390a15050565b60685481565b6103dd610991565b6001600160a01b03166103ee610467565b6001600160a01b03161461041d5760405162461bcd60e51b8152600401610414906110b3565b60405180910390fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6033546001600160a01b031690565b61047e610467565b6001600160a01b0316336001600160a01b0316146104ae5760405162461bcd60e51b815260040161041490610fa2565b606855565b6104bb610467565b6001600160a01b0316336001600160a01b0316146104eb5760405162461bcd60e51b815260040161041490610fa2565b606780546001600160a01b0319166001600160a01b0392909216919091179055565b6066546001600160a01b031633146105375760405162461bcd60e51b815260040161041490610fd1565b6001600160a01b038083166000908152606560209081526040808320815160608101835242815280840187815292810185815282546001818101855593875294909520905160039094020192835590519082015590516002909101556069546067546105a99291821691163084610995565b7f9c52cb9bbb9b7fa6ddb26d1e82afc4e62c9ec50c0f3488c10bb8ad22d4edc4c382826040516103c3929190610e7e565b6105e2610467565b6001600160a01b0316336001600160a01b0316146106125760405162461bcd60e51b815260040161041490610fa2565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff168061064d575061064d610a86565b8061065b575060005460ff16155b6106775760405162461bcd60e51b815260040161041490611024565b600054610100900460ff161580156106a2576000805460ff1961ff0019909116610100171660011790555b6106aa610a97565b606980546001600160a01b038088166001600160a01b031992831617909255606680548784169083161790556067805492861692909116919091179055606882905580156106fe576000805461ff00191690555b5050505050565b61070d610991565b6001600160a01b031661071e610467565b6001600160a01b0316146107445760405162461bcd60e51b8152600401610414906110b3565b6001600160a01b03811661076a5760405162461bcd60e51b815260040161041490610f25565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b606854815160009142916107df9163ffffffff61083216565b111592915050565b600061082983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610b2a565b90505b92915050565b6000828201838110156108295760405162461bcd60e51b815260040161041490610f6b565b600061082c826040015161089e6068546108926108818760000151426107e790919063ffffffff16565b60208801519063ffffffff610b5616565b9063ffffffff610b9016565b9063ffffffff6107e716565b60006060846001600160a01b031663a9059cbb85856040516024016108d0929190610e7e565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516109099190610e4e565b6000604051808303816000865af19150503d8060008114610946576040519150601f19603f3d011682016040523d82523d6000602084013e61094b565b606091505b50915091508180156109755750805115806109755750808060200190518101906109759190610e16565b6106fe5760405162461bcd60e51b815260040161041490610eee565b3390565b60006060856001600160a01b03166323b872dd8686866040516024016109bd93929190610e97565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516109f69190610e4e565b6000604051808303816000865af19150503d8060008114610a33576040519150601f19603f3d011682016040523d82523d6000602084013e610a38565b606091505b5091509150818015610a62575080511580610a62575080806020019051810190610a629190610e16565b610a7e5760405162461bcd60e51b8152600401610414906110e8565b505050505050565b6000610a9130610bd2565b15905090565b600054610100900460ff1680610ab05750610ab0610a86565b80610abe575060005460ff16155b610ada5760405162461bcd60e51b815260040161041490611024565b600054610100900460ff16158015610b05576000805460ff1961ff0019909116610100171660011790555b610b0d610bd8565b610b15610c59565b8015610b27576000805461ff00191690555b50565b60008184841115610b4e5760405162461bcd60e51b81526004016104149190610ebb565b505050900390565b600082610b655750600061082c565b82820282848281610b7257fe5b04146108295760405162461bcd60e51b815260040161041490611072565b600061082983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610d33565b3b151590565b600054610100900460ff1680610bf15750610bf1610a86565b80610bff575060005460ff16155b610c1b5760405162461bcd60e51b815260040161041490611024565b600054610100900460ff16158015610b15576000805460ff1961ff0019909116610100171660011790558015610b27576000805461ff001916905550565b600054610100900460ff1680610c725750610c72610a86565b80610c80575060005460ff16155b610c9c5760405162461bcd60e51b815260040161041490611024565b600054610100900460ff16158015610cc7576000805460ff1961ff0019909116610100171660011790555b6000610cd1610991565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610b27576000805461ff001916905550565b60008183610d545760405162461bcd60e51b81526004016104149190610ebb565b506000838581610d6057fe5b0495945050505050565b80356001600160a01b038116811461082c57600080fd5b600060208284031215610d92578081fd5b6108298383610d6a565b60008060008060808587031215610db1578283fd5b8435610dbc8161117b565b93506020850135610dcc8161117b565b92506040850135610ddc8161117b565b9396929550929360600135925050565b60008060408385031215610dfe578182fd5b610e088484610d6a565b946020939093013593505050565b600060208284031215610e27578081fd5b81518015158114610829578182fd5b600060208284031215610e47578081fd5b5035919050565b60008251610e6081846020870161114b565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000602082528251806020840152610eda81604085016020870161114b565b601f01601f19169190910160400192915050565b6020808252601f908201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601590820152742cb7ba9030b932903737ba103a34329037bbb732b960591b604082015260600190565b60208082526033908201527f4f6e6c792076657374696e67207363686564756c65722063616e206372656174604082015272652076657374696e67207363686564756c657360681b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526024908201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416040820152631253115160e21b606082015260800190565b90815260200190565b9283526020830191909152604082015260600190565b60005b8381101561116657818101518382015260200161114e565b83811115611175576000848401525b50505050565b6001600160a01b0381168114610b2757600080fdfea2646970667358221220f0abf23bd755be8f34a5c92e69efc82e06690e8082de42c0a5f52ec0b967708a64736f6c634300060b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80638f242197116100715780638f24219714610115578063a7ee9c8a14610128578063b84c8ce51461013b578063bfa56bbd1461014e578063cf756fdf14610161578063f2fde38b14610174576100a9565b806345626bd6146100ae5780634e71d92d146100d9578063530f702c146100e3578063715018a6146100f85780638da5cb5b14610100575b600080fd5b6100c16100bc366004610dec565b610187565b6040516100d093929190611135565b60405180910390f35b6100e16101c6565b005b6100eb6103cf565b6040516100d0919061112c565b6100e16103d5565b610108610467565b6040516100d09190610e6a565b6100e1610123366004610e36565b610476565b6100e1610136366004610d81565b6104b3565b6100e1610149366004610dec565b61050d565b6100e161015c366004610d81565b6105da565b6100e161016f366004610d9c565b610634565b6100e1610182366004610d81565b610705565b606560205281600052604060002081815481106101a057fe5b600091825260209091206003909102018054600182015460029092015490935090915083565b33600090815260656020526040812090805b825481101561037a5761022c8382815481106101f057fe5b906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820154815250506107c6565b156102be5761028e61028184838154811061024357fe5b90600052602060002090600302016002015485848154811061026157fe5b9060005260206000209060030201600101546107e790919063ffffffff16565b839063ffffffff61083216565b915082818154811061029c57fe5b6000918252602082206003909102018181556001810182905560020155610372565b600061030b8483815481106102cf57fe5b90600052602060002090600302016040518060600160405290816000820154815260200160018201548152602001600282015481525050610857565b905061031d838263ffffffff61083216565b925061034f8185848154811061032f57fe5b90600052602060002090600302016002015461083290919063ffffffff16565b84838154811061035b57fe5b906000526020600020906003020160020181905550505b6001016101d8565b50606954610392906001600160a01b031633836108aa565b7f106f923f993c2149d49b4255ff723acafa1f2d94393f561d3eda32ae348f724133826040516103c3929190610e7e565b60405180910390a15050565b60685481565b6103dd610991565b6001600160a01b03166103ee610467565b6001600160a01b03161461041d5760405162461bcd60e51b8152600401610414906110b3565b60405180910390fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6033546001600160a01b031690565b61047e610467565b6001600160a01b0316336001600160a01b0316146104ae5760405162461bcd60e51b815260040161041490610fa2565b606855565b6104bb610467565b6001600160a01b0316336001600160a01b0316146104eb5760405162461bcd60e51b815260040161041490610fa2565b606780546001600160a01b0319166001600160a01b0392909216919091179055565b6066546001600160a01b031633146105375760405162461bcd60e51b815260040161041490610fd1565b6001600160a01b038083166000908152606560209081526040808320815160608101835242815280840187815292810185815282546001818101855593875294909520905160039094020192835590519082015590516002909101556069546067546105a99291821691163084610995565b7f9c52cb9bbb9b7fa6ddb26d1e82afc4e62c9ec50c0f3488c10bb8ad22d4edc4c382826040516103c3929190610e7e565b6105e2610467565b6001600160a01b0316336001600160a01b0316146106125760405162461bcd60e51b815260040161041490610fa2565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff168061064d575061064d610a86565b8061065b575060005460ff16155b6106775760405162461bcd60e51b815260040161041490611024565b600054610100900460ff161580156106a2576000805460ff1961ff0019909116610100171660011790555b6106aa610a97565b606980546001600160a01b038088166001600160a01b031992831617909255606680548784169083161790556067805492861692909116919091179055606882905580156106fe576000805461ff00191690555b5050505050565b61070d610991565b6001600160a01b031661071e610467565b6001600160a01b0316146107445760405162461bcd60e51b8152600401610414906110b3565b6001600160a01b03811661076a5760405162461bcd60e51b815260040161041490610f25565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b606854815160009142916107df9163ffffffff61083216565b111592915050565b600061082983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610b2a565b90505b92915050565b6000828201838110156108295760405162461bcd60e51b815260040161041490610f6b565b600061082c826040015161089e6068546108926108818760000151426107e790919063ffffffff16565b60208801519063ffffffff610b5616565b9063ffffffff610b9016565b9063ffffffff6107e716565b60006060846001600160a01b031663a9059cbb85856040516024016108d0929190610e7e565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516109099190610e4e565b6000604051808303816000865af19150503d8060008114610946576040519150601f19603f3d011682016040523d82523d6000602084013e61094b565b606091505b50915091508180156109755750805115806109755750808060200190518101906109759190610e16565b6106fe5760405162461bcd60e51b815260040161041490610eee565b3390565b60006060856001600160a01b03166323b872dd8686866040516024016109bd93929190610e97565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516109f69190610e4e565b6000604051808303816000865af19150503d8060008114610a33576040519150601f19603f3d011682016040523d82523d6000602084013e610a38565b606091505b5091509150818015610a62575080511580610a62575080806020019051810190610a629190610e16565b610a7e5760405162461bcd60e51b8152600401610414906110e8565b505050505050565b6000610a9130610bd2565b15905090565b600054610100900460ff1680610ab05750610ab0610a86565b80610abe575060005460ff16155b610ada5760405162461bcd60e51b815260040161041490611024565b600054610100900460ff16158015610b05576000805460ff1961ff0019909116610100171660011790555b610b0d610bd8565b610b15610c59565b8015610b27576000805461ff00191690555b50565b60008184841115610b4e5760405162461bcd60e51b81526004016104149190610ebb565b505050900390565b600082610b655750600061082c565b82820282848281610b7257fe5b04146108295760405162461bcd60e51b815260040161041490611072565b600061082983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610d33565b3b151590565b600054610100900460ff1680610bf15750610bf1610a86565b80610bff575060005460ff16155b610c1b5760405162461bcd60e51b815260040161041490611024565b600054610100900460ff16158015610b15576000805460ff1961ff0019909116610100171660011790558015610b27576000805461ff001916905550565b600054610100900460ff1680610c725750610c72610a86565b80610c80575060005460ff16155b610c9c5760405162461bcd60e51b815260040161041490611024565b600054610100900460ff16158015610cc7576000805460ff1961ff0019909116610100171660011790555b6000610cd1610991565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610b27576000805461ff001916905550565b60008183610d545760405162461bcd60e51b81526004016104149190610ebb565b506000838581610d6057fe5b0495945050505050565b80356001600160a01b038116811461082c57600080fd5b600060208284031215610d92578081fd5b6108298383610d6a565b60008060008060808587031215610db1578283fd5b8435610dbc8161117b565b93506020850135610dcc8161117b565b92506040850135610ddc8161117b565b9396929550929360600135925050565b60008060408385031215610dfe578182fd5b610e088484610d6a565b946020939093013593505050565b600060208284031215610e27578081fd5b81518015158114610829578182fd5b600060208284031215610e47578081fd5b5035919050565b60008251610e6081846020870161114b565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000602082528251806020840152610eda81604085016020870161114b565b601f01601f19169190910160400192915050565b6020808252601f908201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601590820152742cb7ba9030b932903737ba103a34329037bbb732b960591b604082015260600190565b60208082526033908201527f4f6e6c792076657374696e67207363686564756c65722063616e206372656174604082015272652076657374696e67207363686564756c657360681b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526024908201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416040820152631253115160e21b606082015260800190565b90815260200190565b9283526020830191909152604082015260600190565b60005b8381101561116657818101518382015260200161114e565b83811115611175576000848401525b50505050565b6001600160a01b0381168114610b2757600080fdfea2646970667358221220f0abf23bd755be8f34a5c92e69efc82e06690e8082de42c0a5f52ec0b967708a64736f6c634300060b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 492,
        "contract": "contracts/Staking/Vesting.sol:Vesting",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 495,
        "contract": "contracts/Staking/Vesting.sol:Vesting",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1447,
        "contract": "contracts/Staking/Vesting.sol:Vesting",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Staking/Vesting.sol:Vesting",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 129,
        "contract": "contracts/Staking/Vesting.sol:Vesting",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10350,
        "contract": "contracts/Staking/Vesting.sol:Vesting",
        "label": "vestingSchedules",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_array(t_struct(VestingSchedule)10345_storage)dyn_storage)"
      },
      {
        "astId": 10352,
        "contract": "contracts/Staking/Vesting.sol:Vesting",
        "label": "vestingScheduler",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 10354,
        "contract": "contracts/Staking/Vesting.sol:Vesting",
        "label": "fundsProvider",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 10356,
        "contract": "contracts/Staking/Vesting.sol:Vesting",
        "label": "vestingTimeInSeconds",
        "offset": 0,
        "slot": "104",
        "type": "t_uint256"
      },
      {
        "astId": 10358,
        "contract": "contracts/Staking/Vesting.sol:Vesting",
        "label": "vestedToken",
        "offset": 0,
        "slot": "105",
        "type": "t_contract(ERC20)5857"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(VestingSchedule)10345_storage)dyn_storage": {
        "base": "t_struct(VestingSchedule)10345_storage",
        "encoding": "dynamic_array",
        "label": "struct Vesting.VestingSchedule[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ERC20)5857": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(VestingSchedule)10345_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vesting.VestingSchedule[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(VestingSchedule)10345_storage)dyn_storage"
      },
      "t_struct(VestingSchedule)10345_storage": {
        "encoding": "inplace",
        "label": "struct Vesting.VestingSchedule",
        "members": [
          {
            "astId": 10340,
            "contract": "contracts/Staking/Vesting.sol:Vesting",
            "label": "vestingStartedTimeStamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10342,
            "contract": "contracts/Staking/Vesting.sol:Vesting",
            "label": "totalVestedAmount_d18",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10344,
            "contract": "contracts/Staking/Vesting.sol:Vesting",
            "label": "releasedAmount_d18",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}