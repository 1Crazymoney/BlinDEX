{
  "address": "0xB7A5F5830773Bb5597f85D0969787743F0A56d8D",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardVested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDuration",
          "type": "uint256"
        }
      ],
      "name": "RewardsDurationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "RewardsPeriodRenewed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "secs",
          "type": "uint256"
        }
      ],
      "name": "StakeLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "kek_id",
          "type": "bytes32"
        }
      ],
      "name": "WithdrawnLocked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LOCK_MULTIPLIER_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "boostedBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardForDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "greylist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakingRewardsDistribution",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vesting",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isTrueBdPool",
          "type": "bool"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isTrueBdPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "lockedBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "lockedStakesOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "kek_id",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "start_timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ending_timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "multiplier_LOCK_MULTIPLIER_PRECISION",
              "type": "uint256"
            }
          ],
          "internalType": "struct StakingRewards.LockedStake[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "yearsNo",
          "type": "uint256"
        }
      ],
      "name": "lockedStakingMultiplier_LOCK_MULTIPLIER_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodFinish",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renewIfApplicable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenStored_REWARD_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsDurationSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isGraylisted",
          "type": "bool"
        }
      ],
      "name": "setIsAddressGraylisted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_new_owner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardsDurationSeconds",
          "type": "uint256"
        }
      ],
      "name": "setRewardsDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yearsNo",
          "type": "uint256"
        }
      ],
      "name": "stakeLocked",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingDecimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleUnlockStakes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBoostedSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "unlockedBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockedStakes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid_REWARD_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "kek_id",
          "type": "bytes32"
        }
      ],
      "name": "withdrawLocked",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa57378f33251bb24df88ef5b98cb1690d3f690494d3ac529ce5db80cc64f7869",
  "receipt": {
    "to": null,
    "from": "0x774289Cb40c98B4f5b64a152BF7e5F94Fee38669",
    "contractAddress": "0xB7A5F5830773Bb5597f85D0969787743F0A56d8D",
    "transactionIndex": 8,
    "gasUsed": "2519097",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x0d837c8a511527ff7c9ce7c07fc9b787752cd87ecab3e8e1dd301a5afdfbba75",
    "transactionHash": "0xa57378f33251bb24df88ef5b98cb1690d3f690494d3ac529ce5db80cc64f7869",
    "logs": [],
    "blockNumber": 27646110,
    "cumulativeGasUsed": "2812211",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "7fc5f7df362effb291697cb25232d91e",
  "metadata": "{\"compiler\":{\"version\":\"0.6.11+commit.5ef660b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardVested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"RewardsDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RewardsPeriodRenewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"secs\",\"type\":\"uint256\"}],\"name\":\"StakeLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"kek_id\",\"type\":\"bytes32\"}],\"name\":\"WithdrawnLocked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LOCK_MULTIPLIER_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"boostedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"greylist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingRewardsDistribution\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vesting\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isTrueBdPool\",\"type\":\"bool\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTrueBdPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lockedStakesOf\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"kek_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"start_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ending_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier_LOCK_MULTIPLIER_PRECISION\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingRewards.LockedStake[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"yearsNo\",\"type\":\"uint256\"}],\"name\":\"lockedStakingMultiplier_LOCK_MULTIPLIER_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renewIfApplicable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored_REWARD_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDurationSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isGraylisted\",\"type\":\"bool\"}],\"name\":\"setIsAddressGraylisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsDurationSeconds\",\"type\":\"uint256\"}],\"name\":\"setRewardsDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yearsNo\",\"type\":\"uint256\"}],\"name\":\"stakeLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleUnlockStakes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBoostedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unlockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockedStakes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid_REWARD_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"kek_id\",\"type\":\"bytes32\"}],\"name\":\"withdrawLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking/StakingRewards.sol\":\"StakingRewards\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9b19801e3e7d900fbf4182d81e1afd23ad7be39504e33df6bbcba91d724\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x506dd0718f9ace50588c13848167df5e04ae16abb56341afb10c31ff149bc79b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa1931c47a617014f858580db625aa0dcf343796f39acd4b5b51effc092a1f0a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x73bef0a5dec3efde8183c4858d90f683ed2771656c4329647b4d5b0f89498fd5\",\"license\":\"MIT\"},\"contracts/Common/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0xab7f5e4a82f376a8889907d757e75d56fd78cba9192f9433593b55aed67f2a2d\",\"license\":\"MIT\"},\"contracts/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\nimport \\\"../Common/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../Math/SafeMath.sol\\\";\\nimport \\\"../Utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20Mintable}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\n \\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n    \\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.approve(address spender, uint256 amount)\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for `accounts`'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller's allowance.\\n     *\\n     * See {_burn} and {_approve}.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal virtual {\\n        _burn(account, amount);\\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of `from`'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of `from`'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:using-hooks.adoc[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xec02b36c44975c6d8e06b94ae13cd5896a6e61f97c7184e0b96bdd991980c76b\",\"license\":\"MIT\"},\"contracts/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\nimport \\\"../Common/Context.sol\\\";\\nimport \\\"../Math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\",\"keccak256\":\"0x378bd5aac1c064748b64c390549ebd943298b8bb3f800e9a61e7bbbad384757d\",\"license\":\"MIT\"},\"contracts/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../Math/SafeMath.sol\\\";\\nimport \\\"../Utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0xddb39ad3d5fd09874098ad70f2bbe255a13eca80451bab4cf299c082f478c79e\",\"license\":\"MIT\"},\"contracts/Math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\",\"keccak256\":\"0xedbfa18a7b17763dce7a0972726cc169a463122d28f2bbe431551891c7e7dcb8\",\"license\":\"MIT\"},\"contracts/Math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0xd59454f079791fa65de99df4f72d7efc0443657dacff0a1e41fcd0542bb5ee71\",\"license\":\"MIT\"},\"contracts/Staking/StakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\n// Modified from Synthetixio\\n// https://raw.githubusercontent.com/Synthetixio/synthetix/develop/contracts/StakingRewards.sol\\n// Then modified from FRAX\\n// https://github.com/blindexgit/BlinDEX/blob/551b521/contracts/Staking/StakingRewards.sol\\n\\nimport \\\"../Math/Math.sol\\\";\\nimport \\\"../Math/SafeMath.sol\\\";\\nimport \\\"../ERC20/ERC20.sol\\\";\\nimport '../Uniswap/TransferHelper.sol';\\nimport \\\"../ERC20/SafeERC20.sol\\\";\\nimport \\\"./StakingRewardsDistribution.sol\\\";\\nimport \\\"./Vesting.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract StakingRewards is \\n    PausableUpgradeable,\\n    OwnableUpgradeable\\n{\\n    using SafeERC20 for ERC20;\\n    using SafeMath for uint256;\\n\\n    // Constant for various precisions\\n    uint256 public constant LOCK_MULTIPLIER_PRECISION = 1e6;\\n\\n    uint256 public constant REWARD_PRECISION = 1e18;\\n\\n    uint256 private DeploymentTimestamp;\\n\\n    uint256 private constant _REENTRY_GUARD_NOT_ENTERED = 1;\\n    uint256 private constant _REENTRY_GUARD_ENTERED = 2;\\n\\n    // uint256 is cheaper than bool\\n    uint256 private _reentry_guard_status;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    ERC20 public stakingToken;\\n    StakingRewardsDistribution stakingRewardsDistribution;\\n    Vesting vesting;\\n\\n    uint256 public periodFinish;\\n    bool public isTrueBdPool;\\n\\n    uint256 public rewardsDurationSeconds;\\n\\n    uint256 public lastUpdateTime; // time when recent reward per token has been calculated\\n    uint256 public rewardPerTokenStored_REWARD_PRECISION;\\n\\n    mapping(address => uint256) public userRewardPerTokenPaid_REWARD_PRECISION;\\n    mapping(address => uint256) public rewards;\\n\\n    uint256 private _staking_token_supply;\\n    uint256 private _staking_token_boosted_supply;\\n    mapping(address => uint256) private _unlocked_balances;\\n    mapping(address => uint256) private _locked_balances;\\n    mapping(address => uint256) private _boosted_balances;\\n\\n    mapping(address => LockedStake[]) private lockedStakes;\\n\\n    mapping(address => bool) public greylist;\\n\\n    bool public unlockedStakes; // Release lock stakes in case of system migration\\n\\n    struct LockedStake {\\n        bytes32 kek_id;\\n        uint256 start_timestamp;\\n        uint256 amount;\\n        uint256 ending_timestamp;\\n        uint256 multiplier_LOCK_MULTIPLIER_PRECISION;\\n    }\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    function initialize (\\n        address _stakingToken,\\n        address _stakingRewardsDistribution,\\n        address _vesting,\\n        bool _isTrueBdPool\\n    ) \\n        external\\n        initializer\\n    {\\n        __Ownable_init();\\n        __Pausable_init();\\n\\n        stakingToken = ERC20(_stakingToken);\\n        stakingRewardsDistribution = StakingRewardsDistribution(_stakingRewardsDistribution);\\n        vesting = Vesting(_vesting);\\n        DeploymentTimestamp = block.timestamp;\\n        isTrueBdPool = _isTrueBdPool;\\n\\n        rewardsDurationSeconds = 604800; // 7 * 86400  (7 days)\\n        unlockedStakes = false;\\n\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp.add(rewardsDurationSeconds);\\n\\n        _reentry_guard_status = _REENTRY_GUARD_NOT_ENTERED;\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _staking_token_supply;\\n    }\\n\\n    function totalBoostedSupply() external view returns (uint256) {\\n        return _staking_token_boosted_supply;\\n    }\\n\\n    function lockedStakingMultiplier_LOCK_MULTIPLIER_PRECISION(uint256 yearsNo) public pure returns (uint256) {\\n        if(yearsNo == 10){\\n            return 50000000;\\n        } else if(yearsNo == 5){\\n            return 10000000;\\n        } else if(yearsNo == 3){\\n            return 3000000;\\n        } else if(yearsNo == 2){\\n            return 2333000;\\n        } else if(yearsNo == 1){\\n            return 1667000;\\n        }\\n        else{\\n            revert(\\\"Not supported staking duration\\\");\\n        }\\n    }\\n\\n    // Total unlocked and locked liquidity tokens\\n    function balanceOf(address account) public view returns (uint256) {\\n        return (_unlocked_balances[account]).add(_locked_balances[account]);\\n    }\\n\\n    // Total unlocked liquidity tokens\\n    function unlockedBalanceOf(address account) external view returns (uint256) {\\n        return _unlocked_balances[account];\\n    }\\n\\n    // Total locked liquidity tokens\\n    function lockedBalanceOf(address account) public view returns (uint256) {\\n        return _locked_balances[account];\\n    }\\n\\n    // Total 'balance' used for calculating the percent of the pool the account owns\\n    // Takes into account the locked stake time multiplier\\n    function boostedBalanceOf(address account) external view returns (uint256) {\\n        return _boosted_balances[account];\\n    }\\n\\n    function lockedStakesOf(address account) external view returns (LockedStake[] memory) {\\n        return lockedStakes[account];\\n    }\\n\\n    function stakingDecimals() external view returns (uint256) {\\n        return stakingToken.decimals();\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return Math.min(block.timestamp, periodFinish);\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (_staking_token_supply == 0) {\\n            return rewardPerTokenStored_REWARD_PRECISION;\\n        }\\n        else {\\n            return rewardPerTokenStored_REWARD_PRECISION\\n                .add(lastTimeRewardApplicable()\\n                    .sub(lastUpdateTime)\\n                    .mul(stakingRewardsDistribution.getRewardRatePerSecond(address(this)))\\n                    .mul(REWARD_PRECISION)\\n                    .div(_staking_token_boosted_supply));\\n        }\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        return _boosted_balances[account]\\n            .mul(\\n                rewardPerToken()\\n                .sub(userRewardPerTokenPaid_REWARD_PRECISION[account]))\\n            .div(REWARD_PRECISION)\\n            .add(rewards[account]);\\n    }\\n\\n    // Precision 1e18 for compatibility with ERC20 token\\n    function getRewardForDuration() external view returns (uint256) {\\n        return stakingRewardsDistribution.getRewardRatePerSecond(address(this))\\n            .mul(rewardsDurationSeconds);\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function stake(uint256 amount) external nonReentrant whenNotPaused updateReward(msg.sender) {\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\n        require(greylist[msg.sender] == false, \\\"address has been greylisted\\\");\\n\\n        // Staking token supply and boosted supply\\n        _staking_token_supply = _staking_token_supply.add(amount);\\n        _staking_token_boosted_supply = _staking_token_boosted_supply.add(amount);\\n\\n        // Staking token balance and boosted balance\\n        _unlocked_balances[msg.sender] = _unlocked_balances[msg.sender].add(amount);\\n        _boosted_balances[msg.sender] = _boosted_balances[msg.sender].add(amount);\\n\\n        // Pull the tokens from the staker\\n        TransferHelper.safeTransferFrom(address(stakingToken), msg.sender, address(this), amount);\\n\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function stakeLocked(uint256 amount, uint256 yearsNo) external nonReentrant whenNotPaused updateReward(msg.sender) {\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\n        if(yearsNo == 10){\\n            require(\\n                isTrueBdPool,\\n                \\\"You can only stake locked liquidity 10 years for true BD pools\\\"\\n            );\\n        }\\n        else{\\n            require(\\n                yearsNo == 1 || yearsNo == 2 || yearsNo == 3 || yearsNo == 5 || yearsNo == 10,\\n                \\\"You can only stake locked liquidity for 1, 2, 3, 5 or 10 years\\\"\\n            );\\n        }\\n        require(greylist[msg.sender] == false, \\\"address has been greylisted\\\");\\n\\n        uint256 secs = yearsNo * 365 * 24 * 60 * 60;\\n\\n        uint256 multiplier = lockedStakingMultiplier_LOCK_MULTIPLIER_PRECISION(yearsNo);\\n        uint256 boostedAmount = amount.mul(multiplier).div(LOCK_MULTIPLIER_PRECISION);\\n        lockedStakes[msg.sender].push(LockedStake(\\n            keccak256(abi.encodePacked(msg.sender, block.timestamp, amount)),\\n            block.timestamp,\\n            amount,\\n            block.timestamp.add(secs),\\n            multiplier\\n        ));\\n\\n        // Staking token supply and boosted supply\\n        _staking_token_supply = _staking_token_supply.add(amount);\\n        _staking_token_boosted_supply = _staking_token_boosted_supply.add(boostedAmount);\\n\\n        // Staking token balance and boosted balance\\n        _locked_balances[msg.sender] = _locked_balances[msg.sender].add(amount);\\n        _boosted_balances[msg.sender] = _boosted_balances[msg.sender].add(boostedAmount);\\n\\n        // Pull the tokens from the staker\\n        TransferHelper.safeTransferFrom(address(stakingToken), msg.sender, address(this), amount);\\n\\n        emit StakeLocked(msg.sender, amount, secs);\\n    }\\n\\n    function withdraw(uint256 amount) public nonReentrant updateReward(msg.sender) {\\n        require(amount > 0, \\\"Cannot withdraw 0\\\");\\n\\n        // Staking token balance and boosted balance\\n        _unlocked_balances[msg.sender] = _unlocked_balances[msg.sender].sub(amount);\\n        _boosted_balances[msg.sender] = _boosted_balances[msg.sender].sub(amount);\\n\\n        // Staking token supply and boosted supply\\n        _staking_token_supply = _staking_token_supply.sub(amount);\\n        _staking_token_boosted_supply = _staking_token_boosted_supply.sub(amount);\\n\\n        // Give the tokens to the withdrawer\\n        stakingToken.safeTransfer(msg.sender, amount);\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function withdrawLocked(bytes32 kek_id) public nonReentrant updateReward(msg.sender) {\\n        LockedStake memory thisStake;\\n        thisStake.amount = 0;\\n        uint theIndex;\\n        for (uint i = 0; i < lockedStakes[msg.sender].length; i++){ \\n            if (kek_id == lockedStakes[msg.sender][i].kek_id){\\n                thisStake = lockedStakes[msg.sender][i];\\n                theIndex = i;\\n                break;\\n            }\\n        }\\n        require(thisStake.kek_id == kek_id, \\\"Stake not found\\\");\\n        require(block.timestamp >= thisStake.ending_timestamp || unlockedStakes == true, \\\"Stake is still locked!\\\");\\n\\n        uint256 theAmount = thisStake.amount;\\n        uint256 boostedAmount = theAmount.mul(thisStake.multiplier_LOCK_MULTIPLIER_PRECISION).div(LOCK_MULTIPLIER_PRECISION);\\n\\n        if (theAmount > 0){\\n            // Staking token balance and boosted balance\\n            _locked_balances[msg.sender] = _locked_balances[msg.sender].sub(theAmount);\\n            _boosted_balances[msg.sender] = _boosted_balances[msg.sender].sub(boostedAmount);\\n\\n            // Staking token supply and boosted supply\\n            _staking_token_supply = _staking_token_supply.sub(theAmount);\\n            _staking_token_boosted_supply = _staking_token_boosted_supply.sub(boostedAmount);\\n\\n            // Remove the stake from the array\\n            delete lockedStakes[msg.sender][theIndex];\\n\\n            // Give the tokens to the withdrawer\\n            stakingToken.safeTransfer(msg.sender, theAmount);\\n\\n            emit WithdrawnLocked(msg.sender, theAmount, kek_id);\\n        }\\n    }\\n\\n    function getReward() public nonReentrant updateReward(msg.sender) {\\n        uint256 reward = rewards[msg.sender];\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n            uint256 vestingRewardRatio = stakingRewardsDistribution.vestingRewardRatio_percent();\\n            uint256 rewardAvailable = reward * (100 - vestingRewardRatio) / 100;\\n\\n            stakingRewardsDistribution.approveRewardTransferTo(address(vesting), reward - rewardAvailable);\\n\\n            vesting.schedule(msg.sender, reward - rewardAvailable);\\n\\n            stakingRewardsDistribution.transferRewards(msg.sender, rewardAvailable);\\n\\n            emit RewardPaid(msg.sender, rewardAvailable);\\n            emit RewardVested(msg.sender, reward - rewardAvailable);\\n        }\\n    }\\n\\n    function renewIfApplicable() external {\\n        if (block.timestamp > periodFinish) {\\n            retroCatchUp();\\n        }\\n    }\\n\\n    // If the period expired, renew it\\n    function retroCatchUp() internal {\\n        // Failsafe check\\n        require(block.timestamp > periodFinish, \\\"Period has not expired yet!\\\");\\n\\n        uint256 num_periods_elapsed = uint256(block.timestamp.sub(periodFinish)) / rewardsDurationSeconds; // Floor division to the nearest period\\n\\n        periodFinish = periodFinish.add((num_periods_elapsed.add(1)).mul(rewardsDurationSeconds));\\n\\n        rewardPerTokenStored_REWARD_PRECISION = rewardPerToken();\\n\\n        lastUpdateTime = lastTimeRewardApplicable();\\n\\n        emit RewardsPeriodRenewed(address(stakingToken));\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    // Added to support recovering LP Rewards from other systems to be distributed to holders\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyByOwner {\\n        // Admin cannot withdraw the staking token from the contract\\n        require(tokenAddress != address(stakingToken));\\n        ERC20(tokenAddress).transfer(owner(), tokenAmount);\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n\\n    function setRewardsDuration(uint256 _rewardsDurationSeconds) external onlyByOwner {\\n        require(\\n            periodFinish == 0 || block.timestamp > periodFinish,\\n            \\\"Previous rewards period must be complete before changing the duration for the new period\\\"\\n        );\\n        rewardsDurationSeconds = _rewardsDurationSeconds;\\n        emit RewardsDurationUpdated(rewardsDurationSeconds);\\n    }\\n\\n    function setIsAddressGraylisted(address _address, bool isGraylisted) external onlyByOwner {\\n        greylist[_address] = isGraylisted;\\n    }\\n\\n    function toggleUnlockStakes() external onlyByOwner {\\n        unlockedStakes = !unlockedStakes;\\n    }\\n\\n    function setOwner(address _new_owner) external onlyByOwner {\\n        transferOwnership(_new_owner);\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier updateReward(address account) {\\n        \\n        // Need to retro-adjust some things if the period hasn't been renewed, then start a new one\\n        if (block.timestamp > periodFinish) {\\n            retroCatchUp();\\n        }\\n        else {\\n            rewardPerTokenStored_REWARD_PRECISION = rewardPerToken();\\n            lastUpdateTime = lastTimeRewardApplicable();\\n        }\\n\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid_REWARD_PRECISION[account] = rewardPerTokenStored_REWARD_PRECISION;\\n        }\\n        _;\\n    }\\n\\n    modifier onlyByOwner() {\\n        require(msg.sender == owner(), \\\"You are not the owner\\\");\\n        _;\\n    }\\n\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_reentry_guard_status != _REENTRY_GUARD_ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _reentry_guard_status = _REENTRY_GUARD_ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _reentry_guard_status = _REENTRY_GUARD_NOT_ENTERED;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event Staked(address indexed user, uint256 amount);\\n    event StakeLocked(address indexed user, uint256 amount, uint256 secs);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event WithdrawnLocked(address indexed user, uint256 amount, bytes32 kek_id);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event RewardsDurationUpdated(uint256 newDuration);\\n    event Recovered(address token, uint256 amount);\\n    event RewardsPeriodRenewed(address token);\\n    event RewardVested(address user, uint256 amount);\\n}\\n\",\"keccak256\":\"0xba54daf8f1f446408b52bb3495453c469d43c2fcd00b353f05b78be4f2a52731\",\"license\":\"MIT\"},\"contracts/Staking/StakingRewardsDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.11;\\r\\n\\r\\nimport \\\"../Math/Math.sol\\\";\\r\\nimport \\\"../Math/SafeMath.sol\\\";\\r\\nimport '../Uniswap/TransferHelper.sol';\\r\\nimport \\\"../ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\ncontract StakingRewardsDistribution is OwnableUpgradeable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 public constant TOTAL_BDX_SUPPLY = 21000000;\\r\\n    uint256 private constant ERC20_PRCISON = 1e18;\\r\\n\\r\\n    // BDX minting schedule\\r\\n    // They sum up to 50% of TOTAL_BDX_SUPPLY\\r\\n    //   as this much is reserved for liquidity mining rewards\\r\\n    uint256 public constant BDX_MINTING_SCHEDULE_PRECISON = 1000;\\r\\n    uint256 public BDX_MINTING_SCHEDULE_YEAR_1;\\r\\n    uint256 public BDX_MINTING_SCHEDULE_YEAR_2;\\r\\n    uint256 public BDX_MINTING_SCHEDULE_YEAR_3;\\r\\n    uint256 public BDX_MINTING_SCHEDULE_YEAR_4;\\r\\n    uint256 public BDX_MINTING_SCHEDULE_YEAR_5;\\r\\n\\r\\n    uint256 public EndOfYear_1;\\r\\n    uint256 public EndOfYear_2;\\r\\n    uint256 public EndOfYear_3;\\r\\n    uint256 public EndOfYear_4;\\r\\n    uint256 public EndOfYear_5;\\r\\n\\r\\n    uint256 public vestingRewardRatio_percent;\\r\\n\\r\\n    ERC20 rewardsToken;\\r\\n\\r\\n    mapping(address => uint256) public stakingRewardsWeights;\\r\\n    address[] public stakingRewardsAddresses;\\r\\n    uint256 public stakingRewardsWeightsTotal;\\r\\n\\r\\n    function initialize(address _rewardsToken, uint256 _vestingRewardRatio_percent) external initializer {\\r\\n        __Ownable_init();\\r\\n\\r\\n        rewardsToken = ERC20(_rewardsToken);\\r\\n\\r\\n        BDX_MINTING_SCHEDULE_YEAR_1 = TOTAL_BDX_SUPPLY.mul(ERC20_PRCISON).mul(200).div(BDX_MINTING_SCHEDULE_PRECISON);\\r\\n        BDX_MINTING_SCHEDULE_YEAR_2 = TOTAL_BDX_SUPPLY.mul(ERC20_PRCISON).mul(125).div(BDX_MINTING_SCHEDULE_PRECISON);\\r\\n        BDX_MINTING_SCHEDULE_YEAR_3 = TOTAL_BDX_SUPPLY.mul(ERC20_PRCISON).mul(100).div(BDX_MINTING_SCHEDULE_PRECISON);\\r\\n        BDX_MINTING_SCHEDULE_YEAR_4 = TOTAL_BDX_SUPPLY.mul(ERC20_PRCISON).mul(50).div(BDX_MINTING_SCHEDULE_PRECISON);\\r\\n        BDX_MINTING_SCHEDULE_YEAR_5 = TOTAL_BDX_SUPPLY.mul(ERC20_PRCISON).mul(25).div(BDX_MINTING_SCHEDULE_PRECISON);\\r\\n\\r\\n        EndOfYear_1 = block.timestamp + 365 days;\\r\\n        EndOfYear_2 = block.timestamp + 2 * 365 days;\\r\\n        EndOfYear_3 = block.timestamp + 3 * 365 days;\\r\\n        EndOfYear_4 = block.timestamp + 4 * 365 days;\\r\\n        EndOfYear_5 = block.timestamp + 5 * 365 days;\\r\\n\\r\\n        vestingRewardRatio_percent = _vestingRewardRatio_percent;\\r\\n    }\\r\\n\\r\\n    // Precision 1e18 for compatibility with ERC20 token\\r\\n    function getRewardRatePerSecond(address _stakingRewardsAddress) external view returns (uint256) {\\r\\n        uint256 yearSchedule = 0;\\r\\n\\r\\n        if(block.timestamp < EndOfYear_1){\\r\\n            yearSchedule = BDX_MINTING_SCHEDULE_YEAR_1;\\r\\n        } else if(block.timestamp < EndOfYear_2){\\r\\n            yearSchedule = BDX_MINTING_SCHEDULE_YEAR_2;\\r\\n        } else if(block.timestamp < EndOfYear_3){\\r\\n            yearSchedule = BDX_MINTING_SCHEDULE_YEAR_3;\\r\\n        } else if(block.timestamp < EndOfYear_4){\\r\\n            yearSchedule = BDX_MINTING_SCHEDULE_YEAR_4;\\r\\n        } else if(block.timestamp < EndOfYear_5){\\r\\n            yearSchedule = BDX_MINTING_SCHEDULE_YEAR_5;\\r\\n        } else {\\r\\n            yearSchedule = 0;\\r\\n        }\\r\\n\\r\\n        uint256 bdxPerSecond = yearSchedule.div(365*24*60*60).mul(stakingRewardsWeights[_stakingRewardsAddress]).div(stakingRewardsWeightsTotal);\\r\\n\\r\\n        return bdxPerSecond;\\r\\n    }\\r\\n\\r\\n    function registerPools(address[] calldata _stakingRewardsAddresses, uint[] calldata _stakingRewardsWeights) external onlyByOwner {\\r\\n        require(_stakingRewardsAddresses.length == _stakingRewardsWeights.length, \\\"Pools addresses and weights lengths should be the same\\\");\\r\\n\\r\\n        for(uint i = 0; i < _stakingRewardsAddresses.length; i++){\\r\\n            if(stakingRewardsWeights[_stakingRewardsAddresses[i]] == 0) { // to avoid duplicates\\r\\n                stakingRewardsAddresses.push(_stakingRewardsAddresses[i]);\\r\\n            }\\r\\n\\r\\n            stakingRewardsWeightsTotal -= stakingRewardsWeights[_stakingRewardsAddresses[i]]; // to support override\\r\\n            stakingRewardsWeights[_stakingRewardsAddresses[i]] = _stakingRewardsWeights[i];\\r\\n            stakingRewardsWeightsTotal += _stakingRewardsWeights[i];\\r\\n        }\\r\\n\\r\\n        emit PoolsRegistered(_stakingRewardsAddresses, _stakingRewardsWeights);\\r\\n    }\\r\\n\\r\\n    function resetRewardsWeights() external onlyByOwner {\\r\\n        for(uint i = 0; i < stakingRewardsAddresses.length; i++){\\r\\n            stakingRewardsWeights[stakingRewardsAddresses[i]] = 0;\\r\\n        }\\r\\n\\r\\n        stakingRewardsWeightsTotal = 0;\\r\\n\\r\\n        delete stakingRewardsAddresses;\\r\\n\\r\\n        emit RewardsWeightsReset();\\r\\n    }\\r\\n\\r\\n    function transferRewards(address _recepient, uint256 amountErc20) external onlyStakingRewards {\\r\\n        TransferHelper.safeTransfer(address(rewardsToken), _recepient, amountErc20);\\r\\n    }\\r\\n\\r\\n    function setVestingRewardRatio(uint256 _vestingRewardRatio) external onlyByOwner {\\r\\n        require(0 <= _vestingRewardRatio && _vestingRewardRatio <= 100, \\\"vestingRewardRatio should be expressed as percent\\\");\\r\\n        vestingRewardRatio_percent = _vestingRewardRatio;\\r\\n    }\\r\\n\\r\\n    function approveRewardTransferTo(address spenderAddress, uint256 amountErc20) external onlyStakingRewards {\\r\\n        rewardsToken.approve(spenderAddress, amountErc20);\\r\\n    }\\r\\n\\r\\n    modifier onlyStakingRewards() {\\r\\n        require(stakingRewardsWeights[msg.sender] > 0, \\\"Only registered staking rewards contracts allowed\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyByOwner() {\\r\\n        require(msg.sender == owner(), \\\"You are not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ---------- EVENTS ----------\\r\\n    event RewardsWeightsReset();\\r\\n    event PoolsRegistered(address[] indexed stakingRewardsAddresses, uint[] indexed stakingRewardsWeights);\\r\\n}\\r\\n\",\"keccak256\":\"0x4526b38132e316c6c1755b27407296d6d2bf330f2185de335b77af849d9719ff\",\"license\":\"MIT\"},\"contracts/Staking/Vesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.11;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"../Math/Math.sol\\\";\\r\\nimport \\\"../Math/SafeMath.sol\\\";\\r\\nimport \\\"../ERC20/ERC20.sol\\\";\\r\\nimport '../Uniswap/TransferHelper.sol';\\r\\nimport \\\"../ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"./StakingRewardsDistribution.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\ncontract Vesting is OwnableUpgradeable\\r\\n{\\r\\n    using SafeERC20 for ERC20;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    struct VestingSchedule {\\r\\n        uint256 vestingStartedTimeStamp;\\r\\n        uint256 totalVestedAmount_d18;\\r\\n        uint256 releasedAmount_d18;\\r\\n    }\\r\\n\\r\\n    mapping(address => VestingSchedule[]) public vestingSchedules;\\r\\n    \\r\\n    address vestingScheduler;\\r\\n    address fundsProvider;\\r\\n    uint256 public vestingTimeInSeconds;\\r\\n\\r\\n    ERC20 private vestedToken;\\r\\n\\r\\n    function initialize(\\r\\n        address _vestedTokenAddress,\\r\\n        address _vestingScheduler,\\r\\n        address _fundsProvider,\\r\\n        uint256 _vestingTimeInSeconds\\r\\n    ) \\r\\n        external\\r\\n        initializer\\r\\n    {\\r\\n        __Ownable_init();\\r\\n\\r\\n        vestedToken = ERC20(_vestedTokenAddress);\\r\\n        vestingScheduler = _vestingScheduler;\\r\\n        fundsProvider = _fundsProvider;\\r\\n        vestingTimeInSeconds = _vestingTimeInSeconds;\\r\\n    }\\r\\n\\r\\n    function schedule(address _receiver, uint256 _amount_d18) external {\\r\\n        // to prevent melicious users form cloging user's schedules\\r\\n        require(msg.sender == vestingScheduler,\\r\\n            \\\"Only vesting scheduler can create vesting schedules\\\");\\r\\n\\r\\n        vestingSchedules[_receiver].push(VestingSchedule(\\r\\n            block.timestamp,\\r\\n            _amount_d18,\\r\\n            0\\r\\n        ));\\r\\n\\r\\n        TransferHelper.safeTransferFrom(address(vestedToken), fundsProvider, address(this), _amount_d18);\\r\\n\\r\\n        emit ScheduleCreated(_receiver, _amount_d18);\\r\\n    }\\r\\n\\r\\n    function claim() external {\\r\\n        VestingSchedule[] storage userVestingSchedules = vestingSchedules[msg.sender];\\r\\n        uint256 rewardsToClaim = 0;\\r\\n        for (uint256 i = 0; i < userVestingSchedules.length; i++) {\\r\\n            if (isFullyVested(userVestingSchedules[i])) {\\r\\n                rewardsToClaim = rewardsToClaim.add(userVestingSchedules[i].totalVestedAmount_d18.sub(userVestingSchedules[i].releasedAmount_d18));\\r\\n                delete userVestingSchedules[i];\\r\\n            } else {\\r\\n                uint256 proprtionalReward = getAvailableReward(userVestingSchedules[i]);\\r\\n                rewardsToClaim = rewardsToClaim.add(proprtionalReward);\\r\\n                userVestingSchedules[i].releasedAmount_d18 = userVestingSchedules[i].releasedAmount_d18.add(proprtionalReward);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        TransferHelper.safeTransfer(address(vestedToken), msg.sender, rewardsToClaim);\\r\\n\\r\\n        emit RewardClaimed(msg.sender, rewardsToClaim);\\r\\n    }\\r\\n\\r\\n    function isFullyVested(VestingSchedule memory _schedule) internal view returns(bool) {\\r\\n        return _schedule.vestingStartedTimeStamp.add(vestingTimeInSeconds) <= block.timestamp;\\r\\n    }\\r\\n\\r\\n    function getAvailableReward(VestingSchedule memory _schedule) internal view returns(uint256) {\\r\\n        return (_schedule.totalVestedAmount_d18\\r\\n            .mul(block.timestamp.sub(_schedule.vestingStartedTimeStamp))\\r\\n            .div(vestingTimeInSeconds)\\r\\n        )\\r\\n        .sub(_schedule.releasedAmount_d18);\\r\\n    }\\r\\n\\r\\n    function setVestingScheduler(address _vestingScheduler)\\r\\n        external\\r\\n        onlyByOwner\\r\\n    {\\r\\n        vestingScheduler = _vestingScheduler;\\r\\n    }\\r\\n\\r\\n    function setVestingTimeInSeconds(uint256 _vestingTimeInSeconds)\\r\\n        external\\r\\n        onlyByOwner\\r\\n    {\\r\\n        vestingTimeInSeconds = _vestingTimeInSeconds;\\r\\n    }\\r\\n\\r\\n    function setFundsProvider(address _fundsProvider) external onlyByOwner {\\r\\n        fundsProvider = _fundsProvider;\\r\\n    }\\r\\n\\r\\n    modifier onlyByOwner() {\\r\\n        require(msg.sender == owner(),  \\\"You are not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    event ScheduleCreated(address user, uint256 amount);\\r\\n    event RewardClaimed(address user, uint256 amount);\\r\\n}\",\"keccak256\":\"0xcaa1f2dfa6263a22c1d66b26c9e5d8f7ea12bbe640a641c5e2569ff48494a1e0\",\"license\":\"MIT\"},\"contracts/Uniswap/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GNU General Public License v3.0\\npragma solidity 0.6.11;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\",\"keccak256\":\"0x2adf61136e68f5dd2c5f65365866027eacbee73cc8b9f2732ac3701ab2d4fa02\",\"license\":\"GNU General Public License v3.0\"},\"contracts/Utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0x575884da86647cef4f5517212498dea9ec0389302d508ebc3ce19a0bbb74a897\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612c9a806100206000396000f3fe608060405234801561001057600080fd5b50600436106102525760003560e01c806370a0823111610146578063a694fc3a116100c3578063cd3daf9d11610087578063cd3daf9d14610474578063d96eb3f41461047c578063ebe2b12b14610484578063f2fde38b1461048c578063fecf97341461049f578063fee2eae6146104b257610252565b8063a694fc3a14610436578063bf1b71a514610449578063c11f534414610451578063c8f33c9114610459578063cc1a378f1461046157610252565b806384955c881161010a57806384955c88146103ed57806387bf5b66146104005780638980f11f146104135780638da5cb5b1461042657806399a9cfc61461042e57610252565b806370a08231146103a2578063715018a6146103b557806372f702f3146103bd57806380060d49146103d257806380faa57d146103e557610252565b80632e1a7d4d116101d45780633d6aa5e1116101985780633d6aa5e11461035957806351e3fc171461036157806359355736146103745780635bb2a8f6146103875780635c975abb1461039a57610252565b80632e1a7d4d1461030e57806331ca208c14610321578063399f5467146103415780633a88e1d0146103495780633d18b9121461035157610252565b806318160ddd1161021b57806318160ddd146102c35780631beabcd2146102cb5780631c1f78eb146102de5780631e090f01146102e6578063262696d41461030657610252565b80628cc262146102575780630700037d146102805780630dda72991461029357806313af40351461029b57806317b18c89146102b0575b600080fd5b61026a610265366004612446565b6104ba565b6040516102779190612c0f565b60405180910390f35b61026a61028e366004612446565b610552565b61026a610564565b6102ae6102a9366004612446565b61056b565b005b6102ae6102be366004612566565b6105b8565b61026a61091f565b61026a6102d9366004612446565b610925565b61026a610940565b6102f96102f4366004612446565b6109dd565b604051610277919061263f565b61026a610a84565b6102ae61031c366004612536565b610a8a565b61033461032f366004612446565b610c35565b60405161027791906126ad565b610334610c4a565b61026a610c53565b6102ae610c5a565b61026a610f5f565b6102ae61036f366004612536565b610f6b565b61026a610382366004612446565b611296565b6102ae6103953660046124b9565b6112b1565b610334611314565b61026a6103b0366004612446565b61131d565b6102ae611350565b6103c56113d9565b60405161027791906125ee565b61026a6103e0366004612536565b6113e8565b61026a611462565b61026a6103fb366004612446565b611470565b61026a61040e366004612446565b61148b565b6102ae6104213660046124f0565b61149d565b6103c56115b5565b61026a6115c4565b6102ae610444366004612536565b6115ca565b6103346117b8565b61026a6117c1565b61026a611846565b6102ae61046f366004612536565b61184c565b61026a6118f0565b6102ae6119c7565b61026a611a13565b6102ae61049a366004612446565b611a19565b6102ae6104ad366004612461565b611ada565b6102ae611bf5565b6001600160a01b038116600090815260a2602090815260408083205460a190925282205461054a919061053e90670de0b6b3a7640000906105329061050d906105016118f0565b9063ffffffff611c0916565b6001600160a01b038816600090815260a760205260409020549063ffffffff611c5416565b9063ffffffff611c8e16565b9063ffffffff611cd016565b90505b919050565b60a26020526000908152604090205481565b60a4545b90565b6105736115b5565b6001600160a01b0316336001600160a01b0316146105ac5760405162461bcd60e51b81526004016105a39061290e565b60405180910390fd5b6105b581611a19565b50565b600260985414156105db5760405162461bcd60e51b81526004016105a390612bd8565b60026098556105e8611314565b156106055760405162461bcd60e51b81526004016105a39061299a565b33609c5442111561061d57610618611cf5565b610634565b6106256118f0565b60a055610630611462565b609f555b6001600160a01b038116156106785761064c816104ba565b6001600160a01b038216600090815260a2602090815260408083209390935560a05460a1909152919020555b600083116106985760405162461bcd60e51b81526004016105a390612878565b81600a14156106c857609d5460ff166106c35760405162461bcd60e51b81526004016105a39061293d565b610714565b81600114806106d75750816002145b806106e25750816003145b806106ed5750816005145b806106f8575081600a145b6107145760405162461bcd60e51b81526004016105a3906127a5565b33600090815260a9602052604090205460ff16156107445760405162461bcd60e51b81526004016105a3906126eb565b6301e1338082026000610756846113e8565b90506000610771620f4240610532888563ffffffff611c5416565b33600081815260a8602052604090819020815160a081019092529293509081906107a090428b60c085016125a8565b6040516020818303038152906040528051906020012081526020014281526020018881526020016107da8642611cd090919063ffffffff16565b815260209081018590528254600181810185556000948552938290208351600590920201908155908201519281019290925560408101516002830155606081015160038301556080015160049091015560a35461083d908763ffffffff611cd016565b60a35560a454610853908263ffffffff611cd016565b60a45533600090815260a66020526040902054610876908763ffffffff611cd016565b33600090815260a6602090815260408083209390935560a7905220546108a2908263ffffffff611cd016565b33600081815260a760205260409020919091556099546108cf916001600160a01b03909116903089611dbc565b336001600160a01b03167fa5ae833d0bb1dcd632d98a8b70973e8516812898e19bf27b70071ebc8dc52c01878560405161090a929190612c18565b60405180910390a25050600160985550505050565b60a35490565b6001600160a01b0316600090815260a7602052604090205490565b609e54609a5460405163964efe8160e01b81526000926109d89290916001600160a01b039091169063964efe819061097c9030906004016125ee565b60206040518083038186803b15801561099457600080fd5b505afa1580156109a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cc919061254e565b9063ffffffff611c5416565b905090565b6001600160a01b038116600090815260a860209081526040808320805482518185028101850190935280835260609492939192909184015b82821015610a7957838290600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505081526020019060010190610a15565b505050509050919050565b60a05481565b60026098541415610aad5760405162461bcd60e51b81526004016105a390612bd8565b6002609855609c543390421115610acb57610ac6611cf5565b610ae2565b610ad36118f0565b60a055610ade611462565b609f555b6001600160a01b03811615610b2657610afa816104ba565b6001600160a01b038216600090815260a2602090815260408083209390935560a05460a1909152919020555b60008211610b465760405162461bcd60e51b81526004016105a390612a12565b33600090815260a56020526040902054610b66908363ffffffff611c0916565b33600090815260a5602090815260408083209390935560a790522054610b92908363ffffffff611c0916565b33600090815260a7602052604090205560a354610bb5908363ffffffff611c0916565b60a35560a454610bcb908363ffffffff611c0916565b60a455609954610beb906001600160a01b0316338463ffffffff611ead16565b336001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d583604051610c249190612c0f565b60405180910390a250506001609855565b60a96020526000908152604090205460ff1681565b60aa5460ff1681565b620f424081565b60026098541415610c7d5760405162461bcd60e51b81526004016105a390612bd8565b6002609855609c543390421115610c9b57610c96611cf5565b610cb2565b610ca36118f0565b60a055610cae611462565b609f555b6001600160a01b03811615610cf657610cca816104ba565b6001600160a01b038216600090815260a2602090815260408083209390935560a05460a1909152919020555b33600090815260a260205260409020548015610f565733600090815260a260209081526040808320839055609a5481516328d48e9f60e01b815291516001600160a01b03909116926328d48e9f9260048082019391829003018186803b158015610d5f57600080fd5b505afa158015610d73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d97919061254e565b609a54609b546040516326ed0e9160e01b81529293506064848103860204926001600160a01b03928316926326ed0e9192610ddb9291169085880390600401612602565b600060405180830381600087803b158015610df557600080fd5b505af1158015610e09573d6000803e3d6000fd5b5050609b5460405163b84c8ce560e01b81526001600160a01b03909116925063b84c8ce59150610e4190339085880390600401612602565b600060405180830381600087803b158015610e5b57600080fd5b505af1158015610e6f573d6000803e3d6000fd5b5050609a5460405163413918c960e11b81526001600160a01b03909116925063827231929150610ea59033908590600401612602565b600060405180830381600087803b158015610ebf57600080fd5b505af1158015610ed3573d6000803e3d6000fd5b50505050336001600160a01b03167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e048682604051610f109190612c0f565b60405180910390a27f9fbc695eed6a70ae78a7532506abdb142ee788cd93f76ef3b7122561422f636733828503604051610f4b929190612602565b60405180910390a150505b50506001609855565b670de0b6b3a764000081565b60026098541415610f8e5760405162461bcd60e51b81526004016105a390612bd8565b6002609855609c543390421115610fac57610fa7611cf5565b610fc3565b610fb46118f0565b60a055610fbf611462565b609f555b6001600160a01b0381161561100757610fdb816104ba565b6001600160a01b038216600090815260a2602090815260408083209390935560a05460a1909152919020555b61100f6123fd565b600060408201819052805b33600090815260a860205260409020548110156110dd5733600090815260a86020526040902080548290811061104c57fe5b9060005260206000209060050201600001548514156110d55733600090815260a86020526040902080548290811061108057fe5b90600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505092508091506110dd565b60010161101a565b50815184146110fe5760405162461bcd60e51b81526004016105a390612aea565b816060015142101580611118575060aa5460ff1615156001145b6111345760405162461bcd60e51b81526004016105a390612802565b6040820151608083015160009061115b90620f42409061053290859063ffffffff611c5416565b905081156112895733600090815260a66020526040902054611183908363ffffffff611c0916565b33600090815260a6602090815260408083209390935560a7905220546111af908263ffffffff611c0916565b33600090815260a7602052604090205560a3546111d2908363ffffffff611c0916565b60a35560a4546111e8908263ffffffff611c0916565b60a45533600090815260a86020526040902080548490811061120657fe5b6000918252602082206005909102018181556001810182905560028101829055600381018290556004015560995461124e906001600160a01b0316338463ffffffff611ead16565b336001600160a01b03167f1f70bda8ea2447de035db87c33fe8f03f7514d49c394293e5cffdb4c34352cf6838860405161090a929190612c18565b5050600160985550505050565b6001600160a01b0316600090815260a6602052604090205490565b6112b96115b5565b6001600160a01b0316336001600160a01b0316146112e95760405162461bcd60e51b81526004016105a39061290e565b6001600160a01b0391909116600090815260a960205260409020805460ff1916911515919091179055565b60335460ff1690565b6001600160a01b038116600090815260a6602090815260408083205460a590925282205461054a9163ffffffff611cd016565b611358611f08565b6001600160a01b03166113696115b5565b6001600160a01b03161461138f5760405162461bcd60e51b81526004016105a390612a7e565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b6099546001600160a01b031681565b600081600a14156113fe57506302faf08061054d565b816005141561141157506298968061054d565b81600314156114245750622dc6c061054d565b816002141561143757506223994861054d565b816001141561144a575062196fb861054d565b60405162461bcd60e51b81526004016105a390612ab3565b60006109d842609c54611f0c565b6001600160a01b0316600090815260a5602052604090205490565b60a16020526000908152604090205481565b6114a56115b5565b6001600160a01b0316336001600160a01b0316146114d55760405162461bcd60e51b81526004016105a39061290e565b6099546001600160a01b03838116911614156114f057600080fd5b816001600160a01b031663a9059cbb6115076115b5565b836040518363ffffffff1660e01b8152600401611525929190612602565b602060405180830381600087803b15801561153f57600080fd5b505af1158015611553573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611577919061251a565b507f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2882826040516115a9929190612602565b60405180910390a15050565b6065546001600160a01b031690565b609e5481565b600260985414156115ed5760405162461bcd60e51b81526004016105a390612bd8565b60026098556115fa611314565b156116175760405162461bcd60e51b81526004016105a39061299a565b33609c5442111561162f5761162a611cf5565b611646565b6116376118f0565b60a055611642611462565b609f555b6001600160a01b0381161561168a5761165e816104ba565b6001600160a01b038216600090815260a2602090815260408083209390935560a05460a1909152919020555b600082116116aa5760405162461bcd60e51b81526004016105a390612878565b33600090815260a9602052604090205460ff16156116da5760405162461bcd60e51b81526004016105a3906126eb565b60a3546116ed908363ffffffff611cd016565b60a35560a454611703908363ffffffff611cd016565b60a45533600090815260a56020526040902054611726908363ffffffff611cd016565b33600090815260a5602090815260408083209390935560a790522054611752908363ffffffff611cd016565b33600081815260a7602052604090209190915560995461177f916001600160a01b03909116903085611dbc565b336001600160a01b03167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d83604051610c249190612c0f565b609d5460ff1681565b6099546040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561180657600080fd5b505afa15801561181a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183e9190612587565b60ff16905090565b609f5481565b6118546115b5565b6001600160a01b0316336001600160a01b0316146118845760405162461bcd60e51b81526004016105a39061290e565b609c5415806118945750609c5442115b6118b05760405162461bcd60e51b81526004016105a390612722565b609e8190556040517ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d3906118e5908390612c0f565b60405180910390a150565b600060a35460001415611906575060a054610568565b60a454609a5460405163964efe8160e01b81526119c0926119b192909161053291670de0b6b3a7640000916109cc916001600160a01b03169063964efe81906119539030906004016125ee565b60206040518083038186803b15801561196b57600080fd5b505afa15801561197f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a3919061254e565b6109cc609f54610501611462565b60a0549063ffffffff611cd016565b9050610568565b6119cf6115b5565b6001600160a01b0316336001600160a01b0316146119ff5760405162461bcd60e51b81526004016105a39061290e565b60aa805460ff19811660ff90911615179055565b609c5481565b611a21611f08565b6001600160a01b0316611a326115b5565b6001600160a01b031614611a585760405162461bcd60e51b81526004016105a390612a7e565b6001600160a01b038116611a7e5760405162461bcd60e51b81526004016105a390612832565b6065546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3606580546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff1680611af35750611af3611f22565b80611b01575060005460ff16155b611b1d5760405162461bcd60e51b81526004016105a3906129c4565b600054610100900460ff16158015611b48576000805460ff1961ff0019909116610100171660011790555b611b50611f33565b611b58611fc5565b609980546001600160a01b038088166001600160a01b031992831617909255609a8054878416908316179055609b805492861692909116919091179055426097819055609d805484151560ff199182161790915562093a80609e81905560aa8054909216909155609f829055611bd4919063ffffffff611cd016565b609c5560016098558015611bee576000805461ff00191690555b5050505050565b609c54421115611c0757611c07611cf5565b565b6000611c4b83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612043565b90505b92915050565b600082611c6357506000611c4e565b82820282848281611c7057fe5b0414611c4b5760405162461bcd60e51b81526004016105a390612a3d565b6000611c4b83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061206f565b600082820183811015611c4b5760405162461bcd60e51b81526004016105a3906128a0565b609c544211611d165760405162461bcd60e51b81526004016105a3906128d7565b6000609e54611d30609c5442611c0990919063ffffffff16565b81611d3757fe5b049050611d66611d57609e546109cc600185611cd090919063ffffffff16565b609c549063ffffffff611cd016565b609c55611d716118f0565b60a055611d7c611462565b609f556099546040517f6f2b3b3aaf1881d69a5d40565500f93ea73df36e7b6a29bf48b21479a9237fe9916118e5916001600160a01b03909116906125ee565b60006060856001600160a01b03166323b872dd868686604051602401611de49392919061261b565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051611e1d91906125d2565b6000604051808303816000865af19150503d8060008114611e5a576040519150601f19603f3d011682016040523d82523d6000602084013e611e5f565b606091505b5091509150818015611e89575080511580611e89575080806020019051810190611e89919061251a565b611ea55760405162461bcd60e51b81526004016105a390612b94565b505050505050565b611f038363a9059cbb60e01b8484604051602401611ecc929190612602565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526120a6565b505050565b3390565b6000818310611f1b5781611c4b565b5090919050565b6000611f2d30612135565b15905090565b600054610100900460ff1680611f4c5750611f4c611f22565b80611f5a575060005460ff16155b611f765760405162461bcd60e51b81526004016105a3906129c4565b600054610100900460ff16158015611fa1576000805460ff1961ff0019909116610100171660011790555b611fa961213b565b611fb16121bc565b80156105b5576000805461ff001916905550565b600054610100900460ff1680611fde5750611fde611f22565b80611fec575060005460ff16155b6120085760405162461bcd60e51b81526004016105a3906129c4565b600054610100900460ff16158015612033576000805460ff1961ff0019909116610100171660011790555b61203b61213b565b611fb1612296565b600081848411156120675760405162461bcd60e51b81526004016105a391906126b8565b505050900390565b600081836120905760405162461bcd60e51b81526004016105a391906126b8565b50600083858161209c57fe5b0495945050505050565b60606120fb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166123229092919063ffffffff16565b805190915015611f035780806020019051810190612119919061251a565b611f035760405162461bcd60e51b81526004016105a390612b4a565b3b151590565b600054610100900460ff16806121545750612154611f22565b80612162575060005460ff16155b61217e5760405162461bcd60e51b81526004016105a3906129c4565b600054610100900460ff16158015611fb1576000805460ff1961ff00199091166101001716600117905580156105b5576000805461ff001916905550565b600054610100900460ff16806121d557506121d5611f22565b806121e3575060005460ff16155b6121ff5760405162461bcd60e51b81526004016105a3906129c4565b600054610100900460ff1615801561222a576000805460ff1961ff0019909116610100171660011790555b6000612234611f08565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156105b5576000805461ff001916905550565b600054610100900460ff16806122af57506122af611f22565b806122bd575060005460ff16155b6122d95760405162461bcd60e51b81526004016105a3906129c4565b600054610100900460ff16158015612304576000805460ff1961ff0019909116610100171660011790555b6033805460ff1916905580156105b5576000805461ff001916905550565b60606123318484600085612339565b949350505050565b606061234485612135565b6123605760405162461bcd60e51b81526004016105a390612b13565b60006060866001600160a01b0316858760405161237d91906125d2565b60006040518083038185875af1925050503d80600081146123ba576040519150601f19603f3d011682016040523d82523d6000602084013e6123bf565b606091505b509150915081156123d35791506123319050565b8051156123e35780518082602001fd5b8360405162461bcd60e51b81526004016105a391906126b8565b6040518060a0016040528060008019168152602001600081526020016000815260200160008152602001600081525090565b80356001600160a01b0381168114611c4e57600080fd5b600060208284031215612457578081fd5b611c4b838361242f565b60008060008060808587031215612476578283fd5b612480868661242f565b935061248f866020870161242f565b925061249e866040870161242f565b915060608501356124ae81612c56565b939692955090935050565b600080604083850312156124cb578182fd5b6124d5848461242f565b915060208301356124e581612c56565b809150509250929050565b60008060408385031215612502578182fd5b61250c848461242f565b946020939093013593505050565b60006020828403121561252b578081fd5b8151611c4b81612c56565b600060208284031215612547578081fd5b5035919050565b60006020828403121561255f578081fd5b5051919050565b60008060408385031215612578578182fd5b50508035926020909101359150565b600060208284031215612598578081fd5b815160ff81168114611c4b578182fd5b60609390931b6bffffffffffffffffffffffff191683526014830191909152603482015260540190565b600082516125e4818460208701612c26565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b602080825282518282018190526000919060409081850190868401855b828110156126a05781518051855286810151878601528581015186860152606080820151908601526080908101519085015260a0909301929085019060010161265c565b5091979650505050505050565b901515815260200190565b60006020825282518060208401526126d7816040850160208701612c26565b601f01601f19169190910160400192915050565b6020808252601b908201527f6164647265737320686173206265656e20677265796c69737465640000000000604082015260600190565b60208082526058908201527f50726576696f7573207265776172647320706572696f64206d7573742062652060408201527f636f6d706c657465206265666f7265206368616e67696e67207468652064757260608201527f6174696f6e20666f7220746865206e657720706572696f640000000000000000608082015260a00190565b6020808252603e908201527f596f752063616e206f6e6c79207374616b65206c6f636b6564206c697175696460408201527f69747920666f7220312c20322c20332c2035206f722031302079656172730000606082015260800190565b6020808252601690820152755374616b65206973207374696c6c206c6f636b65642160501b604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252600e908201526d043616e6e6f74207374616b6520360941b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601b908201527f506572696f6420686173206e6f74206578706972656420796574210000000000604082015260600190565b6020808252601590820152742cb7ba9030b932903737ba103a34329037bbb732b960591b604082015260600190565b6020808252603e908201527f596f752063616e206f6e6c79207374616b65206c6f636b6564206c697175696460408201527f69747920313020796561727320666f72207472756520424420706f6f6c730000606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b602080825260119082015270043616e6e6f74207769746864726177203607c1b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601e908201527f4e6f7420737570706f72746564207374616b696e67206475726174696f6e0000604082015260600190565b6020808252600f908201526e14dd185ad9481b9bdd08199bdd5b99608a1b604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526024908201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416040820152631253115160e21b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b90815260200190565b918252602082015260400190565b60005b83811015612c41578181015183820152602001612c29565b83811115612c50576000848401525b50505050565b80151581146105b557600080fdfea26469706673582212209315bf948f47320181702c49d5c1205a3b4a62cf6166c48a0d16d6f7ca80e64164736f6c634300060b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102525760003560e01c806370a0823111610146578063a694fc3a116100c3578063cd3daf9d11610087578063cd3daf9d14610474578063d96eb3f41461047c578063ebe2b12b14610484578063f2fde38b1461048c578063fecf97341461049f578063fee2eae6146104b257610252565b8063a694fc3a14610436578063bf1b71a514610449578063c11f534414610451578063c8f33c9114610459578063cc1a378f1461046157610252565b806384955c881161010a57806384955c88146103ed57806387bf5b66146104005780638980f11f146104135780638da5cb5b1461042657806399a9cfc61461042e57610252565b806370a08231146103a2578063715018a6146103b557806372f702f3146103bd57806380060d49146103d257806380faa57d146103e557610252565b80632e1a7d4d116101d45780633d6aa5e1116101985780633d6aa5e11461035957806351e3fc171461036157806359355736146103745780635bb2a8f6146103875780635c975abb1461039a57610252565b80632e1a7d4d1461030e57806331ca208c14610321578063399f5467146103415780633a88e1d0146103495780633d18b9121461035157610252565b806318160ddd1161021b57806318160ddd146102c35780631beabcd2146102cb5780631c1f78eb146102de5780631e090f01146102e6578063262696d41461030657610252565b80628cc262146102575780630700037d146102805780630dda72991461029357806313af40351461029b57806317b18c89146102b0575b600080fd5b61026a610265366004612446565b6104ba565b6040516102779190612c0f565b60405180910390f35b61026a61028e366004612446565b610552565b61026a610564565b6102ae6102a9366004612446565b61056b565b005b6102ae6102be366004612566565b6105b8565b61026a61091f565b61026a6102d9366004612446565b610925565b61026a610940565b6102f96102f4366004612446565b6109dd565b604051610277919061263f565b61026a610a84565b6102ae61031c366004612536565b610a8a565b61033461032f366004612446565b610c35565b60405161027791906126ad565b610334610c4a565b61026a610c53565b6102ae610c5a565b61026a610f5f565b6102ae61036f366004612536565b610f6b565b61026a610382366004612446565b611296565b6102ae6103953660046124b9565b6112b1565b610334611314565b61026a6103b0366004612446565b61131d565b6102ae611350565b6103c56113d9565b60405161027791906125ee565b61026a6103e0366004612536565b6113e8565b61026a611462565b61026a6103fb366004612446565b611470565b61026a61040e366004612446565b61148b565b6102ae6104213660046124f0565b61149d565b6103c56115b5565b61026a6115c4565b6102ae610444366004612536565b6115ca565b6103346117b8565b61026a6117c1565b61026a611846565b6102ae61046f366004612536565b61184c565b61026a6118f0565b6102ae6119c7565b61026a611a13565b6102ae61049a366004612446565b611a19565b6102ae6104ad366004612461565b611ada565b6102ae611bf5565b6001600160a01b038116600090815260a2602090815260408083205460a190925282205461054a919061053e90670de0b6b3a7640000906105329061050d906105016118f0565b9063ffffffff611c0916565b6001600160a01b038816600090815260a760205260409020549063ffffffff611c5416565b9063ffffffff611c8e16565b9063ffffffff611cd016565b90505b919050565b60a26020526000908152604090205481565b60a4545b90565b6105736115b5565b6001600160a01b0316336001600160a01b0316146105ac5760405162461bcd60e51b81526004016105a39061290e565b60405180910390fd5b6105b581611a19565b50565b600260985414156105db5760405162461bcd60e51b81526004016105a390612bd8565b60026098556105e8611314565b156106055760405162461bcd60e51b81526004016105a39061299a565b33609c5442111561061d57610618611cf5565b610634565b6106256118f0565b60a055610630611462565b609f555b6001600160a01b038116156106785761064c816104ba565b6001600160a01b038216600090815260a2602090815260408083209390935560a05460a1909152919020555b600083116106985760405162461bcd60e51b81526004016105a390612878565b81600a14156106c857609d5460ff166106c35760405162461bcd60e51b81526004016105a39061293d565b610714565b81600114806106d75750816002145b806106e25750816003145b806106ed5750816005145b806106f8575081600a145b6107145760405162461bcd60e51b81526004016105a3906127a5565b33600090815260a9602052604090205460ff16156107445760405162461bcd60e51b81526004016105a3906126eb565b6301e1338082026000610756846113e8565b90506000610771620f4240610532888563ffffffff611c5416565b33600081815260a8602052604090819020815160a081019092529293509081906107a090428b60c085016125a8565b6040516020818303038152906040528051906020012081526020014281526020018881526020016107da8642611cd090919063ffffffff16565b815260209081018590528254600181810185556000948552938290208351600590920201908155908201519281019290925560408101516002830155606081015160038301556080015160049091015560a35461083d908763ffffffff611cd016565b60a35560a454610853908263ffffffff611cd016565b60a45533600090815260a66020526040902054610876908763ffffffff611cd016565b33600090815260a6602090815260408083209390935560a7905220546108a2908263ffffffff611cd016565b33600081815260a760205260409020919091556099546108cf916001600160a01b03909116903089611dbc565b336001600160a01b03167fa5ae833d0bb1dcd632d98a8b70973e8516812898e19bf27b70071ebc8dc52c01878560405161090a929190612c18565b60405180910390a25050600160985550505050565b60a35490565b6001600160a01b0316600090815260a7602052604090205490565b609e54609a5460405163964efe8160e01b81526000926109d89290916001600160a01b039091169063964efe819061097c9030906004016125ee565b60206040518083038186803b15801561099457600080fd5b505afa1580156109a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cc919061254e565b9063ffffffff611c5416565b905090565b6001600160a01b038116600090815260a860209081526040808320805482518185028101850190935280835260609492939192909184015b82821015610a7957838290600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505081526020019060010190610a15565b505050509050919050565b60a05481565b60026098541415610aad5760405162461bcd60e51b81526004016105a390612bd8565b6002609855609c543390421115610acb57610ac6611cf5565b610ae2565b610ad36118f0565b60a055610ade611462565b609f555b6001600160a01b03811615610b2657610afa816104ba565b6001600160a01b038216600090815260a2602090815260408083209390935560a05460a1909152919020555b60008211610b465760405162461bcd60e51b81526004016105a390612a12565b33600090815260a56020526040902054610b66908363ffffffff611c0916565b33600090815260a5602090815260408083209390935560a790522054610b92908363ffffffff611c0916565b33600090815260a7602052604090205560a354610bb5908363ffffffff611c0916565b60a35560a454610bcb908363ffffffff611c0916565b60a455609954610beb906001600160a01b0316338463ffffffff611ead16565b336001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d583604051610c249190612c0f565b60405180910390a250506001609855565b60a96020526000908152604090205460ff1681565b60aa5460ff1681565b620f424081565b60026098541415610c7d5760405162461bcd60e51b81526004016105a390612bd8565b6002609855609c543390421115610c9b57610c96611cf5565b610cb2565b610ca36118f0565b60a055610cae611462565b609f555b6001600160a01b03811615610cf657610cca816104ba565b6001600160a01b038216600090815260a2602090815260408083209390935560a05460a1909152919020555b33600090815260a260205260409020548015610f565733600090815260a260209081526040808320839055609a5481516328d48e9f60e01b815291516001600160a01b03909116926328d48e9f9260048082019391829003018186803b158015610d5f57600080fd5b505afa158015610d73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d97919061254e565b609a54609b546040516326ed0e9160e01b81529293506064848103860204926001600160a01b03928316926326ed0e9192610ddb9291169085880390600401612602565b600060405180830381600087803b158015610df557600080fd5b505af1158015610e09573d6000803e3d6000fd5b5050609b5460405163b84c8ce560e01b81526001600160a01b03909116925063b84c8ce59150610e4190339085880390600401612602565b600060405180830381600087803b158015610e5b57600080fd5b505af1158015610e6f573d6000803e3d6000fd5b5050609a5460405163413918c960e11b81526001600160a01b03909116925063827231929150610ea59033908590600401612602565b600060405180830381600087803b158015610ebf57600080fd5b505af1158015610ed3573d6000803e3d6000fd5b50505050336001600160a01b03167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e048682604051610f109190612c0f565b60405180910390a27f9fbc695eed6a70ae78a7532506abdb142ee788cd93f76ef3b7122561422f636733828503604051610f4b929190612602565b60405180910390a150505b50506001609855565b670de0b6b3a764000081565b60026098541415610f8e5760405162461bcd60e51b81526004016105a390612bd8565b6002609855609c543390421115610fac57610fa7611cf5565b610fc3565b610fb46118f0565b60a055610fbf611462565b609f555b6001600160a01b0381161561100757610fdb816104ba565b6001600160a01b038216600090815260a2602090815260408083209390935560a05460a1909152919020555b61100f6123fd565b600060408201819052805b33600090815260a860205260409020548110156110dd5733600090815260a86020526040902080548290811061104c57fe5b9060005260206000209060050201600001548514156110d55733600090815260a86020526040902080548290811061108057fe5b90600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505092508091506110dd565b60010161101a565b50815184146110fe5760405162461bcd60e51b81526004016105a390612aea565b816060015142101580611118575060aa5460ff1615156001145b6111345760405162461bcd60e51b81526004016105a390612802565b6040820151608083015160009061115b90620f42409061053290859063ffffffff611c5416565b905081156112895733600090815260a66020526040902054611183908363ffffffff611c0916565b33600090815260a6602090815260408083209390935560a7905220546111af908263ffffffff611c0916565b33600090815260a7602052604090205560a3546111d2908363ffffffff611c0916565b60a35560a4546111e8908263ffffffff611c0916565b60a45533600090815260a86020526040902080548490811061120657fe5b6000918252602082206005909102018181556001810182905560028101829055600381018290556004015560995461124e906001600160a01b0316338463ffffffff611ead16565b336001600160a01b03167f1f70bda8ea2447de035db87c33fe8f03f7514d49c394293e5cffdb4c34352cf6838860405161090a929190612c18565b5050600160985550505050565b6001600160a01b0316600090815260a6602052604090205490565b6112b96115b5565b6001600160a01b0316336001600160a01b0316146112e95760405162461bcd60e51b81526004016105a39061290e565b6001600160a01b0391909116600090815260a960205260409020805460ff1916911515919091179055565b60335460ff1690565b6001600160a01b038116600090815260a6602090815260408083205460a590925282205461054a9163ffffffff611cd016565b611358611f08565b6001600160a01b03166113696115b5565b6001600160a01b03161461138f5760405162461bcd60e51b81526004016105a390612a7e565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b6099546001600160a01b031681565b600081600a14156113fe57506302faf08061054d565b816005141561141157506298968061054d565b81600314156114245750622dc6c061054d565b816002141561143757506223994861054d565b816001141561144a575062196fb861054d565b60405162461bcd60e51b81526004016105a390612ab3565b60006109d842609c54611f0c565b6001600160a01b0316600090815260a5602052604090205490565b60a16020526000908152604090205481565b6114a56115b5565b6001600160a01b0316336001600160a01b0316146114d55760405162461bcd60e51b81526004016105a39061290e565b6099546001600160a01b03838116911614156114f057600080fd5b816001600160a01b031663a9059cbb6115076115b5565b836040518363ffffffff1660e01b8152600401611525929190612602565b602060405180830381600087803b15801561153f57600080fd5b505af1158015611553573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611577919061251a565b507f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2882826040516115a9929190612602565b60405180910390a15050565b6065546001600160a01b031690565b609e5481565b600260985414156115ed5760405162461bcd60e51b81526004016105a390612bd8565b60026098556115fa611314565b156116175760405162461bcd60e51b81526004016105a39061299a565b33609c5442111561162f5761162a611cf5565b611646565b6116376118f0565b60a055611642611462565b609f555b6001600160a01b0381161561168a5761165e816104ba565b6001600160a01b038216600090815260a2602090815260408083209390935560a05460a1909152919020555b600082116116aa5760405162461bcd60e51b81526004016105a390612878565b33600090815260a9602052604090205460ff16156116da5760405162461bcd60e51b81526004016105a3906126eb565b60a3546116ed908363ffffffff611cd016565b60a35560a454611703908363ffffffff611cd016565b60a45533600090815260a56020526040902054611726908363ffffffff611cd016565b33600090815260a5602090815260408083209390935560a790522054611752908363ffffffff611cd016565b33600081815260a7602052604090209190915560995461177f916001600160a01b03909116903085611dbc565b336001600160a01b03167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d83604051610c249190612c0f565b609d5460ff1681565b6099546040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561180657600080fd5b505afa15801561181a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183e9190612587565b60ff16905090565b609f5481565b6118546115b5565b6001600160a01b0316336001600160a01b0316146118845760405162461bcd60e51b81526004016105a39061290e565b609c5415806118945750609c5442115b6118b05760405162461bcd60e51b81526004016105a390612722565b609e8190556040517ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d3906118e5908390612c0f565b60405180910390a150565b600060a35460001415611906575060a054610568565b60a454609a5460405163964efe8160e01b81526119c0926119b192909161053291670de0b6b3a7640000916109cc916001600160a01b03169063964efe81906119539030906004016125ee565b60206040518083038186803b15801561196b57600080fd5b505afa15801561197f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a3919061254e565b6109cc609f54610501611462565b60a0549063ffffffff611cd016565b9050610568565b6119cf6115b5565b6001600160a01b0316336001600160a01b0316146119ff5760405162461bcd60e51b81526004016105a39061290e565b60aa805460ff19811660ff90911615179055565b609c5481565b611a21611f08565b6001600160a01b0316611a326115b5565b6001600160a01b031614611a585760405162461bcd60e51b81526004016105a390612a7e565b6001600160a01b038116611a7e5760405162461bcd60e51b81526004016105a390612832565b6065546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3606580546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff1680611af35750611af3611f22565b80611b01575060005460ff16155b611b1d5760405162461bcd60e51b81526004016105a3906129c4565b600054610100900460ff16158015611b48576000805460ff1961ff0019909116610100171660011790555b611b50611f33565b611b58611fc5565b609980546001600160a01b038088166001600160a01b031992831617909255609a8054878416908316179055609b805492861692909116919091179055426097819055609d805484151560ff199182161790915562093a80609e81905560aa8054909216909155609f829055611bd4919063ffffffff611cd016565b609c5560016098558015611bee576000805461ff00191690555b5050505050565b609c54421115611c0757611c07611cf5565b565b6000611c4b83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612043565b90505b92915050565b600082611c6357506000611c4e565b82820282848281611c7057fe5b0414611c4b5760405162461bcd60e51b81526004016105a390612a3d565b6000611c4b83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061206f565b600082820183811015611c4b5760405162461bcd60e51b81526004016105a3906128a0565b609c544211611d165760405162461bcd60e51b81526004016105a3906128d7565b6000609e54611d30609c5442611c0990919063ffffffff16565b81611d3757fe5b049050611d66611d57609e546109cc600185611cd090919063ffffffff16565b609c549063ffffffff611cd016565b609c55611d716118f0565b60a055611d7c611462565b609f556099546040517f6f2b3b3aaf1881d69a5d40565500f93ea73df36e7b6a29bf48b21479a9237fe9916118e5916001600160a01b03909116906125ee565b60006060856001600160a01b03166323b872dd868686604051602401611de49392919061261b565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051611e1d91906125d2565b6000604051808303816000865af19150503d8060008114611e5a576040519150601f19603f3d011682016040523d82523d6000602084013e611e5f565b606091505b5091509150818015611e89575080511580611e89575080806020019051810190611e89919061251a565b611ea55760405162461bcd60e51b81526004016105a390612b94565b505050505050565b611f038363a9059cbb60e01b8484604051602401611ecc929190612602565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526120a6565b505050565b3390565b6000818310611f1b5781611c4b565b5090919050565b6000611f2d30612135565b15905090565b600054610100900460ff1680611f4c5750611f4c611f22565b80611f5a575060005460ff16155b611f765760405162461bcd60e51b81526004016105a3906129c4565b600054610100900460ff16158015611fa1576000805460ff1961ff0019909116610100171660011790555b611fa961213b565b611fb16121bc565b80156105b5576000805461ff001916905550565b600054610100900460ff1680611fde5750611fde611f22565b80611fec575060005460ff16155b6120085760405162461bcd60e51b81526004016105a3906129c4565b600054610100900460ff16158015612033576000805460ff1961ff0019909116610100171660011790555b61203b61213b565b611fb1612296565b600081848411156120675760405162461bcd60e51b81526004016105a391906126b8565b505050900390565b600081836120905760405162461bcd60e51b81526004016105a391906126b8565b50600083858161209c57fe5b0495945050505050565b60606120fb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166123229092919063ffffffff16565b805190915015611f035780806020019051810190612119919061251a565b611f035760405162461bcd60e51b81526004016105a390612b4a565b3b151590565b600054610100900460ff16806121545750612154611f22565b80612162575060005460ff16155b61217e5760405162461bcd60e51b81526004016105a3906129c4565b600054610100900460ff16158015611fb1576000805460ff1961ff00199091166101001716600117905580156105b5576000805461ff001916905550565b600054610100900460ff16806121d557506121d5611f22565b806121e3575060005460ff16155b6121ff5760405162461bcd60e51b81526004016105a3906129c4565b600054610100900460ff1615801561222a576000805460ff1961ff0019909116610100171660011790555b6000612234611f08565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156105b5576000805461ff001916905550565b600054610100900460ff16806122af57506122af611f22565b806122bd575060005460ff16155b6122d95760405162461bcd60e51b81526004016105a3906129c4565b600054610100900460ff16158015612304576000805460ff1961ff0019909116610100171660011790555b6033805460ff1916905580156105b5576000805461ff001916905550565b60606123318484600085612339565b949350505050565b606061234485612135565b6123605760405162461bcd60e51b81526004016105a390612b13565b60006060866001600160a01b0316858760405161237d91906125d2565b60006040518083038185875af1925050503d80600081146123ba576040519150601f19603f3d011682016040523d82523d6000602084013e6123bf565b606091505b509150915081156123d35791506123319050565b8051156123e35780518082602001fd5b8360405162461bcd60e51b81526004016105a391906126b8565b6040518060a0016040528060008019168152602001600081526020016000815260200160008152602001600081525090565b80356001600160a01b0381168114611c4e57600080fd5b600060208284031215612457578081fd5b611c4b838361242f565b60008060008060808587031215612476578283fd5b612480868661242f565b935061248f866020870161242f565b925061249e866040870161242f565b915060608501356124ae81612c56565b939692955090935050565b600080604083850312156124cb578182fd5b6124d5848461242f565b915060208301356124e581612c56565b809150509250929050565b60008060408385031215612502578182fd5b61250c848461242f565b946020939093013593505050565b60006020828403121561252b578081fd5b8151611c4b81612c56565b600060208284031215612547578081fd5b5035919050565b60006020828403121561255f578081fd5b5051919050565b60008060408385031215612578578182fd5b50508035926020909101359150565b600060208284031215612598578081fd5b815160ff81168114611c4b578182fd5b60609390931b6bffffffffffffffffffffffff191683526014830191909152603482015260540190565b600082516125e4818460208701612c26565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b602080825282518282018190526000919060409081850190868401855b828110156126a05781518051855286810151878601528581015186860152606080820151908601526080908101519085015260a0909301929085019060010161265c565b5091979650505050505050565b901515815260200190565b60006020825282518060208401526126d7816040850160208701612c26565b601f01601f19169190910160400192915050565b6020808252601b908201527f6164647265737320686173206265656e20677265796c69737465640000000000604082015260600190565b60208082526058908201527f50726576696f7573207265776172647320706572696f64206d7573742062652060408201527f636f6d706c657465206265666f7265206368616e67696e67207468652064757260608201527f6174696f6e20666f7220746865206e657720706572696f640000000000000000608082015260a00190565b6020808252603e908201527f596f752063616e206f6e6c79207374616b65206c6f636b6564206c697175696460408201527f69747920666f7220312c20322c20332c2035206f722031302079656172730000606082015260800190565b6020808252601690820152755374616b65206973207374696c6c206c6f636b65642160501b604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252600e908201526d043616e6e6f74207374616b6520360941b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601b908201527f506572696f6420686173206e6f74206578706972656420796574210000000000604082015260600190565b6020808252601590820152742cb7ba9030b932903737ba103a34329037bbb732b960591b604082015260600190565b6020808252603e908201527f596f752063616e206f6e6c79207374616b65206c6f636b6564206c697175696460408201527f69747920313020796561727320666f72207472756520424420706f6f6c730000606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b602080825260119082015270043616e6e6f74207769746864726177203607c1b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601e908201527f4e6f7420737570706f72746564207374616b696e67206475726174696f6e0000604082015260600190565b6020808252600f908201526e14dd185ad9481b9bdd08199bdd5b99608a1b604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526024908201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416040820152631253115160e21b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b90815260200190565b918252602082015260400190565b60005b83811015612c41578181015183820152602001612c29565b83811115612c50576000848401525b50505050565b80151581146105b557600080fdfea26469706673582212209315bf948f47320181702c49d5c1205a3b4a62cf6166c48a0d16d6f7ca80e64164736f6c634300060b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 492,
        "contract": "contracts/Staking/StakingRewards.sol:StakingRewards",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 495,
        "contract": "contracts/Staking/StakingRewards.sol:StakingRewards",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1447,
        "contract": "contracts/Staking/StakingRewards.sol:StakingRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1469,
        "contract": "contracts/Staking/StakingRewards.sol:StakingRewards",
        "label": "_paused",
        "offset": 0,
        "slot": "51",
        "type": "t_bool"
      },
      {
        "astId": 1560,
        "contract": "contracts/Staking/StakingRewards.sol:StakingRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Staking/StakingRewards.sol:StakingRewards",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 129,
        "contract": "contracts/Staking/StakingRewards.sol:StakingRewards",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8533,
        "contract": "contracts/Staking/StakingRewards.sol:StakingRewards",
        "label": "DeploymentTimestamp",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 8541,
        "contract": "contracts/Staking/StakingRewards.sol:StakingRewards",
        "label": "_reentry_guard_status",
        "offset": 0,
        "slot": "152",
        "type": "t_uint256"
      },
      {
        "astId": 8543,
        "contract": "contracts/Staking/StakingRewards.sol:StakingRewards",
        "label": "stakingToken",
        "offset": 0,
        "slot": "153",
        "type": "t_contract(ERC20)5857"
      },
      {
        "astId": 8545,
        "contract": "contracts/Staking/StakingRewards.sol:StakingRewards",
        "label": "stakingRewardsDistribution",
        "offset": 0,
        "slot": "154",
        "type": "t_contract(StakingRewardsDistribution)10320"
      },
      {
        "astId": 8547,
        "contract": "contracts/Staking/StakingRewards.sol:StakingRewards",
        "label": "vesting",
        "offset": 0,
        "slot": "155",
        "type": "t_contract(Vesting)10652"
      },
      {
        "astId": 8549,
        "contract": "contracts/Staking/StakingRewards.sol:StakingRewards",
        "label": "periodFinish",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      },
      {
        "astId": 8551,
        "contract": "contracts/Staking/StakingRewards.sol:StakingRewards",
        "label": "isTrueBdPool",
        "offset": 0,
        "slot": "157",
        "type": "t_bool"
      },
      {
        "astId": 8553,
        "contract": "contracts/Staking/StakingRewards.sol:StakingRewards",
        "label": "rewardsDurationSeconds",
        "offset": 0,
        "slot": "158",
        "type": "t_uint256"
      },
      {
        "astId": 8555,
        "contract": "contracts/Staking/StakingRewards.sol:StakingRewards",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "159",
        "type": "t_uint256"
      },
      {
        "astId": 8557,
        "contract": "contracts/Staking/StakingRewards.sol:StakingRewards",
        "label": "rewardPerTokenStored_REWARD_PRECISION",
        "offset": 0,
        "slot": "160",
        "type": "t_uint256"
      },
      {
        "astId": 8561,
        "contract": "contracts/Staking/StakingRewards.sol:StakingRewards",
        "label": "userRewardPerTokenPaid_REWARD_PRECISION",
        "offset": 0,
        "slot": "161",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8565,
        "contract": "contracts/Staking/StakingRewards.sol:StakingRewards",
        "label": "rewards",
        "offset": 0,
        "slot": "162",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8567,
        "contract": "contracts/Staking/StakingRewards.sol:StakingRewards",
        "label": "_staking_token_supply",
        "offset": 0,
        "slot": "163",
        "type": "t_uint256"
      },
      {
        "astId": 8569,
        "contract": "contracts/Staking/StakingRewards.sol:StakingRewards",
        "label": "_staking_token_boosted_supply",
        "offset": 0,
        "slot": "164",
        "type": "t_uint256"
      },
      {
        "astId": 8573,
        "contract": "contracts/Staking/StakingRewards.sol:StakingRewards",
        "label": "_unlocked_balances",
        "offset": 0,
        "slot": "165",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8577,
        "contract": "contracts/Staking/StakingRewards.sol:StakingRewards",
        "label": "_locked_balances",
        "offset": 0,
        "slot": "166",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8581,
        "contract": "contracts/Staking/StakingRewards.sol:StakingRewards",
        "label": "_boosted_balances",
        "offset": 0,
        "slot": "167",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8586,
        "contract": "contracts/Staking/StakingRewards.sol:StakingRewards",
        "label": "lockedStakes",
        "offset": 0,
        "slot": "168",
        "type": "t_mapping(t_address,t_array(t_struct(LockedStake)8603_storage)dyn_storage)"
      },
      {
        "astId": 8590,
        "contract": "contracts/Staking/StakingRewards.sol:StakingRewards",
        "label": "greylist",
        "offset": 0,
        "slot": "169",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 8592,
        "contract": "contracts/Staking/StakingRewards.sol:StakingRewards",
        "label": "unlockedStakes",
        "offset": 0,
        "slot": "170",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(LockedStake)8603_storage)dyn_storage": {
        "base": "t_struct(LockedStake)8603_storage",
        "encoding": "dynamic_array",
        "label": "struct StakingRewards.LockedStake[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ERC20)5857": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_contract(StakingRewardsDistribution)10320": {
        "encoding": "inplace",
        "label": "contract StakingRewardsDistribution",
        "numberOfBytes": "20"
      },
      "t_contract(Vesting)10652": {
        "encoding": "inplace",
        "label": "contract Vesting",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(LockedStake)8603_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StakingRewards.LockedStake[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(LockedStake)8603_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(LockedStake)8603_storage": {
        "encoding": "inplace",
        "label": "struct StakingRewards.LockedStake",
        "members": [
          {
            "astId": 8594,
            "contract": "contracts/Staking/StakingRewards.sol:StakingRewards",
            "label": "kek_id",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 8596,
            "contract": "contracts/Staking/StakingRewards.sol:StakingRewards",
            "label": "start_timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8598,
            "contract": "contracts/Staking/StakingRewards.sol:StakingRewards",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8600,
            "contract": "contracts/Staking/StakingRewards.sol:StakingRewards",
            "label": "ending_timestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8602,
            "contract": "contracts/Staking/StakingRewards.sol:StakingRewards",
            "label": "multiplier_LOCK_MULTIPLIER_PRECISION",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}