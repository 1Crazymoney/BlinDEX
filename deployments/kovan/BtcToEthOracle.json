{
  "address": "0x5A2E493ae606ff9b3F02761F8E0EE40Ad6Dc0215",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_btcEthFeedAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wethAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "consult",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrice_1e12",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shouldUpdateOracle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x42aa2a0e201831a2940623b82eab1d23c9d7024d4d8c5f6cf24b410cd5b78860",
  "receipt": {
    "to": null,
    "from": "0x774289Cb40c98B4f5b64a152BF7e5F94Fee38669",
    "contractAddress": "0x5A2E493ae606ff9b3F02761F8E0EE40Ad6Dc0215",
    "transactionIndex": 8,
    "gasUsed": "331850",
    "logsBloom": "0x
    "blockHash": "0xe4c273b6b45b7c5883fda9e51f80cf4404093ea05463a11e57e5cbc205fc3d4e",
    "transactionHash": "0x42aa2a0e201831a2940623b82eab1d23c9d7024d4d8c5f6cf24b410cd5b78860",
    "logs": [],
    "blockNumber": 27646139,
    "cumulativeGasUsed": "745899",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF7904a295A029a3aBDFFB6F12755974a958C7C25",
    "0xd0a1e359811322d97991e03f863a0c30c2cf029c"
  ],
  "solcInputHash": "7fc5f7df362effb291697cb25232d91e",
  "metadata": "{\"compiler\":{\"version\":\"0.6.11+commit.5ef660b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_btcEthFeedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"consult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice_1e12\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldUpdateOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Oracle/BtcToEthOracle.sol\":\"BtcToEthOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0xd59454f079791fa65de99df4f72d7efc0443657dacff0a1e41fcd0542bb5ee71\",\"license\":\"MIT\"},\"contracts/Oracle/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.11;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\",\"keccak256\":\"0xc6488af0275766b27cbbadec4770df11b2ff2c149bd3121ecf487f724d7a69cf\",\"license\":\"MIT\"},\"contracts/Oracle/BtcToEthOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\nimport \\\"../Math/SafeMath.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\nimport \\\"./ICryptoPairOracle.sol\\\";\\n\\n// Fixed window oracle that recomputes the average price for the entire period once every period\\n// Note that the price average is only guaranteed to be over at least 1 period, but may be over a longer period\\ncontract BtcToEthOracle is ICryptoPairOracle {\\n    using SafeMath for uint256;\\n\\n    AggregatorV3Interface internal feed;\\n    address internal wethAddress;\\n    \\n    constructor(address _btcEthFeedAddress, address _wethAddress) public {\\n        feed = AggregatorV3Interface(_btcEthFeedAddress);\\n        wethAddress = _wethAddress;\\n    }\\n\\n    function getPrice_1e12() public view returns (uint256) {       \\n        uint256 price = getLatestPrice(feed);\\n\\n        return uint256(1e12)\\n            .mul(price)\\n            .div(uint256(10)**feed.decimals());\\n    }\\n\\n    function consult(address tokenIn, uint256 amountIn) external view override returns (uint256) {     \\n        require(tokenIn == wethAddress, \\\"This oracle only accepts consulting WETH input\\\");\\n\\n        return amountIn.mul(1e12).div(getPrice_1e12());\\n    }\\n\\n    function getLatestPrice(AggregatorV3Interface _feed) internal view returns (uint256) {\\n        (\\n            , \\n            int256 price,\\n            ,\\n            ,\\n            \\n        ) = _feed.latestRoundData();\\n        return uint256(price);\\n    }\\n\\n    function updateOracle() public override {}\\n\\n    function shouldUpdateOracle() public view override returns (bool) {\\n        return false;\\n    }\\n}\",\"keccak256\":\"0x2709ad107f204e294663db7d3f2e4c7b933eb196a97170327bb04f1b360a25c1\",\"license\":\"MIT\"},\"contracts/Oracle/ICryptoPairOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\ninterface ICryptoPairOracle {\\n    \\n    function consult(address tokenIn, uint256 amountIn)\\n        external\\n        view\\n        returns (uint amountOut);\\n\\n    function updateOracle() external;\\n\\n    function shouldUpdateOracle() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x00b4ecc1f139da5a2cba4c0493408762e78f29122116936e29ec4169328ee52a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516104ad3803806104ad8339818101604052604081101561003357600080fd5b508051602090910151600080546001600160a01b039384166001600160a01b031991821617909155600180549390921692169190911790556104338061007a6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806309bf39ed146100515780633ddac9531461006d578063d6f124f0146100ab578063f245a92f146100b5575b600080fd5b6100596100bd565b604080519115158252519081900360200190f35b6100996004803603604081101561008357600080fd5b506001600160a01b0381351690602001356100c2565b60408051918252519081900360200190f35b6100b3610146565b005b610099610148565b600090565b6001546000906001600160a01b038481169116146101115760405162461bcd60e51b815260040180806020018281038252602e8152602001806103d0602e913960400191505060405180910390fd5b61013d61011c610148565b6101318464e8d4a5100063ffffffff6101ff16565b9063ffffffff61025816565b90505b92915050565b565b600080548190610160906001600160a01b031661029a565b90506101f96000809054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156101b257600080fd5b505afa1580156101c6573d6000803e3d6000fd5b505050506040513d60208110156101dc57600080fd5b505160ff16600a0a61013164e8d4a510008463ffffffff6101ff16565b91505090565b60008261020e57506000610140565b8282028284828161021b57fe5b041461013d5760405162461bcd60e51b81526004018080602001828103825260218152602001806103af6021913960400191505060405180910390fd5b600061013d83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061030c565b600080826001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156102d657600080fd5b505afa1580156102ea573d6000803e3d6000fd5b505050506040513d60a081101561030057600080fd5b50602001519392505050565b600081836103985760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561035d578181015183820152602001610345565b50505050905090810190601f16801561038a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816103a457fe5b049594505050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7754686973206f7261636c65206f6e6c79206163636570747320636f6e73756c74696e67205745544820696e707574a264697066735822122057884da001ad2b8145e83342d9bd9dc0d9fc247dc79be86ad445a92f48ff578a64736f6c634300060b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806309bf39ed146100515780633ddac9531461006d578063d6f124f0146100ab578063f245a92f146100b5575b600080fd5b6100596100bd565b604080519115158252519081900360200190f35b6100996004803603604081101561008357600080fd5b506001600160a01b0381351690602001356100c2565b60408051918252519081900360200190f35b6100b3610146565b005b610099610148565b600090565b6001546000906001600160a01b038481169116146101115760405162461bcd60e51b815260040180806020018281038252602e8152602001806103d0602e913960400191505060405180910390fd5b61013d61011c610148565b6101318464e8d4a5100063ffffffff6101ff16565b9063ffffffff61025816565b90505b92915050565b565b600080548190610160906001600160a01b031661029a565b90506101f96000809054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156101b257600080fd5b505afa1580156101c6573d6000803e3d6000fd5b505050506040513d60208110156101dc57600080fd5b505160ff16600a0a61013164e8d4a510008463ffffffff6101ff16565b91505090565b60008261020e57506000610140565b8282028284828161021b57fe5b041461013d5760405162461bcd60e51b81526004018080602001828103825260218152602001806103af6021913960400191505060405180910390fd5b600061013d83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061030c565b600080826001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156102d657600080fd5b505afa1580156102ea573d6000803e3d6000fd5b505050506040513d60a081101561030057600080fd5b50602001519392505050565b600081836103985760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561035d578181015183820152602001610345565b50505050905090810190601f16801561038a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816103a457fe5b049594505050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7754686973206f7261636c65206f6e6c79206163636570747320636f6e73756c74696e67205745544820696e707574a264697066735822122057884da001ad2b8145e83342d9bd9dc0d9fc247dc79be86ad445a92f48ff578a64736f6c634300060b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8149,
        "contract": "contracts/Oracle/BtcToEthOracle.sol:BtcToEthOracle",
        "label": "feed",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(AggregatorV3Interface)8137"
      },
      {
        "astId": 8151,
        "contract": "contracts/Oracle/BtcToEthOracle.sol:BtcToEthOracle",
        "label": "wethAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(AggregatorV3Interface)8137": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      }
    }
  }
}