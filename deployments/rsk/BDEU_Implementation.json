{
  "address": "0x3e695C1D82900BFb9b491fd9fB1127054EAEF1df",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bdstable_oracle_addr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "weth_address",
          "type": "address"
        }
      ],
      "name": "BDStable_WETH_OracleSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bdx_oracle_address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "weth_address",
          "type": "address"
        }
      ],
      "name": "BDX_WETH_OracleSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BdStableBurned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BdStableMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bdStable_step_d12",
          "type": "uint256"
        }
      ],
      "name": "BdStableStepSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedCR_d12",
          "type": "uint256"
        }
      ],
      "name": "CollateralRatioLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "collateral_ratio_paused",
          "type": "bool"
        }
      ],
      "name": "CollateralRatioPausedToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "global_collateral_ratio",
          "type": "uint256"
        }
      ],
      "name": "CollateralRatioRefreshed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "eth_fiat_consumer_address",
          "type": "address"
        }
      ],
      "name": "EthFiatOracleSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool_address",
          "type": "address"
        }
      ],
      "name": "PoolAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool_address",
          "type": "address"
        }
      ],
      "name": "PoolRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_price_band_d12",
          "type": "uint256"
        }
      ],
      "name": "PriceBandSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_price_target_d12",
          "type": "uint256"
        }
      ],
      "name": "PriceTargetSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BDX_price_d12",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool_address",
          "type": "address"
        }
      ],
      "name": "addPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bdStable_step_d12",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bdstable_pools",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bdstable_pools_array",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bdstable_price_d12",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bdx_address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "canLegallyRedeem",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateral_ratio_paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "effective_global_collateral_ratio_d12",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fiat",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBdStablesPoolsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalCollateralValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "global_collateral_ratio_d12",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_fiat",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_owner_address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury_address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bdx_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_initalBdStableToOwner_d18",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastMintByUserBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "wantedCR_d12",
          "type": "uint256"
        }
      ],
      "name": "lockCollateralRatioAt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner_address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "b_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "b_amount",
          "type": "uint256"
        }
      ],
      "name": "pool_burn_from",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "m_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "m_amount",
          "type": "uint256"
        }
      ],
      "name": "pool_mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price_band_d12",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price_target_d12",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refreshCollateralRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refreshCollateralRatio_last_call_time",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refresh_cooldown",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool_address",
          "type": "address"
        }
      ],
      "name": "removePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bdstable_oracle_addr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth_address",
          "type": "address"
        }
      ],
      "name": "setBDStable_WETH_Oracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bdx_oracle_addr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth_address",
          "type": "address"
        }
      ],
      "name": "setBDX_WETH_Oracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bdStable_step_d12",
          "type": "uint256"
        }
      ],
      "name": "setBdStable_step_d12",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_eth_fiat_consumer_address",
          "type": "address"
        }
      ],
      "name": "setETH_fiat_Oracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minimumMintRedeemDelayInBlocks",
          "type": "uint256"
        }
      ],
      "name": "setMinimumSwapsDelayInBlocks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner_address",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury_address",
          "type": "address"
        }
      ],
      "name": "setTreasury_address",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price_band_d12",
          "type": "uint256"
        }
      ],
      "name": "set_price_band_d12",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price_target_d12",
          "type": "uint256"
        }
      ],
      "name": "set_price_target_d12",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shouldUpdateOracles",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleCollateralRatioPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury_address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateOraclesIfNeeded",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth_address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth_fiat_price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x36dc7b7b943c97251680db92b5d66f725f29680fa7d5e5729c1972ce35bf6684",
  "receipt": {
    "to": null,
    "from": "0x774289Cb40c98B4f5b64a152BF7e5F94Fee38669",
    "contractAddress": "0x3e695C1D82900BFb9b491fd9fB1127054EAEF1df",
    "transactionIndex": 0,
    "gasUsed": "3061400",
    "logsBloom": "0x
    "blockHash": "0xa93709620edf9e66902199cecefd4ba6f8b1d6d4b3761097600eb0a776b24b91",
    "transactionHash": "0x36dc7b7b943c97251680db92b5d66f725f29680fa7d5e5729c1972ce35bf6684",
    "logs": [],
    "blockNumber": 3765336,
    "cumulativeGasUsed": "3061400",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "43f116f97573b6edbff460d0f2c8b612",
  "metadata": "{\"compiler\":{\"version\":\"0.6.11+commit.5ef660b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bdstable_oracle_addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"weth_address\",\"type\":\"address\"}],\"name\":\"BDStable_WETH_OracleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bdx_oracle_address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"weth_address\",\"type\":\"address\"}],\"name\":\"BDX_WETH_OracleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BdStableBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BdStableMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bdStable_step_d12\",\"type\":\"uint256\"}],\"name\":\"BdStableStepSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedCR_d12\",\"type\":\"uint256\"}],\"name\":\"CollateralRatioLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"collateral_ratio_paused\",\"type\":\"bool\"}],\"name\":\"CollateralRatioPausedToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"global_collateral_ratio\",\"type\":\"uint256\"}],\"name\":\"CollateralRatioRefreshed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"eth_fiat_consumer_address\",\"type\":\"address\"}],\"name\":\"EthFiatOracleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool_address\",\"type\":\"address\"}],\"name\":\"PoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool_address\",\"type\":\"address\"}],\"name\":\"PoolRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price_band_d12\",\"type\":\"uint256\"}],\"name\":\"PriceBandSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price_target_d12\",\"type\":\"uint256\"}],\"name\":\"PriceTargetSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BDX_price_d12\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_address\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bdStable_step_d12\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bdstable_pools\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bdstable_pools_array\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bdstable_price_d12\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bdx_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"canLegallyRedeem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral_ratio_paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"effective_global_collateral_ratio_d12\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fiat\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBdStablesPoolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalCollateralValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"global_collateral_ratio_d12\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_fiat\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_owner_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bdx_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initalBdStableToOwner_d18\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastMintByUserBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wantedCR_d12\",\"type\":\"uint256\"}],\"name\":\"lockCollateralRatioAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"b_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"b_amount\",\"type\":\"uint256\"}],\"name\":\"pool_burn_from\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"m_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"m_amount\",\"type\":\"uint256\"}],\"name\":\"pool_mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price_band_d12\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price_target_d12\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refreshCollateralRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refreshCollateralRatio_last_call_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refresh_cooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_address\",\"type\":\"address\"}],\"name\":\"removePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bdstable_oracle_addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth_address\",\"type\":\"address\"}],\"name\":\"setBDStable_WETH_Oracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bdx_oracle_addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth_address\",\"type\":\"address\"}],\"name\":\"setBDX_WETH_Oracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bdStable_step_d12\",\"type\":\"uint256\"}],\"name\":\"setBdStable_step_d12\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_eth_fiat_consumer_address\",\"type\":\"address\"}],\"name\":\"setETH_fiat_Oracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumMintRedeemDelayInBlocks\",\"type\":\"uint256\"}],\"name\":\"setMinimumSwapsDelayInBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner_address\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury_address\",\"type\":\"address\"}],\"name\":\"setTreasury_address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price_band_d12\",\"type\":\"uint256\"}],\"name\":\"set_price_band_d12\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price_target_d12\",\"type\":\"uint256\"}],\"name\":\"set_price_target_d12\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldUpdateOracles\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleCollateralRatioPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateOraclesIfNeeded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth_fiat_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.approve(address spender, uint256 amount)\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for `accounts`'s tokens of at least `amount`.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for `sender`'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BdStable/BDStable.sol\":\"BDStable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\",\"keccak256\":\"0xaff99b54915f57e2a4e71b8d15afd4ee425410e5a6f45c07517ae1beb806f8bd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/BdStable/BDStable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../ERC20/ERC20Custom.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../Bdx/BDXShares.sol\\\";\\nimport \\\"../Oracle/IOracleBasedCryptoFiatFeed.sol\\\";\\nimport \\\"../Oracle/ICryptoPairOracle.sol\\\";\\nimport \\\"./Pools/BdStablePool.sol\\\";\\nimport \\\"./Pools/BdPoolLibrary.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\ncontract BDStable is ERC20Custom, Initializable {\\n    using SafeMath for uint256;\\n\\n    /* ========== STATE VARIABLES ========== */\\n    enum PriceChoice { BDSTABLE, BDX }\\n\\n    uint8 public constant decimals = 18;\\n    uint8 private constant MAX_NUMBER_OF_POOLS = 32;\\n\\n    string public symbol;\\n    string public name;\\n    string public fiat;\\n    address public owner_address;\\n    address public bdx_address;\\n    address public treasury_address;\\n\\n    ICryptoPairOracle bdstableWethOracle;\\n    ICryptoPairOracle bdxWethOracle;\\n\\n    IOracleBasedCryptoFiatFeed private weth_fiat_pricer;\\n    uint8 private weth_fiat_pricer_decimals;\\n\\n    uint256 public global_collateral_ratio_d12; // 12 decimals of precision\\n    \\n    address public weth_address;\\n\\n    // The addresses in this array are added by the oracle and these contracts are able to mint bdStable\\n    address[] public bdstable_pools_array;\\n\\n    // Mapping is also used for faster verification\\n    mapping(address => bool) public bdstable_pools; \\n\\n    uint256 public bdStable_step_d12; // Amount to change the collateralization ratio by upon refreshCollateralRatio()\\n    uint256 public refresh_cooldown; // Seconds to wait before being able to run refreshCollateralRatio() again\\n    uint256 public price_target_d12; // The price of BDSTABLE at which the collateral ratio will respond to; this value is only used for the collateral ratio mechanism and not for minting and redeeming which are hardcoded at 1 <fiat>\\n    uint256 public price_band_d12; // The bound above and below the price target at which the refreshCollateralRatio() will not change the collateral ratio\\n\\n    uint256 minimumMintRedeemDelayInBlocks = 2;\\n\\n    bool public collateral_ratio_paused;\\n\\n    mapping(address => uint256) public lastMintByUserBlock;\\n\\n    // There needs to be a time interval that this can be called. Otherwise it can be called multiple times per expansion.\\n    uint256 public refreshCollateralRatio_last_call_time; // Last time the collateral ration was refreshed function was executed\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyPools() {\\n       require(bdstable_pools[msg.sender] == true, \\\"Only bd pools can call this function\\\");\\n        _;\\n    } \\n    \\n    modifier onlyByOwner() {\\n        require(msg.sender == owner_address, \\\"You are not the owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyByOwnerOrPool() {\\n        require(\\n            msg.sender == owner_address \\n            || bdstable_pools[msg.sender] == true, \\n            \\\"You are not the owner or a pool\\\");\\n        _;\\n    }\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    function initialize (\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _fiat,\\n        address _owner_address,\\n        address _treasury_address,\\n        address _bdx_address,\\n        uint256 _initalBdStableToOwner_d18\\n    ) \\n        public \\n        initializer\\n    {\\n        name = _name;\\n        symbol = _symbol;\\n        fiat = _fiat;\\n        owner_address = _owner_address;\\n        treasury_address = _treasury_address;\\n        bdx_address = _bdx_address;\\n\\n        bdStable_step_d12 = uint256(BdPoolLibrary.PRICE_PRECISION).mul(25).div(10000); // 12 decimals of precision, equal to 0.25%\\n        global_collateral_ratio_d12 = uint256(BdPoolLibrary.COLLATERAL_RATIO_MAX); // Bdstable system starts off fully collateralized (12 decimals of precision)\\n        price_target_d12 = uint256(BdPoolLibrary.PRICE_PRECISION); // Collateral ratio will adjust according to the 1 <fiat> price target at genesis\\n        price_band_d12 = uint256(BdPoolLibrary.PRICE_PRECISION).mul(50).div(10000); // Collateral ratio will not adjust if between 0.995<fiat> and 1.005<fiat> at genesis\\n        refresh_cooldown = 3600; // Refresh cooldown period is set to 1 hour (3600 seconds) at genesis\\n\\n        if(_initalBdStableToOwner_d18 > 0) {\\n            _mint(_owner_address, _initalBdStableToOwner_d18); // so owner can provide liqidity to swaps and we could get prices from the swaps\\n        }\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function getBdStablesPoolsLength() public view returns (uint256) {\\n        return bdstable_pools_array.length;\\n    }\\n\\n    // collateral value in fiat corresponding to the stable\\n    // Iterate through all bd pools and calculate all value of collateral in all pools globally \\n    function globalCollateralValue() public view returns (uint256) {\\n        uint256 total_collateral_value_d18 = 0; \\n\\n        // bdstable_pools_array.length is limited by addPool function\\n        for (uint i = 0; i < bdstable_pools_array.length; i++){ \\n            total_collateral_value_d18 = total_collateral_value_d18.add(BdStablePool(bdstable_pools_array[i]).collatFiatBalance());\\n        }\\n        return total_collateral_value_d18;\\n    }\\n\\n    // Choice = 'BDSTABLE' or 'BDX' for now\\n    function oracle_price(PriceChoice choice) internal view returns (uint256) {\\n        uint256 weth_fiat_price_d12 = uint256(weth_fiat_pricer.getPrice_1e12()).mul(BdPoolLibrary.PRICE_PRECISION).div(uint256(10) ** weth_fiat_pricer_decimals);\\n        uint256 price_vs_weth;\\n\\n        if (choice == PriceChoice.BDSTABLE) {\\n            price_vs_weth = uint256(bdstableWethOracle.consult(weth_address, BdPoolLibrary.PRICE_PRECISION)); // How much BDSTABLE if you put in BdPoolLibrary.PRICE_PRECISION WETH\\n        }\\n        else if (choice == PriceChoice.BDX) {\\n            price_vs_weth = uint256(bdxWethOracle.consult(weth_address, BdPoolLibrary.PRICE_PRECISION)); // How much BDX if you put in BdPoolLibrary.PRICE_PRECISION WETH\\n        }\\n        else revert(\\\"INVALID PRICE CHOICE. Needs to be either 0 (BDSTABLE) or 1 (BDX)\\\");\\n\\n        return weth_fiat_price_d12.mul(BdPoolLibrary.PRICE_PRECISION).div(price_vs_weth);\\n    }\\n    \\n    function updateOraclesIfNeeded() public {\\n        if(bdxWethOracle.shouldUpdateOracle()){\\n            bdxWethOracle.updateOracle();\\n        }\\n\\n        if(bdstableWethOracle.shouldUpdateOracle()){\\n            bdstableWethOracle.updateOracle();\\n        } \\n    }\\n\\n    function shouldUpdateOracles() public view returns (bool) {\\n        return bdxWethOracle.shouldUpdateOracle() || bdstableWethOracle.shouldUpdateOracle(); \\n    }\\n\\n    // Returns BDSTABLE / <fiat>\\n    function bdstable_price_d12() public view returns (uint256) {\\n        return oracle_price(PriceChoice.BDSTABLE);\\n    }\\n\\n    // Returns BDX / <fiat>\\n    function BDX_price_d12() public view returns (uint256) {\\n        return oracle_price(PriceChoice.BDX);\\n    }\\n\\n    function effective_global_collateral_ratio_d12() public view returns (uint256) {\\n        uint256 bdStable_total_supply = totalSupply();\\n        uint256 global_collat_value = globalCollateralValue();\\n        uint256 efCR = global_collat_value.mul(BdPoolLibrary.PRICE_PRECISION).div(bdStable_total_supply);\\n        return efCR;\\n    }\\n\\n    function weth_fiat_price() public view returns (uint256) {\\n        return uint256(weth_fiat_pricer.getPrice_1e12()).mul(BdPoolLibrary.PRICE_PRECISION).div(uint256(10) ** weth_fiat_pricer_decimals);\\n    }\\n    \\n    function canLegallyRedeem(address who) external view returns (bool) {\\n        return block.number.sub(lastMintByUserBlock[who]) >= minimumMintRedeemDelayInBlocks;\\n    }\\n\\n    /* ========== PUBLIC FUNCTIONS ========== */\\n\\n    function refreshCollateralRatio() external {\\n        if(collateral_ratio_paused == true){\\n            return;\\n        }\\n\\n        if(block.timestamp - refreshCollateralRatio_last_call_time < refresh_cooldown){\\n            return;\\n        }\\n\\n        if(bdstableWethOracle.shouldUpdateOracle()){\\n            bdstableWethOracle.updateOracle();\\n        }\\n\\n        uint256 bdstable_price_cur = bdstable_price_d12();\\n\\n        // Step increments are 0.25% (upon genesis, changable) \\n\\n        if (bdstable_price_cur > price_target_d12.add(price_band_d12)) { //decrease collateral ratio\\n            if(global_collateral_ratio_d12 <= bdStable_step_d12){ //if within a step of 0, go to 0\\n                global_collateral_ratio_d12 = 0;\\n            } else {\\n                global_collateral_ratio_d12 = global_collateral_ratio_d12.sub(bdStable_step_d12);\\n            }\\n        } else if (bdstable_price_cur < price_target_d12.sub(price_band_d12)) { //increase collateral ratio\\n            if(global_collateral_ratio_d12.add(bdStable_step_d12) >= BdPoolLibrary.COLLATERAL_RATIO_MAX){\\n                global_collateral_ratio_d12 = BdPoolLibrary.COLLATERAL_RATIO_MAX; // cap collateral ratio at 1.000000\\n            } else {\\n                global_collateral_ratio_d12 = global_collateral_ratio_d12.add(bdStable_step_d12);\\n            }\\n        }\\n\\n        refreshCollateralRatio_last_call_time = block.timestamp; // Set the time of the last expansion\\n\\n        emit CollateralRatioRefreshed(global_collateral_ratio_d12);\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    // Used by pools when user redeems\\n    function pool_burn_from(address b_address, uint256 b_amount) public onlyPools {\\n        super._burnFrom(b_address, b_amount);\\n\\n        emit BdStableBurned(b_address, msg.sender, b_amount);\\n    }\\n\\n    // This function is what other bd pools will call to mint new bd stable \\n    function pool_mint(address m_address, uint256 m_amount) public onlyPools {\\n        super._mint(m_address, m_amount);\\n        \\n        lastMintByUserBlock[m_address] = block.number;\\n\\n        emit BdStableMinted(msg.sender, m_address, m_amount);\\n    }\\n\\n    // Adds collateral addresses supported, such as tether and busd, must be ERC20 \\n    function addPool(address pool_address) external onlyByOwner {\\n        require(bdstable_pools[pool_address] == false, \\\"pool already exists\\\");\\n        require(bdstable_pools_array.length < MAX_NUMBER_OF_POOLS, \\\"pools limit reached\\\");\\n\\n        bdstable_pools[pool_address] = true; \\n        bdstable_pools_array.push(pool_address);\\n\\n        emit PoolAdded(pool_address);\\n    }\\n\\n    // Remove a pool \\n    function removePool(address pool_address) external onlyByOwner {\\n        require(bdstable_pools[pool_address] == true, \\\"address doesn't exist already\\\");\\n        \\n        delete bdstable_pools[pool_address];\\n\\n        // bdstable_pools_array.length is limited by addPool function\\n        for (uint i = 0; i < bdstable_pools_array.length; i++){ \\n            if (bdstable_pools_array[i] == pool_address) {\\n                bdstable_pools_array[i] = bdstable_pools_array[bdstable_pools_array.length -1];\\n                bdstable_pools_array.pop();\\n                break;\\n            }\\n        }\\n\\n        emit PoolRemoved(pool_address);\\n    }\\n\\n    function setBDStable_WETH_Oracle(address _bdstable_oracle_addr, address _weth_address) external onlyByOwner {\\n        bdstableWethOracle = ICryptoPairOracle(_bdstable_oracle_addr); \\n        weth_address = _weth_address;\\n\\n        emit BDStable_WETH_OracleSet(_bdstable_oracle_addr, _weth_address);\\n    }\\n\\n    function setBDX_WETH_Oracle(address _bdx_oracle_addr, address _weth_address) external onlyByOwner {\\n        bdxWethOracle = ICryptoPairOracle(_bdx_oracle_addr);\\n        weth_address = _weth_address;\\n\\n        emit BDX_WETH_OracleSet(_bdx_oracle_addr, _weth_address);\\n    }\\n    \\n    function setETH_fiat_Oracle(address _eth_fiat_consumer_address) external onlyByOwner {\\n        weth_fiat_pricer = IOracleBasedCryptoFiatFeed(_eth_fiat_consumer_address);\\n        weth_fiat_pricer_decimals = weth_fiat_pricer.getDecimals();\\n        \\n        emit EthFiatOracleSet(_eth_fiat_consumer_address);\\n    }\\n\\n    function setBdStable_step_d12(uint256 _bdStable_step_d12) external onlyByOwner {\\n        bdStable_step_d12 = _bdStable_step_d12;\\n\\n        emit BdStableStepSet(_bdStable_step_d12);\\n    }\\n\\n    function set_price_target_d12(uint256 _price_target_d12) external onlyByOwner {\\n        price_target_d12 = _price_target_d12;\\n\\n        emit PriceTargetSet(_price_target_d12);\\n    }\\n\\n\\n    function set_price_band_d12(uint256 _price_band_d12) external onlyByOwner {\\n        price_band_d12 = _price_band_d12;\\n\\n        emit PriceBandSet(_price_band_d12);\\n    }\\n\\n    function toggleCollateralRatioPaused() external onlyByOwner {\\n        collateral_ratio_paused = !collateral_ratio_paused;\\n\\n        emit CollateralRatioPausedToggled(collateral_ratio_paused);\\n    }\\n\\n    function lockCollateralRatioAt(uint256 wantedCR_d12) external onlyByOwner {\\n        global_collateral_ratio_d12 = wantedCR_d12;\\n        collateral_ratio_paused = true;\\n\\n        emit CollateralRatioLocked(wantedCR_d12);\\n    }\\n\\n    function setTreasury_address(address _treasury_address) external onlyByOwner {\\n        treasury_address = _treasury_address;\\n    }\\n\\n    function setMinimumSwapsDelayInBlocks(uint256 _minimumMintRedeemDelayInBlocks) external onlyByOwner{\\n        minimumMintRedeemDelayInBlocks = _minimumMintRedeemDelayInBlocks;\\n    }\\n\\n    function setOwner(address _owner_address) external onlyByOwner {\\n        require(_owner_address != address(0), \\\"New owner can't be zero address\\\");\\n\\n        owner_address = _owner_address;\\n        emit OwnerSet(_owner_address);\\n    }\\n\\n    /* ========== EVENTS ========== */\\n    \\n    event OwnerSet(address indexed newOwner);\\n    event CollateralRatioRefreshed(uint256 global_collateral_ratio);\\n    event BdStableBurned(address indexed from, address indexed to, uint256 amount);\\n    event BdStableMinted(address indexed from, address indexed to, uint256 amount);\\n    event PoolAdded(address pool_address);\\n    event PoolRemoved(address pool_address);\\n    event BDStable_WETH_OracleSet(address indexed bdstable_oracle_addr, address indexed weth_address);\\n    event BDX_WETH_OracleSet(address indexed bdx_oracle_address, address indexed weth_address);\\n    event EthFiatOracleSet(address eth_fiat_consumer_address);\\n    event BdStableStepSet(uint256 bdStable_step_d12);\\n    event PriceBandSet(uint256 _price_band_d12);\\n    event PriceTargetSet(uint256 _price_target_d12);\\n    event CollateralRatioPausedToggled(bool collateral_ratio_paused);\\n    event CollateralRatioLocked(uint256 lockedCR_d12);\\n}\\n\",\"keccak256\":\"0xbe58292677f2fd2828182235ca73c99c80c6f1da06f30f7932704bdffcdfe627\",\"license\":\"MIT\"},\"contracts/BdStable/Pools/BdPoolLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary BdPoolLibrary {\\n    using SafeMath for uint256;\\n\\n    // Constants for various precisions\\n    uint256 public constant PRICE_PRECISION = 1e12;\\n    uint256 public constant COLLATERAL_RATIO_PRECISION = 1e12;\\n    uint256 public constant COLLATERAL_RATIO_MAX = 1e12;\\n\\n    // ================ Functions ================\\n\\n    function calcMint1t1BD(uint256 col_price, uint256 collateral_amount_d18) public pure returns (uint256) {\\n        return (collateral_amount_d18.mul(col_price)).div(PRICE_PRECISION);\\n    }\\n\\n    // Must be internal because of the struct\\n    function calcMintFractionalBD(uint256 bdx_price_fiat_d12, uint256 col_price_fiat_d12, uint256 collateral_amount_d18, uint256 col_ratio_d12) internal pure returns (uint256, uint256) {\\n        // Since solidity truncates division, every division operation must be the last operation in the equation to ensure minimum error\\n        // The contract must check the proper ratio was sent to mint BdStable. We do this by seeing the minimum mintable BdStable based on each amount \\n\\n        uint256 c_fiat_value_d18 = collateral_amount_d18.mul(col_price_fiat_d12).div(PRICE_PRECISION);\\n        \\n        uint calculated_bdx_fiat_value_d18 = \\n                    (c_fiat_value_d18.mul(COLLATERAL_RATIO_PRECISION).div(col_ratio_d12))\\n                    .sub(c_fiat_value_d18);\\n\\n        uint calculated_bdx_needed = calculated_bdx_fiat_value_d18.mul(PRICE_PRECISION).div(bdx_price_fiat_d12);\\n\\n        return (\\n            c_fiat_value_d18.add(calculated_bdx_fiat_value_d18),\\n            calculated_bdx_needed\\n        );\\n    }\\n\\n    function calcMintAlgorithmicBD(uint256 bdx_price_fiat_d12, uint256 bdx_amount_d18) public pure returns (uint256) {\\n        return bdx_amount_d18.mul(bdx_price_fiat_d12).div(PRICE_PRECISION);\\n    }\\n\\n    function calcRecollateralizeBdStableInner(\\n        uint256 collateral_amount_d18,\\n        uint256 col_price,\\n        uint256 global_collat_value,\\n        uint256 bdStable_total_supply,\\n        uint256 global_collateral_ratio\\n    ) public pure returns (uint256, uint256) {\\n        uint256 collat_value_attempted = collateral_amount_d18.mul(col_price).div(PRICE_PRECISION);\\n        uint256 effective_collateral_ratio = global_collat_value.mul(PRICE_PRECISION).div(bdStable_total_supply); //returns it in 1e12\\n        uint256 recollat_possible = (global_collateral_ratio.mul(bdStable_total_supply).sub(bdStable_total_supply.mul(effective_collateral_ratio))).div(COLLATERAL_RATIO_PRECISION);\\n\\n        uint256 amount_to_recollat;\\n        if(collat_value_attempted <= recollat_possible){\\n            amount_to_recollat = collat_value_attempted;\\n        } else {\\n            amount_to_recollat = recollat_possible;\\n        }\\n\\n        return (amount_to_recollat.mul(PRICE_PRECISION).div(col_price), amount_to_recollat);\\n    }\\n\\n    // Must be internal because of the struct\\n    function calcBuyBackBDX(uint256 excess_collateral_fiat_value_d18, uint256 bdx_price_fiat_d12, uint256 col_price_fiat_d12, uint256 bdx_amount_d18) internal pure returns (uint256) {\\n        // If the total collateral value is higher than the amount required at the current collateral ratio then buy back up to the possible BDX with the desired collateral\\n        require(excess_collateral_fiat_value_d18 > 0, \\\"No excess collateral to buy back!\\\");\\n\\n        // Make sure not to take more than is available\\n        uint256 bdx_fiat_value_d18 = bdx_amount_d18.mul(bdx_price_fiat_d12).div(PRICE_PRECISION);\\n        require(bdx_fiat_value_d18 <= excess_collateral_fiat_value_d18, \\\"You are trying to buy back more than the excess!\\\");\\n\\n        // Get the equivalent amount of collateral based on the market value of BDX provided \\n        uint256 collateral_equivalent_d18 = bdx_fiat_value_d18.mul(PRICE_PRECISION).div(col_price_fiat_d12);\\n\\n        return (\\n            collateral_equivalent_d18\\n        );\\n    }\\n}\",\"keccak256\":\"0xbf772b244808e86b9b2c0f91f11daaf559877e2137753a3144bd5985c367abc3\",\"license\":\"MIT\"},\"contracts/BdStable/Pools/BdStablePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../../Bdx/BDXShares.sol\\\";\\nimport \\\"../../BdStable/BDStable.sol\\\";\\nimport '@uniswap/lib/contracts/libraries/TransferHelper.sol';\\nimport \\\"../../Oracle/ICryptoPairOracle.sol\\\";\\nimport \\\"./BdPoolLibrary.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract BdStablePool is Initializable {\\n    using SafeMath for uint256;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    ERC20 private collateral_token;\\n    BDXShares private BDX;\\n    BDStable private BDSTABLE;\\n    ICryptoPairOracle private collatWEthOracle;\\n    address public collateral_address; // Required by frontend - frontend needs to know what collateral is used to mint\\n\\n    address public owner_address;\\n    \\n    uint256 private missing_decimals; // Number of decimals needed to get to 18\\n    address private weth_address;\\n\\n    mapping(address => uint256) public redeemBDXBalances;\\n    mapping(address => uint256) public redeemCollateralBalances;\\n    uint256 public unclaimedPoolCollateral;\\n    uint256 public unclaimedPoolBDX;\\n    mapping(address => uint256) public lastRedeemed;\\n\\n    // AccessControl state variables\\n    bool public mintPaused;\\n    bool public redeemPaused;\\n    bool public recollateralizePaused;\\n    bool public buyBackPaused;\\n    bool public collateralPricePaused;\\n    bool public recollateralizeOnlyForOwner;\\n    bool public buybackOnlyForOwner;\\n\\n    uint256 public minting_fee; //d12\\n    uint256 public redemption_fee; //d12\\n    uint256 public buyback_fee; //d12\\n    uint256 public recollat_fee; //d12\\n\\n    // Pool_ceiling is the total units of collateral that a pool contract can hold\\n    uint256 public pool_ceiling; // d18\\n\\n    // Stores price of the collateral, if price is paused\\n    uint256 public pausedPrice;\\n\\n    // Bonus rate on BDX minted during recollateralizeBdStable(); 12 decimals of precision, set to 0.75% on genesis\\n    uint256 public bonus_rate; // d12\\n\\n    // Number of blocks to wait before being able to collectRedemption()\\n    uint256 public redemption_delay;\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyByOwner() {\\n        require(msg.sender == owner_address, \\\"You are not the owner\\\");\\n        _;\\n    }\\n\\n    modifier notRedeemPaused() {\\n        require(redeemPaused == false, \\\"Redeeming is paused\\\");\\n        _;\\n    }\\n\\n    modifier notMintPaused() {\\n        require(mintPaused == false, \\\"Minting is paused\\\");\\n        _;\\n    }\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    function initialize(\\n        address _bdstable_contract_address,\\n        address _bdx_contract_address,\\n        address _collateral_address,\\n        address _creator_address\\n    ) \\n        public\\n        initializer\\n    {\\n        BDSTABLE = BDStable(_bdstable_contract_address);\\n        BDX = BDXShares(_bdx_contract_address);\\n        collateral_address = _collateral_address;\\n        owner_address = _creator_address;\\n        collateral_token = ERC20(_collateral_address);\\n        missing_decimals = uint256(18).sub(collateral_token.decimals());\\n\\n        pool_ceiling = 1e36; // d18\\n        bonus_rate = 7500000000; // d12 0.75%\\n        redemption_delay = 1;\\n        minting_fee = 3000000000; // d12 0.3%\\n        redemption_fee = 3000000000; // d12 0.3%\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    // Returns the value of excess collateral held in all BdStablePool related to this BdStable, compared to what is needed to maintain the global collateral ratio\\n    function availableExcessCollatDV() public view returns (uint256) {\\n        uint256 total_supply = BDSTABLE.totalSupply();\\n        uint256 global_collateral_ratio_d12 = BDSTABLE.global_collateral_ratio_d12();\\n        uint256 global_collat_value = BDSTABLE.globalCollateralValue();\\n\\n        // Calculates collateral needed to back each 1 BdStable with $1 of collateral at current collat ratio\\n        uint256 required_collat_fiat_value_d18 = total_supply\\n            .mul(global_collateral_ratio_d12)\\n            .div(BdPoolLibrary.COLLATERAL_RATIO_MAX); \\n\\n        if (global_collat_value > required_collat_fiat_value_d18) {\\n            return global_collat_value.sub(required_collat_fiat_value_d18);\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n     // Returns the price of the pool collateral in fiat\\n    function getCollateralPrice_d12() public view returns (uint256) {\\n        if(collateralPricePaused == true){\\n            return pausedPrice;\\n        } else {\\n            uint256 eth_fiat_price_d12 = BDSTABLE.weth_fiat_price();\\n            uint256 collat_eth_price =\\n                collatWEthOracle.consult(\\n                    weth_address,\\n                    BdPoolLibrary.PRICE_PRECISION\\n                );\\n\\n            return eth_fiat_price_d12.mul(BdPoolLibrary.PRICE_PRECISION).div(collat_eth_price);\\n        }\\n    }\\n\\n    // Returns fiat value of collateral held in this BdStable pool\\n    function collatFiatBalance() public view returns (uint256) {\\n        //Expressed in collateral token decimals\\n        if(collateralPricePaused == true){\\n            return collateral_token.balanceOf(address(this))\\n                .sub(unclaimedPoolCollateral)\\n                .mul(10 ** missing_decimals)\\n                .mul(pausedPrice)\\n                .div(BdPoolLibrary.PRICE_PRECISION);\\n        } else {\\n            return collateral_token.balanceOf(address(this))\\n                .sub(unclaimedPoolCollateral)\\n                .mul(10 ** missing_decimals)\\n                .mul(getCollateralPrice_d12())\\n                .div(BdPoolLibrary.PRICE_PRECISION);\\n        }\\n    }\\n\\n    /* ========== PUBLIC FUNCTIONS ========== */\\n\\n    function updateOraclesIfNeeded() public {\\n        BDSTABLE.updateOraclesIfNeeded();\\n        if(collatWEthOracle.shouldUpdateOracle()){\\n            collatWEthOracle.updateOracle();\\n        }\\n    }\\n\\n    function howMuchBdxCanBeMinted(uint256 _watned_amount_d18) public view returns (uint256) {\\n        uint256 maxToBeMinted_d18 = BDX.howMuchCanBeMinted();\\n\\n        if(maxToBeMinted_d18 > _watned_amount_d18){\\n            return _watned_amount_d18;\\n        } else {\\n            return maxToBeMinted_d18;\\n        }\\n    }\\n\\n    // We separate out the 1t1, fractional and algorithmic minting functions for gas efficiency\\n    function mint1t1BD(uint256 collateral_amount, uint256 BD_out_min)\\n        external\\n        notMintPaused\\n    {\\n        updateOraclesIfNeeded();\\n        uint256 collateral_amount_d18 =\\n            collateral_amount * (10**missing_decimals);\\n\\n        BDSTABLE.refreshCollateralRatio();\\n        uint256 globalCR = BDSTABLE.global_collateral_ratio_d12();\\n\\n        require(\\n            globalCR >= BdPoolLibrary.COLLATERAL_RATIO_MAX,\\n            \\\"Collateral ratio must be >= 1\\\"\\n        );\\n        \\n        require(\\n            collateral_token.balanceOf(address(this))\\n                .sub(unclaimedPoolCollateral)\\n                .add(collateral_amount) <= pool_ceiling,\\n            \\\"[Pool's Closed]: Ceiling reached\\\"\\n        );\\n\\n        uint256 bd_amount_d18 =\\n            BdPoolLibrary.calcMint1t1BD(\\n                getCollateralPrice_d12(),\\n                collateral_amount_d18\\n            ); //1 BD for each $1/\\u20ac1/etc worth of collateral\\n\\n        bd_amount_d18 = (bd_amount_d18.mul(uint256(BdPoolLibrary.PRICE_PRECISION).sub(minting_fee))).div(BdPoolLibrary.PRICE_PRECISION); //remove precision at the end\\n        require(BD_out_min <= bd_amount_d18, \\\"Slippage limit reached\\\");\\n\\n        TransferHelper.safeTransferFrom(\\n            address(collateral_token),\\n            msg.sender,\\n            address(this),\\n            collateral_amount\\n        );\\n        BDSTABLE.pool_mint(msg.sender, bd_amount_d18);\\n    }\\n\\n    // Redeem collateral. 100% collateral-backed\\n    function redeem1t1BD(uint256 BD_amount, uint256 COLLATERAL_out_min)\\n        external\\n        notRedeemPaused\\n    {\\n        updateOraclesIfNeeded();\\n        BDSTABLE.refreshCollateralRatio();\\n\\n        require(\\n            BDSTABLE.global_collateral_ratio_d12() == BdPoolLibrary.COLLATERAL_RATIO_MAX,\\n            \\\"Collateral ratio must be == 1\\\"\\n        );\\n\\n        // Need to adjust for decimals of collateral\\n        uint256 col_price_d12 = getCollateralPrice_d12();\\n        uint256 effective_collateral_ratio_d12 = BDSTABLE.effective_global_collateral_ratio_d12();\\n        uint256 cr_d12 = effective_collateral_ratio_d12 > BdPoolLibrary.COLLATERAL_RATIO_MAX ? BdPoolLibrary.COLLATERAL_RATIO_MAX : effective_collateral_ratio_d12;\\n        uint256 collateral_needed = BD_amount.mul(BdPoolLibrary.PRICE_PRECISION).mul(cr_d12).div(BdPoolLibrary.PRICE_PRECISION).div(col_price_d12);\\n\\n        collateral_needed = (\\n            collateral_needed.mul(uint256(BdPoolLibrary.PRICE_PRECISION).sub(redemption_fee))\\n        ).div(BdPoolLibrary.PRICE_PRECISION);\\n\\n        require(\\n            collateral_needed <=\\n                collateral_token.balanceOf(address(this)).sub(\\n                    unclaimedPoolCollateral\\n                ),\\n            \\\"Not enough collateral in pool\\\"\\n        );\\n        require(\\n            COLLATERAL_out_min <= collateral_needed,\\n            \\\"Slippage limit reached\\\"\\n        );\\n\\n        if(BDSTABLE.canLegallyRedeem(msg.sender)){\\n            redeemCollateralBalances[msg.sender] = redeemCollateralBalances[msg.sender]\\n                .add(collateral_needed);\\n        } else {\\n            uint256 collateral_needed_sender = collateral_needed.div(10);\\n            uint256 collateral_needed_treasury = collateral_needed.mul(9).div(10);\\n\\n            redeemCollateralBalances[msg.sender] = redeemCollateralBalances[msg.sender]\\n                .add(collateral_needed_sender);\\n\\n            address treasury_address = BDSTABLE.treasury_address();\\n            redeemCollateralBalances[treasury_address] = redeemCollateralBalances[treasury_address]\\n                .add(collateral_needed_treasury);\\n        }\\n\\n        unclaimedPoolCollateral = unclaimedPoolCollateral.add(collateral_needed);\\n        lastRedeemed[msg.sender] = block.number;\\n\\n        // Move all external functions to the end\\n        BDSTABLE.pool_burn_from(msg.sender, BD_amount);\\n    }\\n\\n    // 0% collateral-backed\\n    function mintAlgorithmicBdStable(uint256 bdx_amount_d18, uint256 bdStable_out_min) external notMintPaused {\\n        updateOraclesIfNeeded();\\n        BDSTABLE.refreshCollateralRatio();\\n\\n        uint256 bdx_price = BDSTABLE.BDX_price_d12();\\n        require(BDSTABLE.global_collateral_ratio_d12() == 0, \\\"Collateral ratio must be 0\\\");\\n\\n        (uint256 bdStable_amount_d18) = BdPoolLibrary.calcMintAlgorithmicBD(bdx_price, bdx_amount_d18);\\n\\n        bdStable_amount_d18 = (bdStable_amount_d18.mul(uint(BdPoolLibrary.PRICE_PRECISION).sub(minting_fee))).div(BdPoolLibrary.PRICE_PRECISION);\\n        require(bdStable_out_min <= bdStable_amount_d18, \\\"Slippage limit reached\\\");\\n\\n        BDX.pool_burn_from(address(BDSTABLE), msg.sender, bdx_amount_d18);\\n        BDSTABLE.pool_mint(msg.sender, bdStable_amount_d18);\\n    }\\n\\n    // Redeem BDSTABLE for BDX. 0% collateral-backed\\n    function redeemAlgorithmicBdStable(uint256 bdStable_amount, uint256 bdx_out_min) external notRedeemPaused {\\n        updateOraclesIfNeeded();\\n        BDSTABLE.refreshCollateralRatio();\\n\\n        uint256 bdx_price = BDSTABLE.BDX_price_d12();\\n        uint256 global_collateral_ratio_d12 = BDSTABLE.global_collateral_ratio_d12();\\n\\n        require(global_collateral_ratio_d12 == 0, \\\"Collateral ratio must be 0\\\"); \\n        uint256 bdx_fiat_value_d18 = bdStable_amount;\\n\\n        bdx_fiat_value_d18 = (bdx_fiat_value_d18.mul(uint(BdPoolLibrary.PRICE_PRECISION).sub(redemption_fee))).div(BdPoolLibrary.PRICE_PRECISION); //apply fees\\n\\n        uint256 bdx_amount = bdx_fiat_value_d18.mul(BdPoolLibrary.PRICE_PRECISION).div(bdx_price);\\n        bdx_amount = howMuchBdxCanBeMinted(bdx_amount);\\n        \\n        if(bdx_amount > 0){\\n            if(BDSTABLE.canLegallyRedeem(msg.sender)){\\n               redeemBDXBalances[msg.sender] = redeemBDXBalances[msg.sender].add(bdx_amount);\\n            } else {\\n               uint256 bdx_amount_sender = bdx_amount.div(10);\\n               uint256 bdx_amount_treasury = bdx_amount.mul(9).div(10);\\n\\n               redeemBDXBalances[msg.sender] = redeemBDXBalances[msg.sender].add(bdx_amount_sender);\\n\\n               address treasury_address = BDSTABLE.treasury_address();\\n               redeemBDXBalances[treasury_address] = redeemBDXBalances[treasury_address].add(bdx_amount_treasury);\\n            }\\n\\n            unclaimedPoolBDX = unclaimedPoolBDX.add(bdx_amount);\\n        }\\n        \\n        lastRedeemed[msg.sender] = block.number;\\n        \\n        require(bdx_out_min < bdx_amount, \\\"Slippage limit reached\\\");\\n\\n        // Move all external functions to the end\\n        BDSTABLE.pool_burn_from(msg.sender, bdStable_amount);\\n        if(bdx_amount > 0){\\n            BDX.mint(address(BDSTABLE), address(this), bdx_amount);\\n        }\\n    }\\n\\n    // Will fail if fully collateralized or fully algorithmic\\n    // > 0% and < 100% collateral-backed\\n    function mintFractionalBdStable(uint256 collateral_amount, uint256 bdx_in_max, uint256 bdStable_out_min) external notMintPaused {\\n        updateOraclesIfNeeded();\\n        BDSTABLE.refreshCollateralRatio();\\n\\n        uint256 bdx_price = BDSTABLE.BDX_price_d12();\\n        uint256 global_collateral_ratio_d12 = BDSTABLE.global_collateral_ratio_d12();\\n\\n        require(global_collateral_ratio_d12 < BdPoolLibrary.COLLATERAL_RATIO_MAX && global_collateral_ratio_d12 > 0, \\n            \\\"Collateral ratio needs to be between .000001 and .999999\\\");\\n        \\n        require(\\n            collateral_token.balanceOf(address(this))\\n                .sub(unclaimedPoolCollateral)\\n                .add(collateral_amount) <= pool_ceiling,\\n            \\\"Pool ceiling reached, no more BdStable can be minted with this collateral\\\"\\n        );\\n\\n        uint256 collateral_amount_d18 = collateral_amount * (10 ** missing_decimals);\\n\\n        (uint256 mint_amount, uint256 bdx_needed) = BdPoolLibrary.calcMintFractionalBD(\\n            bdx_price,\\n            getCollateralPrice_d12(),\\n            collateral_amount_d18,\\n            global_collateral_ratio_d12\\n        );\\n\\n        mint_amount = (mint_amount.mul(uint(BdPoolLibrary.PRICE_PRECISION).sub(minting_fee))).div(BdPoolLibrary.PRICE_PRECISION);\\n\\n        require(bdStable_out_min <= mint_amount, \\\"Slippage limit reached\\\");\\n\\n        require(bdx_needed <= bdx_in_max, \\\"Not enough BDX inputted\\\");\\n\\n        BDX.pool_burn_from(address(BDSTABLE), msg.sender, bdx_needed);\\n\\n        TransferHelper.safeTransferFrom(address(collateral_token), msg.sender, address(this), collateral_amount);\\n        BDSTABLE.pool_mint(msg.sender, mint_amount);\\n    }\\n\\n    // Will fail if fully collateralized or algorithmic\\n    // Redeem BDSTABLE for collateral and BDX. > 0% and < 100% collateral-backed\\n    function redeemFractionalBdStable(uint256 BdStable_amount, uint256 BDX_out_min, uint256 COLLATERAL_out_min) external notRedeemPaused {\\n        updateOraclesIfNeeded();\\n        BDSTABLE.refreshCollateralRatio();\\n\\n        uint256 global_collateral_ratio_d12 = BDSTABLE.global_collateral_ratio_d12();\\n\\n        require(    \\n            global_collateral_ratio_d12 < BdPoolLibrary.COLLATERAL_RATIO_MAX && global_collateral_ratio_d12 > 0,\\n            \\\"Collateral ratio needs to be between .000001 and .999999\\\");\\n\\n        uint256 effective_global_collateral_ratio_d12 = BDSTABLE.effective_global_collateral_ratio_d12();\\n\\n        uint256 cr_d12 = effective_global_collateral_ratio_d12 < global_collateral_ratio_d12\\n            ? effective_global_collateral_ratio_d12\\n            : global_collateral_ratio_d12;\\n\\n        uint256 BdStable_amount_post_fee = (BdStable_amount.mul(uint(BdPoolLibrary.PRICE_PRECISION).sub(redemption_fee))).div(BdPoolLibrary.PRICE_PRECISION);\\n\\n        uint256 bdx_fiat_value_d18 = BdStable_amount_post_fee.sub(\\n                BdStable_amount_post_fee.mul(cr_d12).div(BdPoolLibrary.PRICE_PRECISION)\\n            );\\n\\n        uint256 bdx_amount = bdx_fiat_value_d18.mul(BdPoolLibrary.PRICE_PRECISION).div(BDSTABLE.BDX_price_d12());\\n        bdx_amount = howMuchBdxCanBeMinted(bdx_amount);\\n\\n        // Need to adjust for decimals of collateral\\n        uint256 BdStable_amount_precision = BdStable_amount_post_fee.div(10 ** missing_decimals);\\n        uint256 collateral_fiat_value = BdStable_amount_precision.mul(cr_d12).div(BdPoolLibrary.PRICE_PRECISION);\\n        uint256 collateral_needed = collateral_fiat_value.mul(BdPoolLibrary.PRICE_PRECISION).div(getCollateralPrice_d12());\\n\\n        require(collateral_needed <= collateral_token.balanceOf(address(this)).sub(unclaimedPoolCollateral), \\\"Not enough collateral in pool\\\");\\n        require(COLLATERAL_out_min <= collateral_needed, \\\"Slippage limit reached [collateral]\\\");\\n        require(BDX_out_min <= bdx_amount, \\\"Slippage limit reached [BDX]\\\");\\n\\n        if(BDSTABLE.canLegallyRedeem(msg.sender)){\\n            redeemCollateralBalances[msg.sender] = redeemCollateralBalances[msg.sender].add(collateral_needed);\\n        } else {\\n            uint256 collateral_needed_sender = collateral_needed.div(10);\\n            uint256 collateral_needed_treasury = collateral_needed.mul(9).div(10);\\n\\n            redeemCollateralBalances[msg.sender] = redeemCollateralBalances[msg.sender]\\n                .add(collateral_needed_sender);\\n\\n            address treasury_address = BDSTABLE.treasury_address();\\n            redeemCollateralBalances[treasury_address] = redeemCollateralBalances[treasury_address]\\n                .add(collateral_needed_treasury);\\n        }\\n\\n        unclaimedPoolCollateral = unclaimedPoolCollateral.add(collateral_needed);\\n\\n        if(bdx_amount > 0){\\n            if(BDSTABLE.canLegallyRedeem(msg.sender)){\\n                redeemBDXBalances[msg.sender] = redeemBDXBalances[msg.sender].add(bdx_amount);\\n            } else {\\n                uint256 bdx_amount_sender = bdx_amount.div(10);\\n                uint256 bdx_amount_treasury = bdx_amount.mul(9).div(10);\\n\\n                redeemBDXBalances[msg.sender] = redeemBDXBalances[msg.sender].add(bdx_amount_sender);\\n\\n                address treasury_address = BDSTABLE.treasury_address();\\n                redeemBDXBalances[treasury_address] = redeemBDXBalances[treasury_address].add(bdx_amount_treasury);\\n            }\\n\\n            unclaimedPoolBDX = unclaimedPoolBDX.add(bdx_amount);\\n        }\\n\\n        lastRedeemed[msg.sender] = block.number;\\n        \\n        // Move all external functions to the end\\n        BDSTABLE.pool_burn_from(msg.sender, BdStable_amount);\\n        if(bdx_amount > 0){\\n            BDX.mint(address(BDSTABLE), address(this), bdx_amount);\\n        }\\n    }\\n\\n    // After a redemption happens, transfer the newly minted BDX and owed collateral from this pool\\n    // contract to the user. Redemption is split into two functions to prevent flash loans from being able\\n    // to take out BdStable/collateral from the system, use an AMM to trade the new price, and then mint back into the system.\\n    function collectRedemption() external {\\n        require(\\n            (lastRedeemed[msg.sender].add(redemption_delay)) <= block.number,\\n            \\\"Must wait for redemption_delay blocks before collecting redemption\\\"\\n        );\\n        bool sendBDX = false;\\n        bool sendCollateral = false;\\n        uint256 BDXAmount;\\n        uint256 CollateralAmount;\\n\\n        // Use Checks-Effects-Interactions pattern\\n        if (redeemBDXBalances[msg.sender] > 0) {\\n            BDXAmount = redeemBDXBalances[msg.sender];\\n            redeemBDXBalances[msg.sender] = 0;\\n            unclaimedPoolBDX = unclaimedPoolBDX.sub(BDXAmount);\\n\\n            sendBDX = true;\\n        }\\n\\n        if (redeemCollateralBalances[msg.sender] > 0) {\\n            CollateralAmount = redeemCollateralBalances[msg.sender];\\n            redeemCollateralBalances[msg.sender] = 0;\\n            unclaimedPoolCollateral = unclaimedPoolCollateral.sub(\\n                CollateralAmount\\n            );\\n\\n            sendCollateral = true;\\n        }\\n\\n        if (sendBDX == true) {\\n            TransferHelper.safeTransfer(address(BDX), msg.sender, BDXAmount);\\n        }\\n        if (sendCollateral == true) {\\n            TransferHelper.safeTransfer(address(collateral_token), msg.sender, CollateralAmount);\\n        }\\n    }\\n\\n    // When the protocol is recollateralizing, we need to give a discount of BDX to hit the new CR target\\n    // Thus, if the target collateral ratio is higher than the actual value of collateral, minters get BDX for adding collateral\\n    // This function simply rewards anyone that sends collateral to a pool with the same amount of BDX + the bonus rate\\n    // Anyone can call this function to recollateralize the protocol and take the extra BDX value from the bonus rate as an arb opportunity\\n    function recollateralizeBdStable(uint256 collateral_amount, uint256 BDX_out_min) external {\\n        require(recollateralizePaused == false, \\\"Recollateralize is paused\\\");\\n\\n        if(recollateralizeOnlyForOwner){\\n            require(msg.sender == owner_address, \\\"Currently only owner can recollateralize\\\");\\n        }\\n\\n        updateOraclesIfNeeded();\\n        BDSTABLE.refreshCollateralRatio();\\n\\n        uint256 collateral_amount_d18 = collateral_amount * (10 ** missing_decimals);\\n        uint256 bdx_price = BDSTABLE.BDX_price_d12();\\n        uint256 bdStable_total_supply = BDSTABLE.totalSupply();\\n        uint256 global_collateral_ratio_d12 = BDSTABLE.global_collateral_ratio_d12();\\n        uint256 global_collat_value = BDSTABLE.globalCollateralValue();\\n\\n        (uint256 collateral_units, uint256 amount_to_recollat) = BdPoolLibrary.calcRecollateralizeBdStableInner(\\n            collateral_amount_d18,\\n            getCollateralPrice_d12(),\\n            global_collat_value,\\n            bdStable_total_supply,\\n            global_collateral_ratio_d12\\n        ); \\n\\n        uint256 collateral_units_precision = collateral_units.div(10 ** missing_decimals);\\n\\n        uint256 bdx_paid_back = amount_to_recollat.mul(uint(BdPoolLibrary.PRICE_PRECISION).add(bonus_rate).sub(recollat_fee)).div(bdx_price);\\n        bdx_paid_back = howMuchBdxCanBeMinted(bdx_paid_back);\\n        \\n        require(BDX_out_min <= bdx_paid_back, \\\"Slippage limit reached\\\");\\n\\n        TransferHelper.safeTransferFrom(address(collateral_token), msg.sender, address(this), collateral_units_precision);\\n\\n        if(bdx_paid_back > 0){\\n            BDX.mint(address(BDSTABLE), msg.sender, bdx_paid_back);\\n        }\\n\\n        emit Recollateralized(collateral_units_precision, bdx_paid_back);\\n    }\\n\\n    // Function can be called by an BDX holder to have the protocol buy back BDX with excess collateral value from a desired collateral pool\\n    // This can also happen if the collateral ratio > 1\\n    function buyBackBDX(uint256 BDX_amount, uint256 COLLATERAL_out_min) external {\\n        require(buyBackPaused == false, \\\"Buyback is paused\\\");\\n\\n        if(buybackOnlyForOwner){\\n            require(msg.sender == owner_address, \\\"Currently only owner can buyback\\\");\\n        }\\n\\n        updateOraclesIfNeeded();\\n        \\n        uint256 bdx_price = BDSTABLE.BDX_price_d12();\\n    \\n        (uint256 collateral_equivalent_d18) = BdPoolLibrary.calcBuyBackBDX(\\n            availableExcessCollatDV(),\\n            bdx_price,\\n            getCollateralPrice_d12(),\\n            BDX_amount\\n        ).mul(uint(BdPoolLibrary.PRICE_PRECISION).sub(buyback_fee)).div(BdPoolLibrary.PRICE_PRECISION);\\n\\n        uint256 collateral_precision = collateral_equivalent_d18.div(10 ** missing_decimals);\\n\\n        require(COLLATERAL_out_min <= collateral_precision, \\\"Slippage limit reached\\\");\\n        \\n        // Give the sender their desired collateral and burn the BDX\\n        BDX.pool_burn_from(address(BDSTABLE), msg.sender, BDX_amount);\\n        TransferHelper.safeTransfer(address(collateral_token), msg.sender, collateral_precision);\\n\\n        emit BoughtBack(BDX_amount, collateral_precision);\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    function setCollatWETHOracle(\\n        address _collateral_weth_oracle_address,\\n        address _weth_address\\n    ) \\n        external\\n        onlyByOwner \\n    {\\n        collatWEthOracle = ICryptoPairOracle(_collateral_weth_oracle_address);\\n        weth_address = _weth_address;\\n\\n        emit CollateralWethOracleSet(_collateral_weth_oracle_address, _weth_address);\\n    }\\n\\n    function toggleMintingPaused() external onlyByOwner {\\n        mintPaused = !mintPaused;\\n\\n        emit MintingPausedToggled(mintPaused);\\n    }\\n\\n    function toggleRedeemingPaused() external onlyByOwner {\\n        redeemPaused = !redeemPaused;\\n\\n        emit RedeemingPausedToggled(redeemPaused);\\n    }\\n\\n    function toggleRecollateralizePaused() external onlyByOwner {\\n        recollateralizePaused = !recollateralizePaused;\\n\\n        emit RecollateralizePausedToggled(recollateralizePaused);\\n    }\\n    \\n    function toggleBuybackPaused() external onlyByOwner {\\n        buyBackPaused = !buyBackPaused;\\n\\n        emit BuybackPausedToggled(buyBackPaused);\\n    }\\n\\n    function toggleBuybackOnlyForOwner() external onlyByOwner {\\n        buybackOnlyForOwner = !buybackOnlyForOwner;\\n\\n        emit BuybackOnlyForOwnerToggled(buybackOnlyForOwner);\\n    }\\n\\n    function toggleRecollateralizeOnlyForOwner() external onlyByOwner {\\n        recollateralizeOnlyForOwner = !recollateralizeOnlyForOwner;\\n\\n        emit RecollateralizeOnlyForOwnerToggled(recollateralizeOnlyForOwner);\\n    }\\n\\n    function toggleCollateralPricePaused(uint256 _new_price) external onlyByOwner {\\n        // If pausing, set paused price; else if unpausing, clear pausedPrice\\n        if(collateralPricePaused == false){\\n            pausedPrice = _new_price;\\n        } else {\\n            pausedPrice = 0;\\n        }\\n        collateralPricePaused = !collateralPricePaused;\\n\\n        emit CollateralPriceToggled(collateralPricePaused);\\n    }\\n\\n    // Combined into one function due to 24KiB contract memory limit\\n    function setPoolParameters(\\n        uint256 new_ceiling, \\n        uint256 new_bonus_rate, \\n        uint256 new_redemption_delay, \\n        uint256 new_mint_fee,\\n        uint256 new_redeem_fee, \\n        uint256 new_buyback_fee,\\n        uint256 new_recollat_fee\\n    )\\n        external\\n        onlyByOwner \\n    {\\n        pool_ceiling = new_ceiling;\\n        bonus_rate = new_bonus_rate;\\n        redemption_delay = new_redemption_delay;\\n        minting_fee = new_mint_fee;\\n        redemption_fee = new_redeem_fee;\\n        buyback_fee = new_buyback_fee;\\n        recollat_fee = new_recollat_fee;\\n\\n        emit PoolParametersSet(new_ceiling, new_bonus_rate, new_redemption_delay, new_mint_fee, new_redeem_fee, new_buyback_fee, new_recollat_fee);\\n    }\\n\\n    function setOwner(address _owner_address) external onlyByOwner {\\n        require(_owner_address != address(0), \\\"New owner can't be zero address\\\");\\n\\n        owner_address = _owner_address;\\n        emit OwnerSet(_owner_address);\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event OwnerSet(address indexed newOwner);\\n    event PoolParametersSet(uint256 new_ceiling, uint256 new_bonus_rate, uint256 new_redemption_delay, uint256 new_mint_fee, uint256 new_redeem_fee, uint256 new_buyback_fee, uint256 new_recollat_fee);\\n    event MintingPausedToggled(bool toggled);\\n    event RedeemingPausedToggled(bool toggled);\\n    event RecollateralizePausedToggled(bool toggled);\\n    event BuybackPausedToggled(bool toggled);\\n    event CollateralPriceToggled(bool toggled);\\n    event CollateralWethOracleSet(address indexed collateral_weth_oracle_address, address indexed weth_address);\\n    event RecollateralizeOnlyForOwnerToggled(bool recollateralizeOnlyForOwner);\\n    event BuybackOnlyForOwnerToggled(bool buybackOnlyForOwner);\\n    event Recollateralized(uint256 indexed collateral_amount_paid, uint256 indexed bdx_paid_back);\\n    event BoughtBack(uint256 indexed bdx_amount_paid, uint256 indexed collateral_paid_back);\\n}\\n\",\"keccak256\":\"0x4177ab972ec424e38557f6d6c75eac25a8e763e04f51586fb7b9c7e2a8a96c66\",\"license\":\"MIT\"},\"contracts/Bdx/BDXShares.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../ERC20/ERC20Custom.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../BdStable/BDStable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\ncontract BDXShares is ERC20Custom, Initializable {\\n    using SafeMath for uint256;\\n\\n    /* ========== STATE VARIABLES ========== */\\n    uint8 public constant decimals = 18;\\n    uint256 public constant MAX_TOTAL_SUPPLY = 21*1e6*1e18;\\n\\n    string public symbol;\\n    string public name;\\n    \\n    address public owner_address;\\n\\n    mapping(address => bool) bdstables;\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyPools(address bd_stable) {\\n       require(bdstables[bd_stable] && BDStable(bd_stable).bdstable_pools(msg.sender) == true, \\\"You are not a bd pool\\\");\\n        _;\\n    }\\n    \\n    modifier onlyByOwner() {\\n        require(msg.sender == owner_address, \\\"You are not an owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyPoolsOrOwner(address bd_stable) {\\n       require(bdstables[bd_stable] && BDStable(bd_stable).bdstable_pools(msg.sender) == true || msg.sender == owner_address,\\n         \\\"You are not an owner nor a bd pool\\\");\\n        _;\\n    }\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        address _owner_address\\n    )\\n        external\\n        initializer\\n    {\\n        name = _name;\\n        symbol = _symbol;\\n        owner_address = _owner_address;\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    function addBdStableAddress(address bdstable_contract_address) external onlyByOwner {\\n        bdstables[bdstable_contract_address] = true;\\n        emit BdStableAddressAdded(bdstable_contract_address);\\n    }\\n\\n    function setOwner(address _owner_address) external onlyByOwner {\\n        require(_owner_address != address(0), \\\"New owner can't be zero address\\\");\\n        \\n        owner_address = _owner_address;\\n        emit OwnerSet(_owner_address);\\n    }\\n\\n    function mint(address bd_stable, address to, uint256 amount) public onlyPoolsOrOwner(bd_stable) {\\n        require(totalSupply().add(amount) <= MAX_TOTAL_SUPPLY, \\\"BDX limit reached\\\");\\n\\n        _mint(to, amount);\\n\\n        emit BdxMinted(address(this), to, bd_stable, amount);\\n    }\\n\\n    // This function is what other bd pools will call to burn BDX \\n    function pool_burn_from(address bd_stable, address b_address, uint256 b_amount) external onlyPools(bd_stable) {\\n\\n        _burnFrom(b_address, b_amount);\\n        emit BdxBurned(b_address, address(this), bd_stable, b_amount);\\n    }\\n\\n    function howMuchCanBeMinted() external view returns(uint256) {\\n        return MAX_TOTAL_SUPPLY.sub(totalSupply());\\n    }\\n\\n    /* ========== EVENTS ========== */\\n    \\n    event OwnerSet(address indexed newOwner);\\n    event BdxBurned(address indexed from, address indexed to, address bd_stable, uint256 indexed amount);\\n    event BdxMinted(address indexed from, address indexed to, address bd_stable, uint256 indexed amount);\\n    event BdStableAddressAdded(address indexed addr);\\n}\\n\",\"keccak256\":\"0xf1c1fc6c55810cd49862133f06a5fd14bba40a3bc1e794a2f936356ee1ac45b4\",\"license\":\"MIT\"},\"contracts/ERC20/ERC20Custom.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n// Due to compiling issues, _name, _symbol, and _decimals were removed\\n\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20Mintable}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Custom is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) internal _balances;\\n\\n    mapping (address => mapping (address => uint256)) internal _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.approve(address spender, uint256 amount)\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for `accounts`'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller's allowance.\\n     *\\n     * See {_burn} and {_approve}.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal virtual {\\n        _burn(account, amount);\\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of `from`'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of `from`'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:using-hooks.adoc[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n\\n    uint256[45] private __gap;\\n}\",\"keccak256\":\"0x3bfd2f12d808f89945b024b2533c2314942ee751cbbda437d4dbf57476557993\",\"license\":\"MIT\"},\"contracts/Oracle/ICryptoPairOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\ninterface ICryptoPairOracle {\\n    \\n    function consult(address tokenIn, uint256 amountIn)\\n        external\\n        view\\n        returns (uint amountOut);\\n\\n    function updateOracle() external;\\n\\n    function shouldUpdateOracle() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x00b4ecc1f139da5a2cba4c0493408762e78f29122116936e29ec4169328ee52a\",\"license\":\"MIT\"},\"contracts/Oracle/IOracleBasedCryptoFiatFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.11;\\r\\n\\r\\ninterface IOracleBasedCryptoFiatFeed {   \\r\\n    function getPrice_1e12() external view returns (uint256);\\r\\n    function getDecimals() external view returns (uint8);\\r\\n}\",\"keccak256\":\"0x64c8329d53c261a9bb6e5b7b0e370aeda30989db7e2717f25e21697c7421ac8f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600260425534801561001557600080fd5b50612bb0806100256000396000f3fe608060405234801561001057600080fd5b50600436106103425760003560e01c806387a140c3116101b8578063b4f56b2611610104578063da6ed553116100a2578063ed99250c1161007c578063ed99250c1461064c578063eef772f214610654578063fa62921914610667578063fadb1b021461066f57610342565b8063da6ed5531461061e578063dd62ed3e14610626578063ed7e119f1461063957610342565b8063c03f7be3116100de578063c03f7be3146105f3578063ce202603146105fb578063d2d97b0614610603578063d914cd4b1461060b57610342565b8063b4f56b26146105d0578063b843153a146105e3578063bcdede5b146105eb57610342565b8063a50edca011610171578063abfd85751161014b578063abfd85751461058f578063b02f6aec146105a2578063b20b02aa146105b5578063b2d23622146105bd57610342565b8063a50edca014610561578063a8a778ae14610569578063a9059cbb1461057c57610342565b806387a140c31461051057806395d89b41146105185780639e92f14f146105205780639f5f79e014610533578063a367e27d14610546578063a457c2d71461054e57610342565b80633950935111610292578063686d14e61161023057806370a082311161020a57806370a08231146104da57806379cc6790146104ed57806380edef8e14610500578063870cfeab1461050857610342565b8063686d14e6146104b7578063688c0f47146104ca5780636c7ff97b146104d257610342565b806342966c681161026c57806342966c6814610476578063497b59611461048957806349daf9a41461049c5780635b078c76146104af57610342565b806339509351146104485780633b7d09461461045b5780634013124a1461046e57610342565b80631c098458116102ff57806325f10c9b116102d957806325f10c9b1461041057806326191e4b146104185780632fe16b9614610420578063313ce5671461043357610342565b80631c098458146103d557806323b872dd146103e8578063246126bd146103fb57610342565b806306fdde031461034757806308acfd2e14610365578063095ea7b31461037a5780631096f1031461039a57806313af4035146103ad57806318160ddd146103c0575b600080fd5b61034f610677565b60405161035c91906125ef565b60405180910390f35b6103786103733660046123ca565b610705565b005b61038d610388366004612459565b61075a565b60405161035c91906125e4565b61038d6103a83660046123ca565b610778565b6103786103bb3660046123ca565b6107b0565b6103c861084a565b60405161035c9190612a95565b6103786103e3366004612566565b610851565b61038d6103f6366004612419565b6108bb565b610403610948565b60405161035c91906125b7565b6103c8610957565b6103c8610968565b61038d61042e3660046123ca565b61096e565b61043b610983565b60405161035c9190612a9e565b61038d610456366004612459565b610988565b6103786104693660046123ca565b6109dc565b610378610b70565b610378610484366004612566565b610d85565b610403610497366004612566565b610d99565b6103786104aa3660046124a3565b610dc0565b6103c8610f30565b6103786104c53660046123ca565b610fd9565b6103c86110e0565b6103786110e6565b6103c86104e83660046123ca565b6112cf565b6103786104fb366004612459565b6112ea565b610403611345565b6103c8611354565b61038d61135a565b61034f611363565b61037861052e3660046123e5565b6113be565b610378610541366004612566565b611446565b6104036114a5565b61038d61055c366004612459565b6114b4565b61034f611522565b610378610577366004612459565b61157d565b61038d61058a366004612459565b61160a565b61037861059d366004612566565b61161e565b6103786105b0366004612566565b61167b565b6103c86116e7565b6103786105cb3660046123e5565b6116ed565b6103786105de366004612459565b611775565b610403611800565b61038d61180f565b6103c8611918565b6103c861191e565b6103c8611924565b6103786106193660046123ca565b6119e1565b610378611afd565b6103c86106343660046123e5565b611b75565b6103c86106473660046123ca565b611ba0565b6103c8611bb2565b610378610662366004612566565b611bbe565b6103c8611bed565b6103c8611c29565b6032805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106fd5780601f106106d2576101008083540402835291602001916106fd565b820191906000526020600020905b8154815290600101906020018083116106e057829003601f168201915b505050505081565b6034546001600160a01b031633146107385760405162461bcd60e51b815260040161072f906127b0565b60405180910390fd5b603680546001600160a01b0319166001600160a01b0392909216919091179055565b600061076e610767611c2f565b8484611c33565b5060015b92915050565b6042546001600160a01b0382166000908152604460205260408120549091906107a890439063ffffffff611ce716565b101592915050565b6034546001600160a01b031633146107da5760405162461bcd60e51b815260040161072f906127b0565b6001600160a01b0381166108005760405162461bcd60e51b815260040161072f906129c9565b603480546001600160a01b0319166001600160a01b0383169081179091556040517f50146d0e3c60aa1d17a70635b05494f864e86144a2201275021014fbf08bafe290600090a250565b6002545b90565b6034546001600160a01b0316331461087b5760405162461bcd60e51b815260040161072f906127b0565b603e8190556040517fa603e975ae74b9c52c4ab59b67b328222c699f765f89b808e8a2ae7c9ae2428e906108b0908390612a95565b60405180910390a150565b60006108c8848484611d0f565b61093e846108d4611c2f565b61093985604051806060016040528060288152602001612b0a602891396001600160a01b038a16600090815260016020526040812090610912611c2f565b6001600160a01b03168152602081019190915260400160002054919063ffffffff611e3016565b611c33565b5060019392505050565b603b546001600160a01b031681565b60006109636000611e5c565b905090565b603e5481565b603d6020526000908152604090205460ff1681565b601281565b600061076e610995611c2f565b8461093985600160006109a6611c2f565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff611ff416565b6034546001600160a01b03163314610a065760405162461bcd60e51b815260040161072f906127b0565b6001600160a01b0381166000908152603d602052604090205460ff161515600114610a435760405162461bcd60e51b815260040161072f906126fe565b6001600160a01b0381166000908152603d60205260408120805460ff191690555b603c54811015610b4057816001600160a01b0316603c8281548110610a8557fe5b6000918252602090912001546001600160a01b03161415610b3857603c80546000198101908110610ab257fe5b600091825260209091200154603c80546001600160a01b039092169183908110610ad857fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550603c805480610b1157fe5b600082815260209020810160001990810180546001600160a01b0319169055019055610b40565b600101610a64565b507f4106dfdaa577573db51c0ca93f766dbedfa0758faa2e7f5bcdb7c142be803c3f816040516108b091906125b7565b60435460ff16151560011415610b8557610d83565b603f5460455442031015610b9857610d83565b603760009054906101000a90046001600160a01b03166001600160a01b03166309bf39ed6040518163ffffffff1660e01b815260040160206040518083038186803b158015610be657600080fd5b505afa158015610bfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1e9190612483565b15610c8c57603760009054906101000a90046001600160a01b03166001600160a01b031663d6f124f06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c7357600080fd5b505af1158015610c87573d6000803e3d6000fd5b505050505b6000610c96610957565b9050610caf604154604054611ff490919063ffffffff16565b811115610ce957603e54603a5411610ccb576000603a55610ce4565b603e54603a54610ce09163ffffffff611ce716565b603a555b610d4e565b604154604054610cfe9163ffffffff611ce716565b811015610d4e5764e8d4a51000610d22603e54603a54611ff490919063ffffffff16565b10610d355764e8d4a51000603a55610d4e565b603e54603a54610d4a9163ffffffff611ff416565b603a555b42604555603a546040517fb1200af9b3ac4dec88c9d01e1fb7cc7fa1f0fe55bf4afac1f30cc4fc2b2d1dd2916108b091612a95565b565b610d96610d90611c2f565b82612020565b50565b603c8181548110610da657fe5b6000918252602090912001546001600160a01b0316905081565b603054610100900460ff1680610dd95750610dd9612102565b80610de7575060305460ff16155b610e035760405162461bcd60e51b815260040161072f90612816565b603054610100900460ff16158015610e2e576030805460ff1961ff0019909116610100171660011790555b8751610e419060329060208b019061229d565b508651610e559060319060208a019061229d565b508551610e6990603390602089019061229d565b50603480546001600160a01b038088166001600160a01b031992831617909255603680548784169083161790556035805492861692909116919091179055610ecf612710610ec364e8d4a51000601963ffffffff61211316565b9063ffffffff61214d16565b603e5564e8d4a51000603a8190556040819055610efb9061271090610ec390603263ffffffff61211316565b604155610e10603f558115610f1457610f14858361217f565b8015610f26576030805461ff00191690555b5050505050505050565b6039546040805163f245a92f60e01b815290516000926109639260ff600160a01b830416600a0a92610ec39264e8d4a51000926001600160a01b039091169163f245a92f91600480820192602092909190829003018186803b158015610f9557600080fd5b505afa158015610fa9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fcd919061257e565b9063ffffffff61211316565b6034546001600160a01b031633146110035760405162461bcd60e51b815260040161072f906127b0565b603980546001600160a01b0319166001600160a01b03838116919091179182905560408051633c05076160e21b81529051929091169163f0141d8491600480820192602092909190829003018186803b15801561105f57600080fd5b505afa158015611073573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110979190612596565b603960146101000a81548160ff021916908360ff1602179055507f6643a1fbc87d792d8e737bc2f2d5c0f1c7477ab534d0254404a448decceb3d97816040516108b091906125b7565b603c5490565b603860009054906101000a90046001600160a01b03166001600160a01b03166309bf39ed6040518163ffffffff1660e01b815260040160206040518083038186803b15801561113457600080fd5b505afa158015611148573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116c9190612483565b156111da57603860009054906101000a90046001600160a01b03166001600160a01b031663d6f124f06040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156111c157600080fd5b505af11580156111d5573d6000803e3d6000fd5b505050505b603760009054906101000a90046001600160a01b03166001600160a01b03166309bf39ed6040518163ffffffff1660e01b815260040160206040518083038186803b15801561122857600080fd5b505afa15801561123c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112609190612483565b15610d8357603760009054906101000a90046001600160a01b03166001600160a01b031663d6f124f06040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156112b557600080fd5b505af11580156112c9573d6000803e3d6000fd5b50505050565b6001600160a01b031660009081526020819052604090205490565b600061132282604051806060016040528060248152602001612b326024913961131586610634611c2f565b919063ffffffff611e3016565b905061133683611330611c2f565b83611c33565b6113408383612020565b505050565b6034546001600160a01b031681565b60455481565b60435460ff1681565b6031805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106fd5780601f106106d2576101008083540402835291602001916106fd565b6034546001600160a01b031633146113e85760405162461bcd60e51b815260040161072f906127b0565b603880546001600160a01b03199081166001600160a01b03858116918217909355603b80549092169284169283179091556040517fc9f7b9114f19207e2ab326f6283ffa7ca31152981ed14b34a1a8fb039bf562e490600090a35050565b6034546001600160a01b031633146114705760405162461bcd60e51b815260040161072f906127b0565b60418190556040517fe9febe6aec89ff2870eeab6d13333c59cbed275b1d9a95f527c853d99ddb7cf4906108b0908390612a95565b6036546001600160a01b031681565b600061076e6114c1611c2f565b8461093985604051806060016040528060258152602001612b5660259139600160006114eb611c2f565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff611e3016565b6033805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106fd5780601f106106d2576101008083540402835291602001916106fd565b336000908152603d602052604090205460ff1615156001146115b15760405162461bcd60e51b815260040161072f9061276c565b6115bb828261223f565b336001600160a01b0316826001600160a01b03167f12d4d764706ce89037b449ff0dea7e084ef851d40ff63edaa38db6f33a581c7f836040516115fe9190612a95565b60405180910390a35050565b600061076e611617611c2f565b8484611d0f565b6034546001600160a01b031633146116485760405162461bcd60e51b815260040161072f906127b0565b6040818155517f898a2c9df7982133daaa8cfd78b8c49c520cba03205eec6480552c19059f6e3a906108b0908390612a95565b6034546001600160a01b031633146116a55760405162461bcd60e51b815260040161072f906127b0565b603a8190556043805460ff191660011790556040517ff3cd0dd9cc1a87f0d8733b9942a8864d40cb15c961b612792723a0a7858dd53d906108b0908390612a95565b60415481565b6034546001600160a01b031633146117175760405162461bcd60e51b815260040161072f906127b0565b603780546001600160a01b03199081166001600160a01b03858116918217909355603b80549092169284169283179091556040517f7bfb3b83b7a634aa3363e0d152007e16be1802bba198a3def769d8c1e4849f5f90600090a35050565b336000908152603d602052604090205460ff1615156001146117a95760405162461bcd60e51b815260040161072f9061276c565b6117b3828261217f565b6001600160a01b038216600081815260446020526040908190204390555133907f69f651718349cff8d0d00acbb3ebb2bf127edbdfc02746168d5e35fb7998b399906115fe908590612a95565b6035546001600160a01b031681565b603854604080516309bf39ed60e01b815290516000926001600160a01b0316916309bf39ed916004808301926020929190829003018186803b15801561185457600080fd5b505afa158015611868573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188c9190612483565b806109635750603760009054906101000a90046001600160a01b03166001600160a01b03166309bf39ed6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118e057600080fd5b505afa1580156118f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109639190612483565b603f5481565b60405481565b600080805b603c548110156119db576119d1603c828154811061194357fe5b6000918252602091829020015460408051639ccabfb560e01b815290516001600160a01b0390921692639ccabfb592600480840193829003018186803b15801561198c57600080fd5b505afa1580156119a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c4919061257e565b839063ffffffff611ff416565b9150600101611929565b50905090565b6034546001600160a01b03163314611a0b5760405162461bcd60e51b815260040161072f906127b0565b6001600160a01b0381166000908152603d602052604090205460ff1615611a445760405162461bcd60e51b815260040161072f906128a5565b603c54602011611a665760405162461bcd60e51b815260040161072f90612913565b6001600160a01b0381166000818152603d6020526040808220805460ff19166001908117909155603c805491820181559092527fc6bb06cb7f92603de181bf256cd16846b93b752a170ff24824098b31aa008a7e90910180546001600160a01b031916909217909155517f73cca62ab1b520c9715bf4e6c71e3e518c754e7148f65102f43289a7df0efea6906108b09083906125b7565b6034546001600160a01b03163314611b275760405162461bcd60e51b815260040161072f906127b0565b6043805460ff19811660ff9182161517918290556040517f558e3ca434dbb046a1200c25235032a55789c63515e8c78f60495063b75e141f92611b6b9216906125e4565b60405180910390a1565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60446020526000908152604090205481565b60006109636001611e5c565b6034546001600160a01b03163314611be85760405162461bcd60e51b815260040161072f906127b0565b604255565b600080611bf861084a565b90506000611c04611924565b90506000611c2183610ec38464e8d4a5100063ffffffff61211316565b935050505090565b603a5481565b3390565b6001600160a01b038316611c595760405162461bcd60e51b815260040161072f90612985565b6001600160a01b038216611c7f5760405162461bcd60e51b815260040161072f90612685565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590611cda908590612a95565b60405180910390a3505050565b600082821115611d095760405162461bcd60e51b815260040161072f90612735565b50900390565b6001600160a01b038316611d355760405162461bcd60e51b815260040161072f90612940565b6001600160a01b038216611d5b5760405162461bcd60e51b815260040161072f90612642565b611d66838383611340565b611da981604051806060016040528060268152602001612ae4602691396001600160a01b038616600090815260208190526040902054919063ffffffff611e3016565b6001600160a01b038085166000908152602081905260408082209390935590841681522054611dde908263ffffffff611ff416565b6001600160a01b0380841660008181526020819052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611cda908590612a95565b60008184841115611e545760405162461bcd60e51b815260040161072f91906125ef565b505050900390565b6039546040805163f245a92f60e01b815290516000928392611ec39260ff600160a01b840416600a0a92610ec39264e8d4a51000926001600160a01b039092169163f245a92f91600480820192602092909190829003018186803b158015610f9557600080fd5b9050600080846001811115611ed457fe5b1415611f6c57603754603b54604051633ddac95360e01b81526001600160a01b0392831692633ddac95392611f159291169064e8d4a51000906004016125cb565b60206040518083038186803b158015611f2d57600080fd5b505afa158015611f41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f65919061257e565b9050611fd3565b6001846001811115611f7a57fe5b1415611fbb57603854603b54604051633ddac95360e01b81526001600160a01b0392831692633ddac95392611f159291169064e8d4a51000906004016125cb565b60405162461bcd60e51b815260040161072f90612a00565b611fec81610ec38464e8d4a5100063ffffffff61211316565b949350505050565b6000828201838110156120195760405162461bcd60e51b815260040161072f906126c7565b9392505050565b6001600160a01b0382166120465760405162461bcd60e51b815260040161072f906128d2565b61205282600083611340565b61209581604051806060016040528060228152602001612ac2602291396001600160a01b038516600090815260208190526040902054919063ffffffff611e3016565b6001600160a01b0383166000908152602081905260409020556002546120c1908263ffffffff611ce716565b6002556040516000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906115fe908590612a95565b600061210d30612297565b15905090565b60008261212257506000610772565b8282028284828161212f57fe5b04146120195760405162461bcd60e51b815260040161072f90612864565b600080821161216e5760405162461bcd60e51b815260040161072f906127df565b81838161217757fe5b049392505050565b6001600160a01b0382166121a55760405162461bcd60e51b815260040161072f90612a5e565b6121b160008383611340565b6002546121c4908263ffffffff611ff416565b6002556001600160a01b0382166000908152602081905260409020546121f0908263ffffffff611ff416565b6001600160a01b0383166000818152602081905260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906115fe908590612a95565b6122498282612020565b61229382612255611c2f565b61093984604051806060016040528060248152602001612b32602491396001600160a01b038816600090815260016020526040812090610912611c2f565b5050565b3b151590565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106122de57805160ff191683800117855561230b565b8280016001018555821561230b579182015b8281111561230b5782518255916020019190600101906122f0565b5061231792915061231b565b5090565b61084e91905b808211156123175760008155600101612321565b80356001600160a01b038116811461077257600080fd5b600082601f83011261235c578081fd5b813567ffffffffffffffff80821115612373578283fd5b604051601f8301601f191681016020018281118282101715612393578485fd5b6040528281529250828483016020018610156123ae57600080fd5b8260208601602083013760006020848301015250505092915050565b6000602082840312156123db578081fd5b6120198383612335565b600080604083850312156123f7578081fd5b6124018484612335565b91506124108460208501612335565b90509250929050565b60008060006060848603121561242d578081fd5b833561243881612aac565b9250602084013561244881612aac565b929592945050506040919091013590565b6000806040838503121561246b578182fd5b6124758484612335565b946020939093013593505050565b600060208284031215612494578081fd5b81518015158114612019578182fd5b600080600080600080600060e0888a0312156124bd578283fd5b873567ffffffffffffffff808211156124d4578485fd5b6124e08b838c0161234c565b985060208a01359150808211156124f5578485fd5b6125018b838c0161234c565b975060408a0135915080821115612516578485fd5b506125238a828b0161234c565b9550506125338960608a01612335565b93506125428960808a01612335565b92506125518960a08a01612335565b915060c0880135905092959891949750929550565b600060208284031215612577578081fd5b5035919050565b60006020828403121561258f578081fd5b5051919050565b6000602082840312156125a7578081fd5b815160ff81168114612019578182fd5b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6000602080835283518082850152825b8181101561261b578581018301518582016040015282016125ff565b8181111561262c5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601d908201527f6164647265737320646f65736e277420657869737420616c7265616479000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526024908201527f4f6e6c7920626420706f6f6c732063616e2063616c6c20746869732066756e636040820152633a34b7b760e11b606082015260800190565b6020808252601590820152742cb7ba9030b932903737ba103a34329037bbb732b960591b604082015260600190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b602080825260139082015272706f6f6c20616c72656164792065786973747360681b604082015260600190565b60208082526021908201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736040820152607360f81b606082015260800190565b6020808252601390820152721c1bdbdb1cc81b1a5b5a5d081c995858da1959606a1b604082015260600190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b6020808252601f908201527f4e6577206f776e65722063616e2774206265207a65726f206164647265737300604082015260600190565b602080825260409082018190527f494e56414c49442050524943452043484f4943452e204e6565647320746f2062908201527f6520656974686572203020284244535441424c4529206f722031202842445829606082015260800190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b90815260200190565b60ff91909116815260200190565b6001600160a01b0381168114610d9657600080fdfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e20616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212204ddbfdb30f4a09725a74c48753a77b2413565b6e899410d7ae7bfa34c2c95a2064736f6c634300060b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103425760003560e01c806387a140c3116101b8578063b4f56b2611610104578063da6ed553116100a2578063ed99250c1161007c578063ed99250c1461064c578063eef772f214610654578063fa62921914610667578063fadb1b021461066f57610342565b8063da6ed5531461061e578063dd62ed3e14610626578063ed7e119f1461063957610342565b8063c03f7be3116100de578063c03f7be3146105f3578063ce202603146105fb578063d2d97b0614610603578063d914cd4b1461060b57610342565b8063b4f56b26146105d0578063b843153a146105e3578063bcdede5b146105eb57610342565b8063a50edca011610171578063abfd85751161014b578063abfd85751461058f578063b02f6aec146105a2578063b20b02aa146105b5578063b2d23622146105bd57610342565b8063a50edca014610561578063a8a778ae14610569578063a9059cbb1461057c57610342565b806387a140c31461051057806395d89b41146105185780639e92f14f146105205780639f5f79e014610533578063a367e27d14610546578063a457c2d71461054e57610342565b80633950935111610292578063686d14e61161023057806370a082311161020a57806370a08231146104da57806379cc6790146104ed57806380edef8e14610500578063870cfeab1461050857610342565b8063686d14e6146104b7578063688c0f47146104ca5780636c7ff97b146104d257610342565b806342966c681161026c57806342966c6814610476578063497b59611461048957806349daf9a41461049c5780635b078c76146104af57610342565b806339509351146104485780633b7d09461461045b5780634013124a1461046e57610342565b80631c098458116102ff57806325f10c9b116102d957806325f10c9b1461041057806326191e4b146104185780632fe16b9614610420578063313ce5671461043357610342565b80631c098458146103d557806323b872dd146103e8578063246126bd146103fb57610342565b806306fdde031461034757806308acfd2e14610365578063095ea7b31461037a5780631096f1031461039a57806313af4035146103ad57806318160ddd146103c0575b600080fd5b61034f610677565b60405161035c91906125ef565b60405180910390f35b6103786103733660046123ca565b610705565b005b61038d610388366004612459565b61075a565b60405161035c91906125e4565b61038d6103a83660046123ca565b610778565b6103786103bb3660046123ca565b6107b0565b6103c861084a565b60405161035c9190612a95565b6103786103e3366004612566565b610851565b61038d6103f6366004612419565b6108bb565b610403610948565b60405161035c91906125b7565b6103c8610957565b6103c8610968565b61038d61042e3660046123ca565b61096e565b61043b610983565b60405161035c9190612a9e565b61038d610456366004612459565b610988565b6103786104693660046123ca565b6109dc565b610378610b70565b610378610484366004612566565b610d85565b610403610497366004612566565b610d99565b6103786104aa3660046124a3565b610dc0565b6103c8610f30565b6103786104c53660046123ca565b610fd9565b6103c86110e0565b6103786110e6565b6103c86104e83660046123ca565b6112cf565b6103786104fb366004612459565b6112ea565b610403611345565b6103c8611354565b61038d61135a565b61034f611363565b61037861052e3660046123e5565b6113be565b610378610541366004612566565b611446565b6104036114a5565b61038d61055c366004612459565b6114b4565b61034f611522565b610378610577366004612459565b61157d565b61038d61058a366004612459565b61160a565b61037861059d366004612566565b61161e565b6103786105b0366004612566565b61167b565b6103c86116e7565b6103786105cb3660046123e5565b6116ed565b6103786105de366004612459565b611775565b610403611800565b61038d61180f565b6103c8611918565b6103c861191e565b6103c8611924565b6103786106193660046123ca565b6119e1565b610378611afd565b6103c86106343660046123e5565b611b75565b6103c86106473660046123ca565b611ba0565b6103c8611bb2565b610378610662366004612566565b611bbe565b6103c8611bed565b6103c8611c29565b6032805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106fd5780601f106106d2576101008083540402835291602001916106fd565b820191906000526020600020905b8154815290600101906020018083116106e057829003601f168201915b505050505081565b6034546001600160a01b031633146107385760405162461bcd60e51b815260040161072f906127b0565b60405180910390fd5b603680546001600160a01b0319166001600160a01b0392909216919091179055565b600061076e610767611c2f565b8484611c33565b5060015b92915050565b6042546001600160a01b0382166000908152604460205260408120549091906107a890439063ffffffff611ce716565b101592915050565b6034546001600160a01b031633146107da5760405162461bcd60e51b815260040161072f906127b0565b6001600160a01b0381166108005760405162461bcd60e51b815260040161072f906129c9565b603480546001600160a01b0319166001600160a01b0383169081179091556040517f50146d0e3c60aa1d17a70635b05494f864e86144a2201275021014fbf08bafe290600090a250565b6002545b90565b6034546001600160a01b0316331461087b5760405162461bcd60e51b815260040161072f906127b0565b603e8190556040517fa603e975ae74b9c52c4ab59b67b328222c699f765f89b808e8a2ae7c9ae2428e906108b0908390612a95565b60405180910390a150565b60006108c8848484611d0f565b61093e846108d4611c2f565b61093985604051806060016040528060288152602001612b0a602891396001600160a01b038a16600090815260016020526040812090610912611c2f565b6001600160a01b03168152602081019190915260400160002054919063ffffffff611e3016565b611c33565b5060019392505050565b603b546001600160a01b031681565b60006109636000611e5c565b905090565b603e5481565b603d6020526000908152604090205460ff1681565b601281565b600061076e610995611c2f565b8461093985600160006109a6611c2f565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff611ff416565b6034546001600160a01b03163314610a065760405162461bcd60e51b815260040161072f906127b0565b6001600160a01b0381166000908152603d602052604090205460ff161515600114610a435760405162461bcd60e51b815260040161072f906126fe565b6001600160a01b0381166000908152603d60205260408120805460ff191690555b603c54811015610b4057816001600160a01b0316603c8281548110610a8557fe5b6000918252602090912001546001600160a01b03161415610b3857603c80546000198101908110610ab257fe5b600091825260209091200154603c80546001600160a01b039092169183908110610ad857fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550603c805480610b1157fe5b600082815260209020810160001990810180546001600160a01b0319169055019055610b40565b600101610a64565b507f4106dfdaa577573db51c0ca93f766dbedfa0758faa2e7f5bcdb7c142be803c3f816040516108b091906125b7565b60435460ff16151560011415610b8557610d83565b603f5460455442031015610b9857610d83565b603760009054906101000a90046001600160a01b03166001600160a01b03166309bf39ed6040518163ffffffff1660e01b815260040160206040518083038186803b158015610be657600080fd5b505afa158015610bfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1e9190612483565b15610c8c57603760009054906101000a90046001600160a01b03166001600160a01b031663d6f124f06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c7357600080fd5b505af1158015610c87573d6000803e3d6000fd5b505050505b6000610c96610957565b9050610caf604154604054611ff490919063ffffffff16565b811115610ce957603e54603a5411610ccb576000603a55610ce4565b603e54603a54610ce09163ffffffff611ce716565b603a555b610d4e565b604154604054610cfe9163ffffffff611ce716565b811015610d4e5764e8d4a51000610d22603e54603a54611ff490919063ffffffff16565b10610d355764e8d4a51000603a55610d4e565b603e54603a54610d4a9163ffffffff611ff416565b603a555b42604555603a546040517fb1200af9b3ac4dec88c9d01e1fb7cc7fa1f0fe55bf4afac1f30cc4fc2b2d1dd2916108b091612a95565b565b610d96610d90611c2f565b82612020565b50565b603c8181548110610da657fe5b6000918252602090912001546001600160a01b0316905081565b603054610100900460ff1680610dd95750610dd9612102565b80610de7575060305460ff16155b610e035760405162461bcd60e51b815260040161072f90612816565b603054610100900460ff16158015610e2e576030805460ff1961ff0019909116610100171660011790555b8751610e419060329060208b019061229d565b508651610e559060319060208a019061229d565b508551610e6990603390602089019061229d565b50603480546001600160a01b038088166001600160a01b031992831617909255603680548784169083161790556035805492861692909116919091179055610ecf612710610ec364e8d4a51000601963ffffffff61211316565b9063ffffffff61214d16565b603e5564e8d4a51000603a8190556040819055610efb9061271090610ec390603263ffffffff61211316565b604155610e10603f558115610f1457610f14858361217f565b8015610f26576030805461ff00191690555b5050505050505050565b6039546040805163f245a92f60e01b815290516000926109639260ff600160a01b830416600a0a92610ec39264e8d4a51000926001600160a01b039091169163f245a92f91600480820192602092909190829003018186803b158015610f9557600080fd5b505afa158015610fa9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fcd919061257e565b9063ffffffff61211316565b6034546001600160a01b031633146110035760405162461bcd60e51b815260040161072f906127b0565b603980546001600160a01b0319166001600160a01b03838116919091179182905560408051633c05076160e21b81529051929091169163f0141d8491600480820192602092909190829003018186803b15801561105f57600080fd5b505afa158015611073573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110979190612596565b603960146101000a81548160ff021916908360ff1602179055507f6643a1fbc87d792d8e737bc2f2d5c0f1c7477ab534d0254404a448decceb3d97816040516108b091906125b7565b603c5490565b603860009054906101000a90046001600160a01b03166001600160a01b03166309bf39ed6040518163ffffffff1660e01b815260040160206040518083038186803b15801561113457600080fd5b505afa158015611148573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116c9190612483565b156111da57603860009054906101000a90046001600160a01b03166001600160a01b031663d6f124f06040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156111c157600080fd5b505af11580156111d5573d6000803e3d6000fd5b505050505b603760009054906101000a90046001600160a01b03166001600160a01b03166309bf39ed6040518163ffffffff1660e01b815260040160206040518083038186803b15801561122857600080fd5b505afa15801561123c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112609190612483565b15610d8357603760009054906101000a90046001600160a01b03166001600160a01b031663d6f124f06040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156112b557600080fd5b505af11580156112c9573d6000803e3d6000fd5b50505050565b6001600160a01b031660009081526020819052604090205490565b600061132282604051806060016040528060248152602001612b326024913961131586610634611c2f565b919063ffffffff611e3016565b905061133683611330611c2f565b83611c33565b6113408383612020565b505050565b6034546001600160a01b031681565b60455481565b60435460ff1681565b6031805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106fd5780601f106106d2576101008083540402835291602001916106fd565b6034546001600160a01b031633146113e85760405162461bcd60e51b815260040161072f906127b0565b603880546001600160a01b03199081166001600160a01b03858116918217909355603b80549092169284169283179091556040517fc9f7b9114f19207e2ab326f6283ffa7ca31152981ed14b34a1a8fb039bf562e490600090a35050565b6034546001600160a01b031633146114705760405162461bcd60e51b815260040161072f906127b0565b60418190556040517fe9febe6aec89ff2870eeab6d13333c59cbed275b1d9a95f527c853d99ddb7cf4906108b0908390612a95565b6036546001600160a01b031681565b600061076e6114c1611c2f565b8461093985604051806060016040528060258152602001612b5660259139600160006114eb611c2f565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff611e3016565b6033805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106fd5780601f106106d2576101008083540402835291602001916106fd565b336000908152603d602052604090205460ff1615156001146115b15760405162461bcd60e51b815260040161072f9061276c565b6115bb828261223f565b336001600160a01b0316826001600160a01b03167f12d4d764706ce89037b449ff0dea7e084ef851d40ff63edaa38db6f33a581c7f836040516115fe9190612a95565b60405180910390a35050565b600061076e611617611c2f565b8484611d0f565b6034546001600160a01b031633146116485760405162461bcd60e51b815260040161072f906127b0565b6040818155517f898a2c9df7982133daaa8cfd78b8c49c520cba03205eec6480552c19059f6e3a906108b0908390612a95565b6034546001600160a01b031633146116a55760405162461bcd60e51b815260040161072f906127b0565b603a8190556043805460ff191660011790556040517ff3cd0dd9cc1a87f0d8733b9942a8864d40cb15c961b612792723a0a7858dd53d906108b0908390612a95565b60415481565b6034546001600160a01b031633146117175760405162461bcd60e51b815260040161072f906127b0565b603780546001600160a01b03199081166001600160a01b03858116918217909355603b80549092169284169283179091556040517f7bfb3b83b7a634aa3363e0d152007e16be1802bba198a3def769d8c1e4849f5f90600090a35050565b336000908152603d602052604090205460ff1615156001146117a95760405162461bcd60e51b815260040161072f9061276c565b6117b3828261217f565b6001600160a01b038216600081815260446020526040908190204390555133907f69f651718349cff8d0d00acbb3ebb2bf127edbdfc02746168d5e35fb7998b399906115fe908590612a95565b6035546001600160a01b031681565b603854604080516309bf39ed60e01b815290516000926001600160a01b0316916309bf39ed916004808301926020929190829003018186803b15801561185457600080fd5b505afa158015611868573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188c9190612483565b806109635750603760009054906101000a90046001600160a01b03166001600160a01b03166309bf39ed6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118e057600080fd5b505afa1580156118f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109639190612483565b603f5481565b60405481565b600080805b603c548110156119db576119d1603c828154811061194357fe5b6000918252602091829020015460408051639ccabfb560e01b815290516001600160a01b0390921692639ccabfb592600480840193829003018186803b15801561198c57600080fd5b505afa1580156119a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c4919061257e565b839063ffffffff611ff416565b9150600101611929565b50905090565b6034546001600160a01b03163314611a0b5760405162461bcd60e51b815260040161072f906127b0565b6001600160a01b0381166000908152603d602052604090205460ff1615611a445760405162461bcd60e51b815260040161072f906128a5565b603c54602011611a665760405162461bcd60e51b815260040161072f90612913565b6001600160a01b0381166000818152603d6020526040808220805460ff19166001908117909155603c805491820181559092527fc6bb06cb7f92603de181bf256cd16846b93b752a170ff24824098b31aa008a7e90910180546001600160a01b031916909217909155517f73cca62ab1b520c9715bf4e6c71e3e518c754e7148f65102f43289a7df0efea6906108b09083906125b7565b6034546001600160a01b03163314611b275760405162461bcd60e51b815260040161072f906127b0565b6043805460ff19811660ff9182161517918290556040517f558e3ca434dbb046a1200c25235032a55789c63515e8c78f60495063b75e141f92611b6b9216906125e4565b60405180910390a1565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60446020526000908152604090205481565b60006109636001611e5c565b6034546001600160a01b03163314611be85760405162461bcd60e51b815260040161072f906127b0565b604255565b600080611bf861084a565b90506000611c04611924565b90506000611c2183610ec38464e8d4a5100063ffffffff61211316565b935050505090565b603a5481565b3390565b6001600160a01b038316611c595760405162461bcd60e51b815260040161072f90612985565b6001600160a01b038216611c7f5760405162461bcd60e51b815260040161072f90612685565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590611cda908590612a95565b60405180910390a3505050565b600082821115611d095760405162461bcd60e51b815260040161072f90612735565b50900390565b6001600160a01b038316611d355760405162461bcd60e51b815260040161072f90612940565b6001600160a01b038216611d5b5760405162461bcd60e51b815260040161072f90612642565b611d66838383611340565b611da981604051806060016040528060268152602001612ae4602691396001600160a01b038616600090815260208190526040902054919063ffffffff611e3016565b6001600160a01b038085166000908152602081905260408082209390935590841681522054611dde908263ffffffff611ff416565b6001600160a01b0380841660008181526020819052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611cda908590612a95565b60008184841115611e545760405162461bcd60e51b815260040161072f91906125ef565b505050900390565b6039546040805163f245a92f60e01b815290516000928392611ec39260ff600160a01b840416600a0a92610ec39264e8d4a51000926001600160a01b039092169163f245a92f91600480820192602092909190829003018186803b158015610f9557600080fd5b9050600080846001811115611ed457fe5b1415611f6c57603754603b54604051633ddac95360e01b81526001600160a01b0392831692633ddac95392611f159291169064e8d4a51000906004016125cb565b60206040518083038186803b158015611f2d57600080fd5b505afa158015611f41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f65919061257e565b9050611fd3565b6001846001811115611f7a57fe5b1415611fbb57603854603b54604051633ddac95360e01b81526001600160a01b0392831692633ddac95392611f159291169064e8d4a51000906004016125cb565b60405162461bcd60e51b815260040161072f90612a00565b611fec81610ec38464e8d4a5100063ffffffff61211316565b949350505050565b6000828201838110156120195760405162461bcd60e51b815260040161072f906126c7565b9392505050565b6001600160a01b0382166120465760405162461bcd60e51b815260040161072f906128d2565b61205282600083611340565b61209581604051806060016040528060228152602001612ac2602291396001600160a01b038516600090815260208190526040902054919063ffffffff611e3016565b6001600160a01b0383166000908152602081905260409020556002546120c1908263ffffffff611ce716565b6002556040516000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906115fe908590612a95565b600061210d30612297565b15905090565b60008261212257506000610772565b8282028284828161212f57fe5b04146120195760405162461bcd60e51b815260040161072f90612864565b600080821161216e5760405162461bcd60e51b815260040161072f906127df565b81838161217757fe5b049392505050565b6001600160a01b0382166121a55760405162461bcd60e51b815260040161072f90612a5e565b6121b160008383611340565b6002546121c4908263ffffffff611ff416565b6002556001600160a01b0382166000908152602081905260409020546121f0908263ffffffff611ff416565b6001600160a01b0383166000818152602081905260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906115fe908590612a95565b6122498282612020565b61229382612255611c2f565b61093984604051806060016040528060248152602001612b32602491396001600160a01b038816600090815260016020526040812090610912611c2f565b5050565b3b151590565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106122de57805160ff191683800117855561230b565b8280016001018555821561230b579182015b8281111561230b5782518255916020019190600101906122f0565b5061231792915061231b565b5090565b61084e91905b808211156123175760008155600101612321565b80356001600160a01b038116811461077257600080fd5b600082601f83011261235c578081fd5b813567ffffffffffffffff80821115612373578283fd5b604051601f8301601f191681016020018281118282101715612393578485fd5b6040528281529250828483016020018610156123ae57600080fd5b8260208601602083013760006020848301015250505092915050565b6000602082840312156123db578081fd5b6120198383612335565b600080604083850312156123f7578081fd5b6124018484612335565b91506124108460208501612335565b90509250929050565b60008060006060848603121561242d578081fd5b833561243881612aac565b9250602084013561244881612aac565b929592945050506040919091013590565b6000806040838503121561246b578182fd5b6124758484612335565b946020939093013593505050565b600060208284031215612494578081fd5b81518015158114612019578182fd5b600080600080600080600060e0888a0312156124bd578283fd5b873567ffffffffffffffff808211156124d4578485fd5b6124e08b838c0161234c565b985060208a01359150808211156124f5578485fd5b6125018b838c0161234c565b975060408a0135915080821115612516578485fd5b506125238a828b0161234c565b9550506125338960608a01612335565b93506125428960808a01612335565b92506125518960a08a01612335565b915060c0880135905092959891949750929550565b600060208284031215612577578081fd5b5035919050565b60006020828403121561258f578081fd5b5051919050565b6000602082840312156125a7578081fd5b815160ff81168114612019578182fd5b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6000602080835283518082850152825b8181101561261b578581018301518582016040015282016125ff565b8181111561262c5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601d908201527f6164647265737320646f65736e277420657869737420616c7265616479000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526024908201527f4f6e6c7920626420706f6f6c732063616e2063616c6c20746869732066756e636040820152633a34b7b760e11b606082015260800190565b6020808252601590820152742cb7ba9030b932903737ba103a34329037bbb732b960591b604082015260600190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b602080825260139082015272706f6f6c20616c72656164792065786973747360681b604082015260600190565b60208082526021908201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736040820152607360f81b606082015260800190565b6020808252601390820152721c1bdbdb1cc81b1a5b5a5d081c995858da1959606a1b604082015260600190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b6020808252601f908201527f4e6577206f776e65722063616e2774206265207a65726f206164647265737300604082015260600190565b602080825260409082018190527f494e56414c49442050524943452043484f4943452e204e6565647320746f2062908201527f6520656974686572203020284244535441424c4529206f722031202842445829606082015260800190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b90815260200190565b60ff91909116815260200190565b6001600160a01b0381168114610d9657600080fdfe45524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e20616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212204ddbfdb30f4a09725a74c48753a77b2413565b6e899410d7ae7bfa34c2c95a2064736f6c634300060b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.approve(address spender, uint256 amount)"
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."
      },
      "burnFrom(address,uint256)": {
        "details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for `accounts`'s tokens of at least `amount`."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for `sender`'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7042,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7048,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 7050,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 7542,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "__gap",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 492,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "_initialized",
        "offset": 0,
        "slot": "48",
        "type": "t_bool"
      },
      {
        "astId": 495,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "_initializing",
        "offset": 1,
        "slot": "48",
        "type": "t_bool"
      },
      {
        "astId": 3331,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "symbol",
        "offset": 0,
        "slot": "49",
        "type": "t_string_storage"
      },
      {
        "astId": 3333,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "name",
        "offset": 0,
        "slot": "50",
        "type": "t_string_storage"
      },
      {
        "astId": 3335,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "fiat",
        "offset": 0,
        "slot": "51",
        "type": "t_string_storage"
      },
      {
        "astId": 3337,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "owner_address",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 3339,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "bdx_address",
        "offset": 0,
        "slot": "53",
        "type": "t_address"
      },
      {
        "astId": 3341,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "treasury_address",
        "offset": 0,
        "slot": "54",
        "type": "t_address"
      },
      {
        "astId": 3343,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "bdstableWethOracle",
        "offset": 0,
        "slot": "55",
        "type": "t_contract(ICryptoPairOracle)9112"
      },
      {
        "astId": 3345,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "bdxWethOracle",
        "offset": 0,
        "slot": "56",
        "type": "t_contract(ICryptoPairOracle)9112"
      },
      {
        "astId": 3347,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "weth_fiat_pricer",
        "offset": 0,
        "slot": "57",
        "type": "t_contract(IOracleBasedCryptoFiatFeed)9136"
      },
      {
        "astId": 3349,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "weth_fiat_pricer_decimals",
        "offset": 20,
        "slot": "57",
        "type": "t_uint8"
      },
      {
        "astId": 3351,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "global_collateral_ratio_d12",
        "offset": 0,
        "slot": "58",
        "type": "t_uint256"
      },
      {
        "astId": 3353,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "weth_address",
        "offset": 0,
        "slot": "59",
        "type": "t_address"
      },
      {
        "astId": 3356,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "bdstable_pools_array",
        "offset": 0,
        "slot": "60",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3360,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "bdstable_pools",
        "offset": 0,
        "slot": "61",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3362,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "bdStable_step_d12",
        "offset": 0,
        "slot": "62",
        "type": "t_uint256"
      },
      {
        "astId": 3364,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "refresh_cooldown",
        "offset": 0,
        "slot": "63",
        "type": "t_uint256"
      },
      {
        "astId": 3366,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "price_target_d12",
        "offset": 0,
        "slot": "64",
        "type": "t_uint256"
      },
      {
        "astId": 3368,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "price_band_d12",
        "offset": 0,
        "slot": "65",
        "type": "t_uint256"
      },
      {
        "astId": 3371,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "minimumMintRedeemDelayInBlocks",
        "offset": 0,
        "slot": "66",
        "type": "t_uint256"
      },
      {
        "astId": 3373,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "collateral_ratio_paused",
        "offset": 0,
        "slot": "67",
        "type": "t_bool"
      },
      {
        "astId": 3377,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "lastMintByUserBlock",
        "offset": 0,
        "slot": "68",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3379,
        "contract": "contracts/BdStable/BDStable.sol:BDStable",
        "label": "refreshCollateralRatio_last_call_time",
        "offset": 0,
        "slot": "69",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICryptoPairOracle)9112": {
        "encoding": "inplace",
        "label": "contract ICryptoPairOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IOracleBasedCryptoFiatFeed)9136": {
        "encoding": "inplace",
        "label": "contract IOracleBasedCryptoFiatFeed",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}