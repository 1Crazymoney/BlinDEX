{
  "address": "0x9e264Ea1c75da24564c5CD7bF72757071cEB194c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxSpotVsOraclePriceDivergence_d12",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSpotVsOraclePriceDivergence_d12",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeTo",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxSpotVsOraclePriceDivergence_d12",
          "type": "uint256"
        }
      ],
      "name": "setMaxSpotVsOraclePriceDivergence_d12",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x116266f2c6081a35395d3dd2ad12412de516c6e971868bd64b0dd05705feb5c1",
  "receipt": {
    "to": null,
    "from": "0x774289Cb40c98B4f5b64a152BF7e5F94Fee38669",
    "contractAddress": "0x9e264Ea1c75da24564c5CD7bF72757071cEB194c",
    "transactionIndex": 0,
    "gasUsed": "4247396",
    "logsBloom": "0x
    "blockHash": "0x249b0d27cebe088a76282b89ff351c5e4d2bae052f98f87e996e21f83736b3c8",
    "transactionHash": "0x116266f2c6081a35395d3dd2ad12412de516c6e971868bd64b0dd05705feb5c1",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3805030,
        "transactionHash": "0x116266f2c6081a35395d3dd2ad12412de516c6e971868bd64b0dd05705feb5c1",
        "address": "0x9e264Ea1c75da24564c5CD7bF72757071cEB194c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000774289cb40c98b4f5b64a152bf7e5f94fee38669"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x249b0d27cebe088a76282b89ff351c5e4d2bae052f98f87e996e21f83736b3c8"
      }
    ],
    "blockNumber": 3805030,
    "cumulativeGasUsed": "4247396",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x13Cb548287fde6931fA7782CcaB9772c858EFB99",
    10000000000
  ],
  "solcInputHash": "964b643a9886544e5729090027eb9ffb",
  "metadata": "{\"compiler\":{\"version\":\"0.6.11+commit.5ef660b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxSpotVsOraclePriceDivergence_d12\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSpotVsOraclePriceDivergence_d12\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSpotVsOraclePriceDivergence_d12\",\"type\":\"uint256\"}],\"name\":\"setMaxSpotVsOraclePriceDivergence_d12\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Uniswap/UniswapV2Factory.sol\":\"UniswapV2Factory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/Math/Babylonian.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\n// computes square roots using the babylonian method\\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\\nlibrary Babylonian {\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n        // else z = 0\\n    }\\n}\",\"keccak256\":\"0xa1e89976edb3fd1bbace40d41cbc3cc077544130213115d1d8f1bb33febeeb7d\",\"license\":\"MIT\"},\"contracts/Math/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\nimport './Babylonian.sol';\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // range: [0, 2**144 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq144x112 {\\n        uint _x;\\n    }\\n\\n    uint8 private constant RESOLUTION = 112;\\n    uint private constant Q112 = uint(1) << RESOLUTION;\\n    uint private constant Q224 = Q112 << RESOLUTION;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\\n        return uq112x112(uint224(x) << RESOLUTION);\\n    }\\n\\n    // encodes a uint144 as a UQ144x112\\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\\n        return uq144x112(uint256(x) << RESOLUTION);\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\\n        require(x != 0, 'FixedPoint: DIV_BY_ZERO');\\n        return uq112x112(self._x / uint224(x));\\n    }\\n\\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\\n    // reverts on overflow\\n    function mul(uq112x112 memory self, uint y) internal pure returns (uq144x112 memory) {\\n        uint z;\\n        require(y == 0 || (z = uint(self._x) * y) / y == uint(self._x), \\\"FixedPoint: MULTIPLICATION_OVERFLOW\\\");\\n        return uq144x112(z);\\n    }\\n\\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\\n    // equivalent to encode(numerator).div(denominator)\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\n        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\\n    }\\n\\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\\n        return uint144(self._x >> RESOLUTION);\\n    }\\n\\n    // take the reciprocal of a UQ112x112\\n    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        require(self._x != 0, 'FixedPoint: ZERO_RECIPROCAL');\\n        return uq112x112(uint224(Q224 / self._x));\\n    }\\n\\n    // square root of a UQ112x112\\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x)) << 56));\\n    }\\n}\",\"keccak256\":\"0x07984ef65b9a050fb37357afb0da79c7b0c5e76b6ef1670bd54cc879e8805e47\",\"license\":\"MIT\"},\"contracts/Math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\",\"keccak256\":\"0xedbfa18a7b17763dce7a0972726cc169a463122d28f2bbe431551891c7e7dcb8\",\"license\":\"MIT\"},\"contracts/Math/UQ112x112.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\",\"keccak256\":\"0xc3ae9a644f07406362cd004d966d4e7b61b895045f59e11c1ac258b29783b567\",\"license\":\"MIT\"},\"contracts/Oracle/ICryptoPairOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\ninterface ICryptoPairOracle {\\n    \\n    function consult(address tokenIn, uint256 amountIn)\\n        external\\n        view\\n        returns (uint amountOut);\\n\\n    function updateOracle() external;\\n\\n    function shouldUpdateOracle() external view returns (bool);\\n\\n    function when_should_update_oracle_in_seconds() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2b26edbf96b91272223e45f2268b0c85728b1596b580823e3fe5f0f98ebb1395\",\"license\":\"MIT\"},\"contracts/Uniswap/Interfaces/IUniswapV2Callee.sol\":{\"content\":\"// SPDX-License-Identifier: GNU General Public License v3.0\\n// Based on https://github.com/Uniswap/v2-core\\n\\npragma solidity 0.6.11;\\n\\ninterface IUniswapV2Callee {\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x29429d32869ac7d86f62124c31d72efdf965ea5157c22a2b3ce803b350ed5c22\",\"license\":\"GNU General Public License v3.0\"},\"contracts/Uniswap/Interfaces/IUniswapV2ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GNU General Public License v3.0\\n// Based on https://github.com/Uniswap/v2-core\\n\\npragma solidity 0.6.11;\\n\\ninterface IUniswapV2ERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0x81f6a49c10cf7f4594a87b4e8a6366a3a157075c4549df7b96e42aadf99373a7\",\"license\":\"GNU General Public License v3.0\"},\"contracts/Uniswap/Interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GNU General Public License v3.0\\n// Based on https://github.com/Uniswap/v2-core\\n\\npragma solidity 0.6.11;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function treasury() external view returns (address);\\n    function maxSpotVsOraclePriceDivergence_d12() external view returns (uint256);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setTreasury(address) external;\\n    function setMaxSpotVsOraclePriceDivergence_d12(uint256) external;\\n}\\n\",\"keccak256\":\"0xfe4dbe7f267aad26dfce2b97b0a56b7962468d18c2726b0c3aa31bd3d0f5b764\",\"license\":\"GNU General Public License v3.0\"},\"contracts/Uniswap/Interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GNU General Public License v3.0\\n// Based on https://github.com/Uniswap/v2-core\\n\\npragma solidity 0.6.11;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0xfc7c8b3fac5ef60d5227015879082bc21912661e75147f92379a0442eabf600b\",\"license\":\"GNU General Public License v3.0\"},\"contracts/Uniswap/UniswapV2ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GNU General Public License v3.0\\n// Based on https://github.com/Uniswap/v2-core\\n\\npragma solidity 0.6.11;\\n\\nimport './Interfaces/IUniswapV2ERC20.sol';\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract UniswapV2ERC20 is IUniswapV2ERC20 {\\n    using SafeMath for uint;\\n\\n    string public override constant name = 'Blindex Swap';\\n    string public override constant symbol = 'BDSWAP';\\n    uint8 public override constant decimals = 18;\\n    uint  public override totalSupply;\\n    mapping(address => uint) public override balanceOf;\\n    mapping(address => mapping(address => uint)) public override allowance;\\n\\n    bytes32 public override DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant override PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint) public override nonces;\\n\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    constructor() public {\\n        uint chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n                keccak256(bytes(name)),\\n                keccak256(bytes('1')),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function _mint(address to, uint value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(address owner, address spender, uint value) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(address from, address to, uint value) private {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint value) external override returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint value) external override returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint value) external override returns (bool) {\\n        if (allowance[from][msg.sender] != uint(-1)) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external override {\\n        require(deadline >= block.timestamp, 'UniswapV2: EXPIRED');\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                '\\\\x19\\\\x01',\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'UniswapV2: INVALID_SIGNATURE');\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0x1448a272004cce8973d3c1a424abc051ad9e03bd756c0ebc14fbce4f7ed193f0\",\"license\":\"GNU General Public License v3.0\"},\"contracts/Uniswap/UniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GNU General Public License v3.0\\n// Based on https://github.com/Uniswap/v2-core\\n\\npragma solidity 0.6.11;\\n\\nimport './Interfaces/IUniswapV2Factory.sol';\\nimport './UniswapV2Pair.sol';\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract UniswapV2Factory is IUniswapV2Factory, Ownable {\\n    address public override feeTo;\\n    address public override treasury;\\n    uint256 public override maxSpotVsOraclePriceDivergence_d12;\\n\\n    mapping(address => mapping(address => address)) public override getPair;\\n    address[] public override allPairs;\\n\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    constructor(address _treasury, uint256 _maxSpotVsOraclePriceDivergence_d12) public {\\n        treasury = _treasury;\\n        maxSpotVsOraclePriceDivergence_d12 = _maxSpotVsOraclePriceDivergence_d12;\\n    }\\n\\n    function allPairsLength() external override view returns (uint) {\\n        return allPairs.length;\\n    }\\n\\n    function createPair(address tokenA, address tokenB) external override returns (address pair) {\\n        require(tokenA != tokenB, 'UniswapV2: IDENTICAL_ADDRESSES');\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'UniswapV2: ZERO_ADDRESS');\\n        require(getPair[token0][token1] == address(0), 'UniswapV2: PAIR_EXISTS'); // single check is sufficient\\n        bytes memory bytecode = abi.encodePacked(\\n            type(UniswapV2Pair).creationCode,\\n            abi.encode(owner()),\\n            abi.encode(treasury));\\n\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n\\n        // This creates a new contract\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        IUniswapV2Pair(pair).initialize(token0, token1);\\n        getPair[token0][token1] = pair;\\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\\n        allPairs.push(pair);\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n    }\\n\\n    function setFeeTo(address _feeTo) external override onlyOwner {\\n        feeTo = _feeTo;\\n    }\\n\\n    function setTreasury(address _treasury) external override onlyOwner {\\n        treasury = _treasury;\\n    }\\n\\n    function setMaxSpotVsOraclePriceDivergence_d12(uint256 _maxSpotVsOraclePriceDivergence_d12) external override onlyOwner {\\n        maxSpotVsOraclePriceDivergence_d12 = _maxSpotVsOraclePriceDivergence_d12;\\n    }\\n}\\n\",\"keccak256\":\"0xc07e7eff2f58cc90376ba963828eaa88c888903b8b04d02eb7c247ae0d812ad3\",\"license\":\"GNU General Public License v3.0\"},\"contracts/Uniswap/UniswapV2OracleLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GNU General Public License v3.0\\n// Based on https://github.com/Uniswap/v2-core\\n\\npragma solidity 0.6.11;\\n\\nimport '../Uniswap/Interfaces/IUniswapV2Pair.sol';\\nimport '../Math/FixedPoint.sol';\\n\\n// library with helper methods for oracles that are concerned with computing average prices\\nlibrary UniswapV2OracleLibrary {\\n    using FixedPoint for *;\\n\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        return uint32(block.timestamp % 2 ** 32);\\n    }\\n\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices(\\n        address pair\\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\n        blockTimestamp = currentBlockTimestamp();\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\n        if (blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n            // addition overflow is desired\\n            // counterfactual\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\n            // counterfactual\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\n        }\\n    }\\n}\",\"keccak256\":\"0xaa88a697713d267138b912eb0ab71660f529de2703b1996923a90ba466a09836\",\"license\":\"GNU General Public License v3.0\"},\"contracts/Uniswap/UniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GNU General Public License v3.0\\n// Based on https://github.com/Uniswap/v2-core\\n\\npragma solidity 0.6.11;\\n\\n\\nimport './Interfaces/IUniswapV2Pair.sol';\\nimport './UniswapV2ERC20.sol';\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../Math/Math.sol\\\";\\nimport '../Math/UQ112x112.sol';\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport '../Math/FixedPoint.sol';\\nimport './Interfaces/IUniswapV2Factory.sol';\\nimport './Interfaces/IUniswapV2Callee.sol';\\nimport './Interfaces/IUniswapV2Factory.sol';\\nimport '../Oracle/ICryptoPairOracle.sol';\\nimport './UniswapV2OracleLibrary.sol';\\n\\ncontract UniswapV2Pair is IUniswapV2Pair, ICryptoPairOracle {\\n    using FixedPoint for *;\\n    using SafeMath  for uint;\\n    using UQ112x112 for uint224;\\n\\n    string public override constant name = 'Blindex Swap';\\n    string public override constant symbol = 'BDSWAP';\\n    uint8 public override constant decimals = 18;\\n    uint  public override totalSupply;\\n    mapping(address => uint) public override balanceOf;\\n    mapping(address => mapping(address => uint)) public override allowance;\\n\\n    uint public override constant MINIMUM_LIQUIDITY = 10**3;\\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\\n    bytes32 public override DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant override PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint) public override nonces;\\n\\n    address public override factory;\\n    address public override token0;\\n    address public override token1;\\n\\n    uint112 internal reserve0;           // uses single storage slot, accessible via getReserves\\n    uint112 internal reserve1;           // uses single storage slot, accessible via getReserves\\n    uint32  internal blockTimestampLast; // uses single storage slot, accessible via getReserves\\n\\n    uint public override price0CumulativeLast;\\n    uint public override price1CumulativeLast;\\n    uint public override kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\n\\n    uint public period = 3600; // 1 hour TWAP (time-weighted average price)\\n    uint public consultLatency = 120; // Used for being able to consult past the period end\\n    uint public shouldUpdateMargin = 60; // on minute\\n    bool public allowStaleConsult = false; // If false, consult() will fail if the TWAP is stale\\n    FixedPoint.uq112x112 public price0AverageOracle;\\n    FixedPoint.uq112x112 public price1AverageOracle;\\n    uint    public price0CumulativeLastOracle;\\n    uint    public price1CumulativeLastOracle;\\n    uint32  public blockTimestampLastOracle;\\n\\n    mapping(address => uint256) public lastSwapByUserOut0;\\n    mapping(address => uint256) public lastSwapByUserOut1;\\n\\n    uint256 minimumSwapsDelayInBlocks = 0;\\n\\n    address public owner_address;\\n    address public treasury_address;\\n\\n    uint private unlocked = 1;\\n    modifier lock() {\\n        require(unlocked == 1, 'UniswapV2: LOCKED');\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    function getReserves() public override view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    function _safeTransfer(address token, address to, uint value) private {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'UniswapV2: TRANSFER_FAILED');\\n    }\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    constructor(address _owner_address, address _treasury_address) public {\\n        factory = msg.sender;\\n\\n        owner_address = _owner_address;\\n        treasury_address = _treasury_address;\\n    }\\n\\n    // called once by the factory at time of deployment\\n    function initialize(address _token0, address _token1) external override {\\n        require(msg.sender == factory, 'UniswapV2: FORBIDDEN'); // sufficient check\\n        token0 = _token0;\\n        token1 = _token1;\\n    }\\n\\n    // update reserves and, on the first call per block, price accumulators\\n    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) virtual internal {\\n        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'UniswapV2: OVERFLOW');\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            // * never overflows, and + overflow is desired\\n            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\\n            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\\n        }\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n        blockTimestampLast = blockTimestamp;\\n\\n        updateOracle();\\n\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\\n        address feeTo = IUniswapV2Factory(factory).feeTo();\\n        feeOn = feeTo != address(0);\\n        uint _kLast = kLast; // gas savings\\n        if (feeOn) {\\n            if (_kLast != 0) {\\n                uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));\\n                uint rootKLast = Math.sqrt(_kLast);\\n                if (rootK > rootKLast) {\\n                    uint numerator = totalSupply.mul(rootK.sub(rootKLast));\\n                    uint denominator = rootK.mul(5).add(rootKLast);\\n                    uint liquidity = numerator / denominator;\\n                    if (liquidity > 0) _mint(feeTo, liquidity);\\n                }\\n            }\\n        } else if (_kLast != 0) {\\n            kLast = 0;\\n        }\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function mint(address to) external override lock returns (uint liquidity) {\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        uint balance0 = IERC20(token0).balanceOf(address(this));\\n        uint balance1 = IERC20(token1).balanceOf(address(this));\\n\\n        uint amount0 = balance0.sub(_reserve0);\\n        uint amount1 = balance1.sub(_reserve1);\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n\\n        if (_totalSupply == 0) {\\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\n           _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\\n        }\\n\\n        require(liquidity > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED');\\n        _mint(to, liquidity);\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n\\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function burn(address to) external override lock returns (uint amount0, uint amount1) {\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        address _token0 = token0;                                // gas savings\\n        address _token1 = token1;                                // gas savings\\n        uint balance0 = IERC20(_token0).balanceOf(address(this));\\n        uint balance1 = IERC20(_token1).balanceOf(address(this));\\n        uint liquidity = balanceOf[address(this)];\\n\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n        require(amount0 > 0 && amount1 > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED');\\n        _burn(address(this), liquidity);\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external override lock {\\n        require(amount0Out > 0 || amount1Out > 0, 'UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT');\\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'UniswapV2: INSUFFICIENT_LIQUIDITY');\\n\\n        uint balance0;\\n        uint balance1;\\n\\n        {\\n            require(to != token0 && to != token1, 'UniswapV2: INVALID_TO');\\n\\n            if (amount0Out > 0) {\\n                if(block.number.sub(lastSwapByUserOut1[to]) < minimumSwapsDelayInBlocks) {\\n                    _safeTransfer(token0, to, amount0Out.div(10)); // optimistically transfer tokens\\n                    _safeTransfer(token0, treasury_address, amount0Out.mul(9).div(10)); // optimistically transfer tokens\\n                } else {\\n                    _safeTransfer(token0, to, amount0Out); // optimistically transfer tokens\\n                }\\n\\n                lastSwapByUserOut0[to] = block.number;\\n            }\\n\\n            if (amount1Out > 0) {\\n                if(block.number.sub(lastSwapByUserOut0[to]) < minimumSwapsDelayInBlocks){\\n                    _safeTransfer(token1, to, amount1Out.div(10)); // optimistically transfer tokens\\n                    _safeTransfer(token1, treasury_address, amount1Out.mul(9).div(10)); // optimistically transfer tokens\\n                } else {\\n                    _safeTransfer(token1, to, amount1Out); // optimistically transfer tokens\\n                }\\n\\n                lastSwapByUserOut1[to] = block.number;\\n            }\\n\\n            if (data.length > 0) IUniswapV2Callee(to).uniswapV2Call(msg.sender, amount0Out, amount1Out, data);\\n            balance0 = IERC20(token0).balanceOf(address(this));\\n            balance1 = IERC20(token1).balanceOf(address(this));\\n        }\\n        \\n        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n        require(amount0In > 0 || amount1In > 0, 'UniswapV2: INSUFFICIENT_INPUT_AMOUNT');\\n\\n        { // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n            uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\\n            uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\\n            require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000**2), 'UniswapV2: K');\\n        }\\n\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    }\\n\\n    // force balances to match reserves\\n    function skim(address to) external override lock {\\n        address _token0 = token0; // gas savings\\n        address _token1 = token1; // gas savings\\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\\n    }\\n\\n    // force reserves to match balances\\n    function sync() external override lock {\\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\\n    }\\n\\n\\n\\n    // Migrated over from UniswapV2ERC20. Needed for ^0.6.11\\n    // ===============================================\\n\\n    function _mint(address to, uint value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint value) internal {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(address owner, address spender, uint value) private {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(address from, address to, uint value) private {\\n        balanceOf[from] = balanceOf[from].sub(value);\\n        balanceOf[to] = balanceOf[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function approve(address spender, uint value) external override returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint value) external override returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint value) external override returns (bool) {\\n        if (allowance[from][msg.sender] != uint(-1)) {\\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n        }\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external override {\\n        require(deadline >= block.timestamp, 'UniswapV2: EXPIRED');\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                '\\\\x19\\\\x01',\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'UniswapV2: INVALID_SIGNATURE');\\n        _approve(owner, spender, value);\\n    }\\n\\n    function setOwner_address(address _owner_address) external onlyByOwner {\\n        owner_address = _owner_address;\\n    }\\n\\n    function setTreasury_address(address _treasury_address) external onlyByOwner {\\n        treasury_address = _treasury_address;\\n    }\\n\\n    function setMinimumSwapsDelayInBlocks(uint256 _minimumSwapsDelayInBlocks) external onlyByOwner{\\n        minimumSwapsDelayInBlocks = _minimumSwapsDelayInBlocks;\\n    }\\n\\n    function setPeriod(uint _period) external onlyByOwner {\\n        period = _period;\\n    }\\n\\n    function setConsultLeniency(uint _consult_leniency) external onlyByOwner {\\n        consultLatency = _consult_leniency;\\n    }\\n\\n    function setOracleShuldUpdateMargin(uint _should_update_margin) external onlyByOwner {\\n        shouldUpdateMargin = _should_update_margin;\\n    }\\n\\n    function setAllowStaleConsults(bool _allow_stale_consults) external onlyByOwner {\\n        allowStaleConsult = _allow_stale_consults;\\n    }\\n\\n    function updateOracle() public override {\\n        uint32 blockTimestamp = UniswapV2OracleLibrary.currentBlockTimestamp();\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLastOracle; // Overflow is desired\\n\\n        if(timeElapsed >= period || msg.sender == owner_address) {\\n            uint price0Cumulative = price0CumulativeLast;\\n            uint price1Cumulative = price1CumulativeLast;\\n\\n            if (blockTimestampLast != blockTimestamp) {\\n                // This if (coppied form original UniswapV2OracleLibrary) handles the case\\n                // when oracle update is called some time after swap update this compensates \\n                // for the elapsed time.\\n                // Execution only enters this if when update oracle is called manually\\n                // when called as a part of minting, redeeming, swapping, etc., this if is skipped.\\n                // Which is fine since in the cases above happen in the same blocka as oracle\\n                // update, so there is nothing to compensate for.\\n\\n                // subtraction overflow is desired\\n                uint32 timeElapsedInner = blockTimestamp - blockTimestampLast;\\n                // addition overflow is desired\\n                // counterfactual\\n                price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsedInner;\\n                // counterfactual\\n                price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsedInner;\\n            }\\n\\n            price0AverageOracle = FixedPoint.uq112x112(uint224((price0Cumulative - price0CumulativeLastOracle) / timeElapsed));\\n            price1AverageOracle = FixedPoint.uq112x112(uint224((price1Cumulative - price1CumulativeLastOracle) / timeElapsed));\\n\\n            price0CumulativeLastOracle = price0Cumulative;\\n            price1CumulativeLastOracle = price1Cumulative;\\n            blockTimestampLastOracle = blockTimestamp;\\n        }\\n    }\\n\\n    function when_should_update_oracle_in_seconds() external view override returns (uint256) {\\n        uint256 blockTimestamp = UniswapV2OracleLibrary.currentBlockTimestamp();\\n        \\n        uint256 timeElapsed = blockTimestamp <= blockTimestampLastOracle\\n            ? 0\\n            : blockTimestamp - blockTimestampLastOracle;\\n\\n        uint256 interval = period + consultLatency - shouldUpdateMargin;\\n\\n        return interval < timeElapsed\\n            ? 0\\n            : interval - timeElapsed;\\n    }\\n\\n    function shouldUpdateOracle() public view override returns (bool) {\\n        uint256 blockTimestamp = UniswapV2OracleLibrary.currentBlockTimestamp();\\n        uint256 timeElapsed = blockTimestamp - blockTimestampLastOracle; // Overflow is desired\\n\\n        if((timeElapsed < (period + consultLatency - shouldUpdateMargin)) || allowStaleConsult || reserve0 == 0 || reserve1 == 0){\\n            return false;\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    // Note this will always return 0 before update has been called successfully for the first time.\\n    function consult(address token, uint256 amountIn) external view override returns (uint256 amountOut) {\\n        uint256 blockTimestamp = UniswapV2OracleLibrary.currentBlockTimestamp();\\n        uint256 timeElapsed = blockTimestamp - blockTimestampLastOracle; // Overflow is desired\\n\\n        // Ensure that the price is not stale\\n        require((timeElapsed < (period + consultLatency)) || allowStaleConsult,\\n                'UniswapV2Pair Oracle: PRICE_IS_STALE_NEED_TO_CALL_UPDATE');\\n\\n        if (token == token0) {\\n            amountOut = price0AverageOracle.mul(amountIn).decode144();\\n        } else {\\n            require(token == token1, 'UniswapV2Pair Oracle: INVALID_TOKEN');\\n            amountOut = price1AverageOracle.mul(amountIn).decode144();\\n        }\\n    }\\n\\n    modifier onlyByOwner() {\\n        require(msg.sender == owner_address, \\\"You are not an owner\\\");\\n        _;\\n    }\\n\\n}\",\"keccak256\":\"0x643a5458dcca25c259e297d22c711b6630bd4aedd1ced0cb79d9c5eda24d0556\",\"license\":\"GNU General Public License v3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051613d14380380613d148339818101604052604081101561003357600080fd5b508051602090910151600061004f6001600160e01b036100c216565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600280546001600160a01b0319166001600160a01b0393909316929092179091556003556100c6565b3390565b613c3f806100d56000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638aa6d2cf1161008c578063e6a4390511610066578063e6a439051461019c578063f0f44260146101ca578063f2fde38b146101f0578063f46901ed14610216576100cf565b80638aa6d2cf1461015e5780638da5cb5b14610166578063c9c653961461016e576100cf565b8063017e7e58146100d45780631e3dd18b146100f857806346346a1214610115578063574f2ba31461013457806361d027b31461014e578063715018a614610156575b600080fd5b6100dc61023c565b604080516001600160a01b039092168252519081900360200190f35b6100dc6004803603602081101561010e57600080fd5b503561024b565b6101326004803603602081101561012b57600080fd5b5035610272565b005b61013c6102d9565b60408051918252519081900360200190f35b6100dc6102df565b6101326102ee565b61013c61039a565b6100dc6103a0565b6100dc6004803603604081101561018457600080fd5b506001600160a01b03813581169160200135166103af565b6100dc600480360360408110156101b257600080fd5b506001600160a01b0381358116916020013516610805565b610132600480360360208110156101e057600080fd5b50356001600160a01b031661082b565b6101326004803603602081101561020657600080fd5b50356001600160a01b03166108af565b6101326004803603602081101561022c57600080fd5b50356001600160a01b03166109b1565b6001546001600160a01b031681565b6005818154811061025857fe5b6000918252602090912001546001600160a01b0316905081565b61027a610a35565b6001600160a01b031661028b6103a0565b6001600160a01b0316146102d4576040805162461bcd60e51b81526020600482018190526024820152600080516020613bea833981519152604482015290519081900360640190fd5b600355565b60055490565b6002546001600160a01b031681565b6102f6610a35565b6001600160a01b03166103076103a0565b6001600160a01b031614610350576040805162461bcd60e51b81526020600482018190526024820152600080516020613bea833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60035481565b6000546001600160a01b031690565b6000816001600160a01b0316836001600160a01b03161415610418576040805162461bcd60e51b815260206004820152601e60248201527f556e697377617056323a204944454e544943414c5f4144445245535345530000604482015290519081900360640190fd5b600080836001600160a01b0316856001600160a01b03161061043b57838561043e565b84845b90925090506001600160a01b03821661049e576040805162461bcd60e51b815260206004820152601760248201527f556e697377617056323a205a45524f5f41444452455353000000000000000000604482015290519081900360640190fd5b6001600160a01b03828116600090815260046020908152604080832085851684529091529020541615610511576040805162461bcd60e51b8152602060048201526016602482015275556e697377617056323a20504149525f45584953545360501b604482015290519081900360640190fd5b60606040518060200161052390610a39565b601f1982820381018352601f9091011660405261053e6103a0565b604080516001600160a01b0392831660208083019190915282518083038201815282840184526002549094166060808401919091528351808403909101815260808301909352845160a09092019182918601908083835b602083106105b45780518252601f199092019160209182019101610595565b51815160209384036101000a600019018019909216911617905286519190930192860191508083835b602083106105fc5780518252601f1990920191602091820191016105dd565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b602083106106445780518252601f199092019160209182019101610625565b51815160209384036101000a60001901801990921691161790526040805192909401828103601f1901835280855260608c811b6bffffffffffffffffffffffff1990811683850152908c901b16603482015284518082036028018152604890910190945283519381019390932081519198509650869550935050850190506000f56040805163485cc95560e01b81526001600160a01b038781166004830152868116602483015291519297509087169163485cc9559160448082019260009290919082900301818387803b15801561071b57600080fd5b505af115801561072f573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526004602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560058054600181018255958190527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db090950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b60046020908152600092835260408084209091529082529020546001600160a01b031681565b610833610a35565b6001600160a01b03166108446103a0565b6001600160a01b03161461088d576040805162461bcd60e51b81526020600482018190526024820152600080516020613bea833981519152604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6108b7610a35565b6001600160a01b03166108c86103a0565b6001600160a01b031614610911576040805162461bcd60e51b81526020600482018190526024820152600080516020613bea833981519152604482015290519081900360640190fd5b6001600160a01b0381166109565760405162461bcd60e51b8152600401808060200182810382526026815260200180613bc46026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6109b9610a35565b6001600160a01b03166109ca6103a0565b6001600160a01b031614610a13576040805162461bcd60e51b81526020600482018190526024820152600080516020613bea833981519152604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b61317d80610a478339019056fe6080604052610e10600c556078600d55603c600e55600f805460ff1916905560006017556001601a5534801561003457600080fd5b5060405161317d38038061317d8339818101604052604081101561005757600080fd5b508051602090910151600580546001600160a01b03199081163317909155601880546001600160a01b03948516908316179055601980549390921692169190911790556130d4806100a96000396000f3fe608060405234801561001057600080fd5b50600436106102f15760003560e01c80635bef6a5f1161019d578063ba9a7a56116100e9578063d505accf116100a2578063eef772f21161007c578063eef772f2146108bb578063ef78d4fd146108d8578063f1551aea146108e0578063fff6cae9146108ff576102f1565b8063d505accf14610834578063d6f124f014610885578063dd62ed3e1461088d576102f1565b8063ba9a7a56146107d1578063bc25cf77146107d9578063c3ce111d146107ff578063c45a01551461081c578063d072c68b14610824578063d21220a71461082c576102f1565b806380edef8e1161015657806395d89b411161013057806395d89b411461078d5780639de12e2914610795578063a367e27d1461079d578063a9059cbb146107a5576102f1565b806380edef8e1461073e57806386f9e91d1461074657806389afcb441461074e576102f1565b80635bef6a5f146106865780635cb9a714146106a75780636a627842146106c457806370a08231146106ea5780637464fc3d146107105780637ecebe0014610718576102f1565b8063185bec681161025c57806334dd1c8811610215578063405ce1be116101ef578063405ce1be14610640578063485cc955146106485780635909c0d5146106765780635a3d54931461067e576102f1565b806334dd1c88146105e65780633644e5151461060c5780633ddac95314610614576102f1565b8063185bec6814610536578063193fd1851461055c5780631e5a209e1461058257806323b872dd1461058a57806330adf81f146105c0578063313ce567146105c8576102f1565b8063095ea7b3116102ae578063095ea7b31461049d57806309bf39ed146104dd5780630ccec97a146104e55780630dfe1681146104ed5780630f3a9f651461051157806318160ddd1461052e576102f1565b8063022c0d9f146102f657806302fe80581461038457806305585f991461039e57806306fdde03146103c257806308acfd2e1461043f5780630902f1ac14610465575b600080fd5b6103826004803603608081101561030c57600080fd5b8135916020810135916001600160a01b03604083013516919081019060808101606082013564010000000081111561034357600080fd5b82018360208201111561035557600080fd5b8035906020019184600183028401116401000000008311171561037757600080fd5b509092509050610907565b005b61038c610faa565b60408051918252519081900360200190f35b6103a6610fb0565b604080516001600160e01b039092168252519081900360200190f35b6103ca610fbf565b6040805160208082528351818301528351919283929083019185019080838360005b838110156104045781810151838201526020016103ec565b50505050905090810190601f1680156104315780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103826004803603602081101561045557600080fd5b50356001600160a01b0316610fe7565b61046d61105f565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b6104c9600480360360408110156104b357600080fd5b506001600160a01b038135169060200135611089565b604080519115158252519081900360200190f35b6104c96110a0565b61038c611124565b6104f5611185565b604080516001600160a01b039092168252519081900360200190f35b6103826004803603602081101561052757600080fd5b5035611194565b61038c6111ef565b61038c6004803603602081101561054c57600080fd5b50356001600160a01b03166111f5565b6103826004803603602081101561057257600080fd5b50356001600160a01b0316611207565b61038c61127f565b6104c9600480360360608110156105a057600080fd5b506001600160a01b03813581169160208101359091169060400135611285565b61038c61131f565b6105d0611343565b6040805160ff9092168252519081900360200190f35b61038c600480360360208110156105fc57600080fd5b50356001600160a01b0316611348565b61038c61135a565b61038c6004803603604081101561062a57600080fd5b506001600160a01b038135169060200135611360565b6103a66114b5565b6103826004803603604081101561065e57600080fd5b506001600160a01b03813581169160200135166114c4565b61038c611548565b61038c61154e565b61068e611554565b6040805163ffffffff9092168252519081900360200190f35b610382600480360360208110156106bd57600080fd5b5035611560565b61038c600480360360208110156106da57600080fd5b50356001600160a01b03166115bb565b61038c6004803603602081101561070057600080fd5b50356001600160a01b03166118bb565b61038c6118cd565b61038c6004803603602081101561072e57600080fd5b50356001600160a01b03166118d3565b6104f56118e5565b61038c6118f4565b6107746004803603602081101561076457600080fd5b50356001600160a01b03166118fa565b6040805192835260208301919091528051918290030190f35b6103ca611ca0565b61038c611cc2565b6104f5611cc8565b6104c9600480360360408110156107bb57600080fd5b506001600160a01b038135169060200135611cd7565b61038c611ce4565b610382600480360360208110156107ef57600080fd5b50356001600160a01b0316611cea565b6103826004803603602081101561081557600080fd5b5035611e50565b6104f5611eab565b6104c9611eba565b6104f5611ec3565b610382600480360360e081101561084a57600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135611ed2565b6103826120d4565b61038c600480360360408110156108a357600080fd5b506001600160a01b0381358116916020013516612261565b610382600480360360208110156108d157600080fd5b503561227e565b61038c6122d9565b610382600480360360208110156108f657600080fd5b503515156122df565b610382612348565b601a54600114610952576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000601a55841515806109655750600084115b6109a05760405162461bcd60e51b8152600401808060200182810382526025815260200180612f466025913960400191505060405180910390fd5b6000806109ab61105f565b5091509150816001600160701b0316871080156109d05750806001600160701b031686105b610a0b5760405162461bcd60e51b8152600401808060200182810382526021815260200180612fb26021913960400191505060405180910390fd5b60065460009081906001600160a01b03888116911614801590610a3c57506007546001600160a01b03888116911614155b610a85576040805162461bcd60e51b8152602060048201526015602482015274556e697377617056323a20494e56414c49445f544f60581b604482015290519081900360640190fd5b8815610b56576017546001600160a01b038816600090815260166020526040902054610ab890439063ffffffff6124aa16565b1015610b2357600654610ae5906001600160a01b031688610ae08c600a63ffffffff61250716565b61256e565b600654601954610b1e916001600160a01b039081169116610ae0600a610b128e600963ffffffff61270816565b9063ffffffff61250716565b610b3a565b600654610b3a906001600160a01b0316888b61256e565b6001600160a01b03871660009081526015602052604090204390555b8715610c16576017546001600160a01b038816600090815260156020526040902054610b8990439063ffffffff6124aa16565b1015610be357600754610bb1906001600160a01b031688610ae08b600a63ffffffff61250716565b600754601954610bde916001600160a01b039081169116610ae0600a610b128d600963ffffffff61270816565b610bfa565b600754610bfa906001600160a01b0316888a61256e565b6001600160a01b03871660009081526016602052604090204390555b8415610cd157866001600160a01b03166310d1e85c338b8b8a8a6040518663ffffffff1660e01b815260040180866001600160a01b03166001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b158015610cb857600080fd5b505af1158015610ccc573d6000803e3d6000fd5b505050505b600654604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610d1c57600080fd5b505afa158015610d30573d6000803e3d6000fd5b505050506040513d6020811015610d4657600080fd5b5051600754604080516370a0823160e01b815230600482015290519294506001600160a01b03909116916370a0823191602480820192602092909190829003018186803b158015610d9657600080fd5b505afa158015610daa573d6000803e3d6000fd5b505050506040513d6020811015610dc057600080fd5b5051905060006001600160701b0385168a90038311610de0576000610def565b89856001600160701b03160383035b9050600089856001600160701b0316038311610e0c576000610e1b565b89856001600160701b03160383035b90506000821180610e2c5750600081115b610e675760405162461bcd60e51b8152600401808060200182810382526024815260200180612f6b6024913960400191505060405180910390fd5b6000610e9b610e7d84600363ffffffff61270816565b610e8f876103e863ffffffff61270816565b9063ffffffff6124aa16565b90506000610eb3610e7d84600363ffffffff61270816565b9050610ee4620f4240610ed86001600160701b038b8116908b1663ffffffff61270816565b9063ffffffff61270816565b610ef4838363ffffffff61270816565b1015610f36576040805162461bcd60e51b815260206004820152600c60248201526b556e697377617056323a204b60a01b604482015290519081900360640190fd5b5050610f4484848888612768565b60408051838152602081018390528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001601a55505050505050505050565b600d5481565b6011546001600160e01b031681565b6040518060400160405280600c81526020016b0426c696e64657820537761760a41b81525081565b6018546001600160a01b0316331461103d576040805162461bcd60e51b81526020600482015260146024820152732cb7ba9030b932903737ba1030b71037bbb732b960611b604482015290519081900360640190fd5b601980546001600160a01b0319166001600160a01b0392909216919091179055565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000611096338484612940565b5060015b92915050565b6000806110ab6129a2565b601454600e54600d54600c5463ffffffff948516955093909216840392909101038110806110db5750600f5460ff165b806110ef57506008546001600160701b0316155b8061110a5750600854600160701b90046001600160701b0316155b1561111a57600092505050611121565b6001925050505b90565b60008061112f6129a2565b60145463ffffffff9182169250600091168211156111575760145463ffffffff16820361115a565b60005b90506000600e54600d54600c540103905081811061117a5781810361117d565b60005b935050505090565b6006546001600160a01b031681565b6018546001600160a01b031633146111ea576040805162461bcd60e51b81526020600482015260146024820152732cb7ba9030b932903737ba1030b71037bbb732b960611b604482015290519081900360640190fd5b600c55565b60005481565b60156020526000908152604090205481565b6018546001600160a01b0316331461125d576040805162461bcd60e51b81526020600482015260146024820152732cb7ba9030b932903737ba1030b71037bbb732b960611b604482015290519081900360640190fd5b601880546001600160a01b0319166001600160a01b0392909216919091179055565b60125481565b6001600160a01b03831660009081526002602090815260408083203384529091528120546000191461130a576001600160a01b03841660009081526002602090815260408083203384529091529020546112e5908363ffffffff6124aa16565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b6113158484846129ac565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60166020526000908152604090205481565b60035481565b60008061136b6129a2565b601454600d54600c5463ffffffff938416945091909216830391018110806113955750600f5460ff165b6113d05760405162461bcd60e51b81526004018080602001828103825260388152602001806130676038913960400191505060405180910390fd5b6006546001600160a01b03868116911614156114285760408051602081019091526010546001600160e01b0316815261141890611413908663ffffffff612a6616565b612ae4565b6001600160901b031692506114ad565b6007546001600160a01b038681169116146114745760405162461bcd60e51b8152600401808060200182810382526023815260200180612f8f6023913960400191505060405180910390fd5b60408051602081019091526011546001600160e01b031681526114a190611413908663ffffffff612a6616565b6001600160901b031692505b505092915050565b6010546001600160e01b031681565b6005546001600160a01b0316331461151a576040805162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015290519081900360640190fd5b600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b60095481565b600a5481565b60145463ffffffff1681565b6018546001600160a01b031633146115b6576040805162461bcd60e51b81526020600482015260146024820152732cb7ba9030b932903737ba1030b71037bbb732b960611b604482015290519081900360640190fd5b600d55565b6000601a54600114611608576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000601a8190558061161861105f565b50600654604080516370a0823160e01b815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b15801561166c57600080fd5b505afa158015611680573d6000803e3d6000fd5b505050506040513d602081101561169657600080fd5b5051600754604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156116e957600080fd5b505afa1580156116fd573d6000803e3d6000fd5b505050506040513d602081101561171357600080fd5b505190506000611732836001600160701b03871663ffffffff6124aa16565b9050600061174f836001600160701b03871663ffffffff6124aa16565b9050600061175d8787612aef565b6000549091508061179a576117866103e8610e8f611781878763ffffffff61270816565b612c4c565b985061179560006103e8612c9d565b6117e9565b6117e66001600160701b0389166117b7868463ffffffff61270816565b816117be57fe5b046001600160701b0389166117d9868563ffffffff61270816565b816117e057fe5b04612d33565b98505b600089116118285760405162461bcd60e51b8152600401808060200182810382526028815260200180612ffb6028913960400191505060405180910390fd5b6118328a8a612c9d565b61183e86868a8a612768565b811561186e5760085461186a906001600160701b0380821691600160701b90041663ffffffff61270816565b600b555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001601a5550949695505050505050565b60016020526000908152604090205481565b600b5481565b60046020526000908152604090205481565b6018546001600160a01b031681565b600e5481565b600080601a54600114611948576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000601a8190558061195861105f565b50600654600754604080516370a0823160e01b815230600482015290519496509294506001600160a01b039182169391169160009184916370a08231916024808301926020929190829003018186803b1580156119b457600080fd5b505afa1580156119c8573d6000803e3d6000fd5b505050506040513d60208110156119de57600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b158015611a2c57600080fd5b505afa158015611a40573d6000803e3d6000fd5b505050506040513d6020811015611a5657600080fd5b505130600090815260016020526040812054919250611a758888612aef565b60005490915080611a8c848763ffffffff61270816565b81611a9357fe5b049a5080611aa7848663ffffffff61270816565b81611aae57fe5b04995060008b118015611ac1575060008a115b611afc5760405162461bcd60e51b8152600401808060200182810382526028815260200180612fd36028913960400191505060405180910390fd5b611b063084612d49565b611b11878d8d61256e565b611b1c868d8c61256e565b604080516370a0823160e01b815230600482015290516001600160a01b038916916370a08231916024808301926020929190829003018186803b158015611b6257600080fd5b505afa158015611b76573d6000803e3d6000fd5b505050506040513d6020811015611b8c57600080fd5b5051604080516370a0823160e01b815230600482015290519196506001600160a01b038816916370a0823191602480820192602092909190829003018186803b158015611bd857600080fd5b505afa158015611bec573d6000803e3d6000fd5b505050506040513d6020811015611c0257600080fd5b50519350611c1285858b8b612768565b8115611c4257600854611c3e906001600160701b0380821691600160701b90041663ffffffff61270816565b600b555b604080518c8152602081018c905281516001600160a01b038f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001601a81905550915091565b6040518060400160405280600681526020016504244535741560d41b81525081565b60135481565b6019546001600160a01b031681565b60006110963384846129ac565b6103e881565b601a54600114611d35576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000601a55600654600754600854604080516370a0823160e01b815230600482015290516001600160a01b039485169490931692611ddf9285928792610ae0926001600160701b03169185916370a0823191602480820192602092909190829003018186803b158015611da757600080fd5b505afa158015611dbb573d6000803e3d6000fd5b505050506040513d6020811015611dd157600080fd5b50519063ffffffff6124aa16565b600854604080516370a0823160e01b81523060048201529051611e469284928792610ae092600160701b90046001600160701b0316916001600160a01b038616916370a0823191602480820192602092909190829003018186803b158015611da757600080fd5b50506001601a5550565b6018546001600160a01b03163314611ea6576040805162461bcd60e51b81526020600482015260146024820152732cb7ba9030b932903737ba1030b71037bbb732b960611b604482015290519081900360640190fd5b600e55565b6005546001600160a01b031681565b600f5460ff1681565b6007546001600160a01b031681565b42841015611f1c576040805162461bcd60e51b8152602060048201526012602482015271155b9a5cddd85c158c8e881156141254915160721b604482015290519081900360640190fd5b6003546001600160a01b0380891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e08501825280519083012061190160f01b6101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa158015612037573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381161580159061206d5750886001600160a01b0316816001600160a01b0316145b6120be576040805162461bcd60e51b815260206004820152601c60248201527f556e697377617056323a20494e56414c49445f5349474e415455524500000000604482015290519081900360640190fd5b6120c9898989612940565b505050505050505050565b60006120de6129a2565b601454600c5491925063ffffffff90811683039190821610158061210c57506018546001600160a01b031633145b1561225d57600954600a5460085463ffffffff858116600160e01b90920416146121b35760085463ffffffff600160e01b8204811686039190821690612164906001600160701b03600160701b820481169116612de7565b516008546001600160e01b0390911691909102939093019263ffffffff8216906121a1906001600160701b0380821691600160701b900416612de7565b516001600160e01b0316029190910190505b60405180602001604052808463ffffffff166012548503816121d157fe5b046001600160e01b039081169091529051601080546001600160e01b031916919092161790556040805160208101909152601354819063ffffffff86169084038161221857fe5b046001600160e01b039081169091529051601180546001600160e01b031916919092161790556012919091556013556014805463ffffffff191663ffffffff84161790555b5050565b600260209081526000928352604080842090915290825290205481565b6018546001600160a01b031633146122d4576040805162461bcd60e51b81526020600482015260146024820152732cb7ba9030b932903737ba1030b71037bbb732b960611b604482015290519081900360640190fd5b601755565b600c5481565b6018546001600160a01b03163314612335576040805162461bcd60e51b81526020600482015260146024820152732cb7ba9030b932903737ba1030b71037bbb732b960611b604482015290519081900360640190fd5b600f805460ff1916911515919091179055565b601a54600114612393576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000601a55600654604080516370a0823160e01b815230600482015290516124a3926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156123e457600080fd5b505afa1580156123f8573d6000803e3d6000fd5b505050506040513d602081101561240e57600080fd5b5051600754604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561245b57600080fd5b505afa15801561246f573d6000803e3d6000fd5b505050506040513d602081101561248557600080fd5b50516008546001600160701b0380821691600160701b900416612768565b6001601a55565b600082821115612501576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600080821161255d576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161256657fe5b049392505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1781529251815160009460609489169392918291908083835b6020831061261b5780518252601f1990920191602091820191016125fc565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461267d576040519150601f19603f3d011682016040523d82523d6000602084013e612682565b606091505b50915091508180156126b05750805115806126b057508080602001905160208110156126ad57600080fd5b50515b612701576040805162461bcd60e51b815260206004820152601a60248201527f556e697377617056323a205452414e534645525f4641494c4544000000000000604482015290519081900360640190fd5b5050505050565b6000826127175750600061109a565b8282028284828161272457fe5b04146127615760405162461bcd60e51b81526004018080602001828103825260218152602001806130236021913960400191505060405180910390fd5b9392505050565b6001600160701b03841180159061278657506001600160701b038311155b6127cd576040805162461bcd60e51b8152602060048201526013602482015272556e697377617056323a204f564552464c4f5760681b604482015290519081900360640190fd5b60085463ffffffff42811691600160e01b900481168203908116158015906127fd57506001600160701b03841615155b801561281157506001600160701b03831615155b15612882578063ffffffff1661283f8561282a86612e97565b6001600160e01b03169063ffffffff612ea916565b600980546001600160e01b03929092169290920201905563ffffffff811661286a8461282a87612e97565b600a80546001600160e01b0392909216929092020190555b600880546dffffffffffffffffffffffffffff19166001600160701b03888116919091176dffffffffffffffffffffffffffff60701b1916600160701b91881691909102176001600160e01b0316600160e01b63ffffffff8516021790556128e86120d4565b600854604080516001600160701b038084168252600160701b909304909216602083015280517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad19281900390910190a1505050505050565b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b63ffffffff421690565b6001600160a01b0383166000908152600160205260409020546129d5908263ffffffff6124aa16565b6001600160a01b038085166000908152600160205260408082209390935590841681522054612a0a908263ffffffff612ec616565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b612a6e612f20565b6000821580612a9457505082516001600160e01b031682810290838281612a9157fe5b04145b612acf5760405162461bcd60e51b81526004018080602001828103825260238152602001806130446023913960400191505060405180910390fd5b60408051602081019091529081529392505050565b805160701c5b919050565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b158015612b4057600080fd5b505afa158015612b54573d6000803e3d6000fd5b505050506040513d6020811015612b6a57600080fd5b5051600b546001600160a01b038216158015945091925090612c39578015612c34576000612bad6117816001600160701b0388811690881663ffffffff61270816565b90506000612bba83612c4c565b905080821115612c31576000612be8612bd9848463ffffffff6124aa16565b6000549063ffffffff61270816565b90506000612c0d83612c0186600563ffffffff61270816565b9063ffffffff612ec616565b90506000818381612c1a57fe5b0490508015612c2d57612c2d8782612c9d565b5050505b50505b6114ad565b80156114ad576000600b55505092915050565b60006003821115612c8f575080600160028204015b81811015612c8957809150600281828581612c7857fe5b040181612c8157fe5b049050612c61565b50612aea565b8115612aea57506001919050565b600054612cb0908263ffffffff612ec616565b60009081556001600160a01b038316815260016020526040902054612cdb908263ffffffff612ec616565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000818310612d425781612761565b5090919050565b6001600160a01b038216600090815260016020526040902054612d72908263ffffffff6124aa16565b6001600160a01b03831660009081526001602052604081209190915554612d9f908263ffffffff6124aa16565b60009081556040805183815290516001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b612def612f33565b6000826001600160701b031611612e4d576040805162461bcd60e51b815260206004820152601760248201527f4669786564506f696e743a204449565f42595f5a45524f000000000000000000604482015290519081900360640190fd5b6040805160208101909152806001600160701b0384166dffffffffffffffffffffffffffff60701b607087901b1681612e8257fe5b046001600160e01b0316815250905092915050565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b0384168161256657fe5b600082820183811015612761576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6040518060200160405280600081525090565b6040805160208101909152600081529056fe556e697377617056323a20494e53554646494349454e545f4f55545055545f414d4f554e54556e697377617056323a20494e53554646494349454e545f494e5055545f414d4f554e54556e6973776170563250616972204f7261636c653a20494e56414c49445f544f4b454e556e697377617056323a20494e53554646494349454e545f4c4951554944495459556e697377617056323a20494e53554646494349454e545f4c49515549444954595f4255524e4544556e697377617056323a20494e53554646494349454e545f4c49515549444954595f4d494e544544536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774669786564506f696e743a204d554c5449504c49434154494f4e5f4f564552464c4f57556e6973776170563250616972204f7261636c653a2050524943455f49535f5354414c455f4e4545445f544f5f43414c4c5f555044415445a2646970667358221220c2ce7c19106705496fa85a4279a70d514d28b7bbca3c6430e98cfad4ad607cc164736f6c634300060b00334f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a264697066735822122001b03e366630075b0ee9bbe16c12e853e1775d63110db8ea9e8f8975b9036a8d64736f6c634300060b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638aa6d2cf1161008c578063e6a4390511610066578063e6a439051461019c578063f0f44260146101ca578063f2fde38b146101f0578063f46901ed14610216576100cf565b80638aa6d2cf1461015e5780638da5cb5b14610166578063c9c653961461016e576100cf565b8063017e7e58146100d45780631e3dd18b146100f857806346346a1214610115578063574f2ba31461013457806361d027b31461014e578063715018a614610156575b600080fd5b6100dc61023c565b604080516001600160a01b039092168252519081900360200190f35b6100dc6004803603602081101561010e57600080fd5b503561024b565b6101326004803603602081101561012b57600080fd5b5035610272565b005b61013c6102d9565b60408051918252519081900360200190f35b6100dc6102df565b6101326102ee565b61013c61039a565b6100dc6103a0565b6100dc6004803603604081101561018457600080fd5b506001600160a01b03813581169160200135166103af565b6100dc600480360360408110156101b257600080fd5b506001600160a01b0381358116916020013516610805565b610132600480360360208110156101e057600080fd5b50356001600160a01b031661082b565b6101326004803603602081101561020657600080fd5b50356001600160a01b03166108af565b6101326004803603602081101561022c57600080fd5b50356001600160a01b03166109b1565b6001546001600160a01b031681565b6005818154811061025857fe5b6000918252602090912001546001600160a01b0316905081565b61027a610a35565b6001600160a01b031661028b6103a0565b6001600160a01b0316146102d4576040805162461bcd60e51b81526020600482018190526024820152600080516020613bea833981519152604482015290519081900360640190fd5b600355565b60055490565b6002546001600160a01b031681565b6102f6610a35565b6001600160a01b03166103076103a0565b6001600160a01b031614610350576040805162461bcd60e51b81526020600482018190526024820152600080516020613bea833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60035481565b6000546001600160a01b031690565b6000816001600160a01b0316836001600160a01b03161415610418576040805162461bcd60e51b815260206004820152601e60248201527f556e697377617056323a204944454e544943414c5f4144445245535345530000604482015290519081900360640190fd5b600080836001600160a01b0316856001600160a01b03161061043b57838561043e565b84845b90925090506001600160a01b03821661049e576040805162461bcd60e51b815260206004820152601760248201527f556e697377617056323a205a45524f5f41444452455353000000000000000000604482015290519081900360640190fd5b6001600160a01b03828116600090815260046020908152604080832085851684529091529020541615610511576040805162461bcd60e51b8152602060048201526016602482015275556e697377617056323a20504149525f45584953545360501b604482015290519081900360640190fd5b60606040518060200161052390610a39565b601f1982820381018352601f9091011660405261053e6103a0565b604080516001600160a01b0392831660208083019190915282518083038201815282840184526002549094166060808401919091528351808403909101815260808301909352845160a09092019182918601908083835b602083106105b45780518252601f199092019160209182019101610595565b51815160209384036101000a600019018019909216911617905286519190930192860191508083835b602083106105fc5780518252601f1990920191602091820191016105dd565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b602083106106445780518252601f199092019160209182019101610625565b51815160209384036101000a60001901801990921691161790526040805192909401828103601f1901835280855260608c811b6bffffffffffffffffffffffff1990811683850152908c901b16603482015284518082036028018152604890910190945283519381019390932081519198509650869550935050850190506000f56040805163485cc95560e01b81526001600160a01b038781166004830152868116602483015291519297509087169163485cc9559160448082019260009290919082900301818387803b15801561071b57600080fd5b505af115801561072f573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526004602081815260408084208987168086529083528185208054978d166001600160a01b031998891681179091559383528185208686528352818520805488168517905560058054600181018255958190527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db090950180549097168417909655925483519283529082015281517f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9929181900390910190a35050505092915050565b60046020908152600092835260408084209091529082529020546001600160a01b031681565b610833610a35565b6001600160a01b03166108446103a0565b6001600160a01b03161461088d576040805162461bcd60e51b81526020600482018190526024820152600080516020613bea833981519152604482015290519081900360640190fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6108b7610a35565b6001600160a01b03166108c86103a0565b6001600160a01b031614610911576040805162461bcd60e51b81526020600482018190526024820152600080516020613bea833981519152604482015290519081900360640190fd5b6001600160a01b0381166109565760405162461bcd60e51b8152600401808060200182810382526026815260200180613bc46026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6109b9610a35565b6001600160a01b03166109ca6103a0565b6001600160a01b031614610a13576040805162461bcd60e51b81526020600482018190526024820152600080516020613bea833981519152604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b61317d80610a478339019056fe6080604052610e10600c556078600d55603c600e55600f805460ff1916905560006017556001601a5534801561003457600080fd5b5060405161317d38038061317d8339818101604052604081101561005757600080fd5b508051602090910151600580546001600160a01b03199081163317909155601880546001600160a01b03948516908316179055601980549390921692169190911790556130d4806100a96000396000f3fe608060405234801561001057600080fd5b50600436106102f15760003560e01c80635bef6a5f1161019d578063ba9a7a56116100e9578063d505accf116100a2578063eef772f21161007c578063eef772f2146108bb578063ef78d4fd146108d8578063f1551aea146108e0578063fff6cae9146108ff576102f1565b8063d505accf14610834578063d6f124f014610885578063dd62ed3e1461088d576102f1565b8063ba9a7a56146107d1578063bc25cf77146107d9578063c3ce111d146107ff578063c45a01551461081c578063d072c68b14610824578063d21220a71461082c576102f1565b806380edef8e1161015657806395d89b411161013057806395d89b411461078d5780639de12e2914610795578063a367e27d1461079d578063a9059cbb146107a5576102f1565b806380edef8e1461073e57806386f9e91d1461074657806389afcb441461074e576102f1565b80635bef6a5f146106865780635cb9a714146106a75780636a627842146106c457806370a08231146106ea5780637464fc3d146107105780637ecebe0014610718576102f1565b8063185bec681161025c57806334dd1c8811610215578063405ce1be116101ef578063405ce1be14610640578063485cc955146106485780635909c0d5146106765780635a3d54931461067e576102f1565b806334dd1c88146105e65780633644e5151461060c5780633ddac95314610614576102f1565b8063185bec6814610536578063193fd1851461055c5780631e5a209e1461058257806323b872dd1461058a57806330adf81f146105c0578063313ce567146105c8576102f1565b8063095ea7b3116102ae578063095ea7b31461049d57806309bf39ed146104dd5780630ccec97a146104e55780630dfe1681146104ed5780630f3a9f651461051157806318160ddd1461052e576102f1565b8063022c0d9f146102f657806302fe80581461038457806305585f991461039e57806306fdde03146103c257806308acfd2e1461043f5780630902f1ac14610465575b600080fd5b6103826004803603608081101561030c57600080fd5b8135916020810135916001600160a01b03604083013516919081019060808101606082013564010000000081111561034357600080fd5b82018360208201111561035557600080fd5b8035906020019184600183028401116401000000008311171561037757600080fd5b509092509050610907565b005b61038c610faa565b60408051918252519081900360200190f35b6103a6610fb0565b604080516001600160e01b039092168252519081900360200190f35b6103ca610fbf565b6040805160208082528351818301528351919283929083019185019080838360005b838110156104045781810151838201526020016103ec565b50505050905090810190601f1680156104315780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103826004803603602081101561045557600080fd5b50356001600160a01b0316610fe7565b61046d61105f565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b6104c9600480360360408110156104b357600080fd5b506001600160a01b038135169060200135611089565b604080519115158252519081900360200190f35b6104c96110a0565b61038c611124565b6104f5611185565b604080516001600160a01b039092168252519081900360200190f35b6103826004803603602081101561052757600080fd5b5035611194565b61038c6111ef565b61038c6004803603602081101561054c57600080fd5b50356001600160a01b03166111f5565b6103826004803603602081101561057257600080fd5b50356001600160a01b0316611207565b61038c61127f565b6104c9600480360360608110156105a057600080fd5b506001600160a01b03813581169160208101359091169060400135611285565b61038c61131f565b6105d0611343565b6040805160ff9092168252519081900360200190f35b61038c600480360360208110156105fc57600080fd5b50356001600160a01b0316611348565b61038c61135a565b61038c6004803603604081101561062a57600080fd5b506001600160a01b038135169060200135611360565b6103a66114b5565b6103826004803603604081101561065e57600080fd5b506001600160a01b03813581169160200135166114c4565b61038c611548565b61038c61154e565b61068e611554565b6040805163ffffffff9092168252519081900360200190f35b610382600480360360208110156106bd57600080fd5b5035611560565b61038c600480360360208110156106da57600080fd5b50356001600160a01b03166115bb565b61038c6004803603602081101561070057600080fd5b50356001600160a01b03166118bb565b61038c6118cd565b61038c6004803603602081101561072e57600080fd5b50356001600160a01b03166118d3565b6104f56118e5565b61038c6118f4565b6107746004803603602081101561076457600080fd5b50356001600160a01b03166118fa565b6040805192835260208301919091528051918290030190f35b6103ca611ca0565b61038c611cc2565b6104f5611cc8565b6104c9600480360360408110156107bb57600080fd5b506001600160a01b038135169060200135611cd7565b61038c611ce4565b610382600480360360208110156107ef57600080fd5b50356001600160a01b0316611cea565b6103826004803603602081101561081557600080fd5b5035611e50565b6104f5611eab565b6104c9611eba565b6104f5611ec3565b610382600480360360e081101561084a57600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135611ed2565b6103826120d4565b61038c600480360360408110156108a357600080fd5b506001600160a01b0381358116916020013516612261565b610382600480360360208110156108d157600080fd5b503561227e565b61038c6122d9565b610382600480360360208110156108f657600080fd5b503515156122df565b610382612348565b601a54600114610952576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000601a55841515806109655750600084115b6109a05760405162461bcd60e51b8152600401808060200182810382526025815260200180612f466025913960400191505060405180910390fd5b6000806109ab61105f565b5091509150816001600160701b0316871080156109d05750806001600160701b031686105b610a0b5760405162461bcd60e51b8152600401808060200182810382526021815260200180612fb26021913960400191505060405180910390fd5b60065460009081906001600160a01b03888116911614801590610a3c57506007546001600160a01b03888116911614155b610a85576040805162461bcd60e51b8152602060048201526015602482015274556e697377617056323a20494e56414c49445f544f60581b604482015290519081900360640190fd5b8815610b56576017546001600160a01b038816600090815260166020526040902054610ab890439063ffffffff6124aa16565b1015610b2357600654610ae5906001600160a01b031688610ae08c600a63ffffffff61250716565b61256e565b600654601954610b1e916001600160a01b039081169116610ae0600a610b128e600963ffffffff61270816565b9063ffffffff61250716565b610b3a565b600654610b3a906001600160a01b0316888b61256e565b6001600160a01b03871660009081526015602052604090204390555b8715610c16576017546001600160a01b038816600090815260156020526040902054610b8990439063ffffffff6124aa16565b1015610be357600754610bb1906001600160a01b031688610ae08b600a63ffffffff61250716565b600754601954610bde916001600160a01b039081169116610ae0600a610b128d600963ffffffff61270816565b610bfa565b600754610bfa906001600160a01b0316888a61256e565b6001600160a01b03871660009081526016602052604090204390555b8415610cd157866001600160a01b03166310d1e85c338b8b8a8a6040518663ffffffff1660e01b815260040180866001600160a01b03166001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b158015610cb857600080fd5b505af1158015610ccc573d6000803e3d6000fd5b505050505b600654604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610d1c57600080fd5b505afa158015610d30573d6000803e3d6000fd5b505050506040513d6020811015610d4657600080fd5b5051600754604080516370a0823160e01b815230600482015290519294506001600160a01b03909116916370a0823191602480820192602092909190829003018186803b158015610d9657600080fd5b505afa158015610daa573d6000803e3d6000fd5b505050506040513d6020811015610dc057600080fd5b5051905060006001600160701b0385168a90038311610de0576000610def565b89856001600160701b03160383035b9050600089856001600160701b0316038311610e0c576000610e1b565b89856001600160701b03160383035b90506000821180610e2c5750600081115b610e675760405162461bcd60e51b8152600401808060200182810382526024815260200180612f6b6024913960400191505060405180910390fd5b6000610e9b610e7d84600363ffffffff61270816565b610e8f876103e863ffffffff61270816565b9063ffffffff6124aa16565b90506000610eb3610e7d84600363ffffffff61270816565b9050610ee4620f4240610ed86001600160701b038b8116908b1663ffffffff61270816565b9063ffffffff61270816565b610ef4838363ffffffff61270816565b1015610f36576040805162461bcd60e51b815260206004820152600c60248201526b556e697377617056323a204b60a01b604482015290519081900360640190fd5b5050610f4484848888612768565b60408051838152602081018390528082018d9052606081018c905290516001600160a01b038b169133917fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229181900360800190a350506001601a55505050505050505050565b600d5481565b6011546001600160e01b031681565b6040518060400160405280600c81526020016b0426c696e64657820537761760a41b81525081565b6018546001600160a01b0316331461103d576040805162461bcd60e51b81526020600482015260146024820152732cb7ba9030b932903737ba1030b71037bbb732b960611b604482015290519081900360640190fd5b601980546001600160a01b0319166001600160a01b0392909216919091179055565b6008546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000611096338484612940565b5060015b92915050565b6000806110ab6129a2565b601454600e54600d54600c5463ffffffff948516955093909216840392909101038110806110db5750600f5460ff165b806110ef57506008546001600160701b0316155b8061110a5750600854600160701b90046001600160701b0316155b1561111a57600092505050611121565b6001925050505b90565b60008061112f6129a2565b60145463ffffffff9182169250600091168211156111575760145463ffffffff16820361115a565b60005b90506000600e54600d54600c540103905081811061117a5781810361117d565b60005b935050505090565b6006546001600160a01b031681565b6018546001600160a01b031633146111ea576040805162461bcd60e51b81526020600482015260146024820152732cb7ba9030b932903737ba1030b71037bbb732b960611b604482015290519081900360640190fd5b600c55565b60005481565b60156020526000908152604090205481565b6018546001600160a01b0316331461125d576040805162461bcd60e51b81526020600482015260146024820152732cb7ba9030b932903737ba1030b71037bbb732b960611b604482015290519081900360640190fd5b601880546001600160a01b0319166001600160a01b0392909216919091179055565b60125481565b6001600160a01b03831660009081526002602090815260408083203384529091528120546000191461130a576001600160a01b03841660009081526002602090815260408083203384529091529020546112e5908363ffffffff6124aa16565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b6113158484846129ac565b5060019392505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60166020526000908152604090205481565b60035481565b60008061136b6129a2565b601454600d54600c5463ffffffff938416945091909216830391018110806113955750600f5460ff165b6113d05760405162461bcd60e51b81526004018080602001828103825260388152602001806130676038913960400191505060405180910390fd5b6006546001600160a01b03868116911614156114285760408051602081019091526010546001600160e01b0316815261141890611413908663ffffffff612a6616565b612ae4565b6001600160901b031692506114ad565b6007546001600160a01b038681169116146114745760405162461bcd60e51b8152600401808060200182810382526023815260200180612f8f6023913960400191505060405180910390fd5b60408051602081019091526011546001600160e01b031681526114a190611413908663ffffffff612a6616565b6001600160901b031692505b505092915050565b6010546001600160e01b031681565b6005546001600160a01b0316331461151a576040805162461bcd60e51b81526020600482015260146024820152732ab734b9bbb0b82b191d102327a92124a22222a760611b604482015290519081900360640190fd5b600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b60095481565b600a5481565b60145463ffffffff1681565b6018546001600160a01b031633146115b6576040805162461bcd60e51b81526020600482015260146024820152732cb7ba9030b932903737ba1030b71037bbb732b960611b604482015290519081900360640190fd5b600d55565b6000601a54600114611608576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000601a8190558061161861105f565b50600654604080516370a0823160e01b815230600482015290519395509193506000926001600160a01b03909116916370a08231916024808301926020929190829003018186803b15801561166c57600080fd5b505afa158015611680573d6000803e3d6000fd5b505050506040513d602081101561169657600080fd5b5051600754604080516370a0823160e01b815230600482015290519293506000926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156116e957600080fd5b505afa1580156116fd573d6000803e3d6000fd5b505050506040513d602081101561171357600080fd5b505190506000611732836001600160701b03871663ffffffff6124aa16565b9050600061174f836001600160701b03871663ffffffff6124aa16565b9050600061175d8787612aef565b6000549091508061179a576117866103e8610e8f611781878763ffffffff61270816565b612c4c565b985061179560006103e8612c9d565b6117e9565b6117e66001600160701b0389166117b7868463ffffffff61270816565b816117be57fe5b046001600160701b0389166117d9868563ffffffff61270816565b816117e057fe5b04612d33565b98505b600089116118285760405162461bcd60e51b8152600401808060200182810382526028815260200180612ffb6028913960400191505060405180910390fd5b6118328a8a612c9d565b61183e86868a8a612768565b811561186e5760085461186a906001600160701b0380821691600160701b90041663ffffffff61270816565b600b555b6040805185815260208101859052815133927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f928290030190a250506001601a5550949695505050505050565b60016020526000908152604090205481565b600b5481565b60046020526000908152604090205481565b6018546001600160a01b031681565b600e5481565b600080601a54600114611948576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000601a8190558061195861105f565b50600654600754604080516370a0823160e01b815230600482015290519496509294506001600160a01b039182169391169160009184916370a08231916024808301926020929190829003018186803b1580156119b457600080fd5b505afa1580156119c8573d6000803e3d6000fd5b505050506040513d60208110156119de57600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b158015611a2c57600080fd5b505afa158015611a40573d6000803e3d6000fd5b505050506040513d6020811015611a5657600080fd5b505130600090815260016020526040812054919250611a758888612aef565b60005490915080611a8c848763ffffffff61270816565b81611a9357fe5b049a5080611aa7848663ffffffff61270816565b81611aae57fe5b04995060008b118015611ac1575060008a115b611afc5760405162461bcd60e51b8152600401808060200182810382526028815260200180612fd36028913960400191505060405180910390fd5b611b063084612d49565b611b11878d8d61256e565b611b1c868d8c61256e565b604080516370a0823160e01b815230600482015290516001600160a01b038916916370a08231916024808301926020929190829003018186803b158015611b6257600080fd5b505afa158015611b76573d6000803e3d6000fd5b505050506040513d6020811015611b8c57600080fd5b5051604080516370a0823160e01b815230600482015290519196506001600160a01b038816916370a0823191602480820192602092909190829003018186803b158015611bd857600080fd5b505afa158015611bec573d6000803e3d6000fd5b505050506040513d6020811015611c0257600080fd5b50519350611c1285858b8b612768565b8115611c4257600854611c3e906001600160701b0380821691600160701b90041663ffffffff61270816565b600b555b604080518c8152602081018c905281516001600160a01b038f169233927fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496929081900390910190a35050505050505050506001601a81905550915091565b6040518060400160405280600681526020016504244535741560d41b81525081565b60135481565b6019546001600160a01b031681565b60006110963384846129ac565b6103e881565b601a54600114611d35576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000601a55600654600754600854604080516370a0823160e01b815230600482015290516001600160a01b039485169490931692611ddf9285928792610ae0926001600160701b03169185916370a0823191602480820192602092909190829003018186803b158015611da757600080fd5b505afa158015611dbb573d6000803e3d6000fd5b505050506040513d6020811015611dd157600080fd5b50519063ffffffff6124aa16565b600854604080516370a0823160e01b81523060048201529051611e469284928792610ae092600160701b90046001600160701b0316916001600160a01b038616916370a0823191602480820192602092909190829003018186803b158015611da757600080fd5b50506001601a5550565b6018546001600160a01b03163314611ea6576040805162461bcd60e51b81526020600482015260146024820152732cb7ba9030b932903737ba1030b71037bbb732b960611b604482015290519081900360640190fd5b600e55565b6005546001600160a01b031681565b600f5460ff1681565b6007546001600160a01b031681565b42841015611f1c576040805162461bcd60e51b8152602060048201526012602482015271155b9a5cddd85c158c8e881156141254915160721b604482015290519081900360640190fd5b6003546001600160a01b0380891660008181526004602090815260408083208054600180820190925582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958d166060860152608085018c905260a085019590955260c08085018b90528151808603909101815260e08501825280519083012061190160f01b6101008601526101028501969096526101228085019690965280518085039096018652610142840180825286519683019690962095839052610162840180825286905260ff89166101828501526101a284018890526101c28401879052519193926101e280820193601f1981019281900390910190855afa158015612037573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381161580159061206d5750886001600160a01b0316816001600160a01b0316145b6120be576040805162461bcd60e51b815260206004820152601c60248201527f556e697377617056323a20494e56414c49445f5349474e415455524500000000604482015290519081900360640190fd5b6120c9898989612940565b505050505050505050565b60006120de6129a2565b601454600c5491925063ffffffff90811683039190821610158061210c57506018546001600160a01b031633145b1561225d57600954600a5460085463ffffffff858116600160e01b90920416146121b35760085463ffffffff600160e01b8204811686039190821690612164906001600160701b03600160701b820481169116612de7565b516008546001600160e01b0390911691909102939093019263ffffffff8216906121a1906001600160701b0380821691600160701b900416612de7565b516001600160e01b0316029190910190505b60405180602001604052808463ffffffff166012548503816121d157fe5b046001600160e01b039081169091529051601080546001600160e01b031916919092161790556040805160208101909152601354819063ffffffff86169084038161221857fe5b046001600160e01b039081169091529051601180546001600160e01b031916919092161790556012919091556013556014805463ffffffff191663ffffffff84161790555b5050565b600260209081526000928352604080842090915290825290205481565b6018546001600160a01b031633146122d4576040805162461bcd60e51b81526020600482015260146024820152732cb7ba9030b932903737ba1030b71037bbb732b960611b604482015290519081900360640190fd5b601755565b600c5481565b6018546001600160a01b03163314612335576040805162461bcd60e51b81526020600482015260146024820152732cb7ba9030b932903737ba1030b71037bbb732b960611b604482015290519081900360640190fd5b600f805460ff1916911515919091179055565b601a54600114612393576040805162461bcd60e51b8152602060048201526011602482015270155b9a5cddd85c158c8e881313d0d2d151607a1b604482015290519081900360640190fd5b6000601a55600654604080516370a0823160e01b815230600482015290516124a3926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156123e457600080fd5b505afa1580156123f8573d6000803e3d6000fd5b505050506040513d602081101561240e57600080fd5b5051600754604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561245b57600080fd5b505afa15801561246f573d6000803e3d6000fd5b505050506040513d602081101561248557600080fd5b50516008546001600160701b0380821691600160701b900416612768565b6001601a55565b600082821115612501576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600080821161255d576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161256657fe5b049392505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e74323536290000000000000060209182015281516001600160a01b0385811660248301526044808301869052845180840390910181526064909201845291810180516001600160e01b031663a9059cbb60e01b1781529251815160009460609489169392918291908083835b6020831061261b5780518252601f1990920191602091820191016125fc565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461267d576040519150601f19603f3d011682016040523d82523d6000602084013e612682565b606091505b50915091508180156126b05750805115806126b057508080602001905160208110156126ad57600080fd5b50515b612701576040805162461bcd60e51b815260206004820152601a60248201527f556e697377617056323a205452414e534645525f4641494c4544000000000000604482015290519081900360640190fd5b5050505050565b6000826127175750600061109a565b8282028284828161272457fe5b04146127615760405162461bcd60e51b81526004018080602001828103825260218152602001806130236021913960400191505060405180910390fd5b9392505050565b6001600160701b03841180159061278657506001600160701b038311155b6127cd576040805162461bcd60e51b8152602060048201526013602482015272556e697377617056323a204f564552464c4f5760681b604482015290519081900360640190fd5b60085463ffffffff42811691600160e01b900481168203908116158015906127fd57506001600160701b03841615155b801561281157506001600160701b03831615155b15612882578063ffffffff1661283f8561282a86612e97565b6001600160e01b03169063ffffffff612ea916565b600980546001600160e01b03929092169290920201905563ffffffff811661286a8461282a87612e97565b600a80546001600160e01b0392909216929092020190555b600880546dffffffffffffffffffffffffffff19166001600160701b03888116919091176dffffffffffffffffffffffffffff60701b1916600160701b91881691909102176001600160e01b0316600160e01b63ffffffff8516021790556128e86120d4565b600854604080516001600160701b038084168252600160701b909304909216602083015280517f1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad19281900390910190a1505050505050565b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b63ffffffff421690565b6001600160a01b0383166000908152600160205260409020546129d5908263ffffffff6124aa16565b6001600160a01b038085166000908152600160205260408082209390935590841681522054612a0a908263ffffffff612ec616565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b612a6e612f20565b6000821580612a9457505082516001600160e01b031682810290838281612a9157fe5b04145b612acf5760405162461bcd60e51b81526004018080602001828103825260238152602001806130446023913960400191505060405180910390fd5b60408051602081019091529081529392505050565b805160701c5b919050565b600080600560009054906101000a90046001600160a01b03166001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b158015612b4057600080fd5b505afa158015612b54573d6000803e3d6000fd5b505050506040513d6020811015612b6a57600080fd5b5051600b546001600160a01b038216158015945091925090612c39578015612c34576000612bad6117816001600160701b0388811690881663ffffffff61270816565b90506000612bba83612c4c565b905080821115612c31576000612be8612bd9848463ffffffff6124aa16565b6000549063ffffffff61270816565b90506000612c0d83612c0186600563ffffffff61270816565b9063ffffffff612ec616565b90506000818381612c1a57fe5b0490508015612c2d57612c2d8782612c9d565b5050505b50505b6114ad565b80156114ad576000600b55505092915050565b60006003821115612c8f575080600160028204015b81811015612c8957809150600281828581612c7857fe5b040181612c8157fe5b049050612c61565b50612aea565b8115612aea57506001919050565b600054612cb0908263ffffffff612ec616565b60009081556001600160a01b038316815260016020526040902054612cdb908263ffffffff612ec616565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000818310612d425781612761565b5090919050565b6001600160a01b038216600090815260016020526040902054612d72908263ffffffff6124aa16565b6001600160a01b03831660009081526001602052604081209190915554612d9f908263ffffffff6124aa16565b60009081556040805183815290516001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef919081900360200190a35050565b612def612f33565b6000826001600160701b031611612e4d576040805162461bcd60e51b815260206004820152601760248201527f4669786564506f696e743a204449565f42595f5a45524f000000000000000000604482015290519081900360640190fd5b6040805160208101909152806001600160701b0384166dffffffffffffffffffffffffffff60701b607087901b1681612e8257fe5b046001600160e01b0316815250905092915050565b6001600160701b0316600160701b0290565b60006001600160701b0382166001600160e01b0384168161256657fe5b600082820183811015612761576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6040518060200160405280600081525090565b6040805160208101909152600081529056fe556e697377617056323a20494e53554646494349454e545f4f55545055545f414d4f554e54556e697377617056323a20494e53554646494349454e545f494e5055545f414d4f554e54556e6973776170563250616972204f7261636c653a20494e56414c49445f544f4b454e556e697377617056323a20494e53554646494349454e545f4c4951554944495459556e697377617056323a20494e53554646494349454e545f4c49515549444954595f4255524e4544556e697377617056323a20494e53554646494349454e545f4c49515549444954595f4d494e544544536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774669786564506f696e743a204d554c5449504c49434154494f4e5f4f564552464c4f57556e6973776170563250616972204f7261636c653a2050524943455f49535f5354414c455f4e4545445f544f5f43414c4c5f555044415445a2646970667358221220c2ce7c19106705496fa85a4279a70d514d28b7bbca3c6430e98cfad4ad607cc164736f6c634300060b00334f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a264697066735822122001b03e366630075b0ee9bbe16c12e853e1775d63110db8ea9e8f8975b9036a8d64736f6c634300060b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1569,
        "contract": "contracts/Uniswap/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 13136,
        "contract": "contracts/Uniswap/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "feeTo",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 13139,
        "contract": "contracts/Uniswap/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "treasury",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 13142,
        "contract": "contracts/Uniswap/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "maxSpotVsOraclePriceDivergence_d12",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 13149,
        "contract": "contracts/Uniswap/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "getPair",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 13153,
        "contract": "contracts/Uniswap/UniswapV2Factory.sol:UniswapV2Factory",
        "label": "allPairs",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}