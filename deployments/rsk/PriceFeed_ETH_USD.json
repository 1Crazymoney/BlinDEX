{
  "address": "0x798319b2e00177197a82074c3B770E2980C524bC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sovrynConverterAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenSource",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenTarget",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "consult",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shouldUpdateOracle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sovrynConverter",
      "outputs": [
        {
          "internalType": "contract ISovrynLiquidityPoolV1Converter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenSource",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenTarget",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "when_should_update_oracle_in_seconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe66c756f07d10e6a70e94e19074502bd09ee62bc475e686e6ae120bf123eb3bb",
  "receipt": {
    "to": null,
    "from": "0x774289Cb40c98B4f5b64a152BF7e5F94Fee38669",
    "contractAddress": "0x798319b2e00177197a82074c3B770E2980C524bC",
    "transactionIndex": 0,
    "gasUsed": "407926",
    "logsBloom": "0x
    "blockHash": "0x704489fdad14828109066e50c48e771e21c0071b050ed40bf288712b4a43c661",
    "transactionHash": "0xe66c756f07d10e6a70e94e19074502bd09ee62bc475e686e6ae120bf123eb3bb",
    "logs": [],
    "blockNumber": 3849347,
    "cumulativeGasUsed": "407926",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x448c2474b255576554eed36c24430ccfac131ce3",
    "0x542fda317318ebf1d3deaf76e0b632741a7e677d",
    "0xef213441a85df4d7acbdae0cf78004e1e486bb96"
  ],
  "solcInputHash": "d430163ce9b4dd5ca2a600e2360fe631",
  "metadata": "{\"compiler\":{\"version\":\"0.6.11+commit.5ef660b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sovrynConverterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenSource\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenTarget\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"consult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldUpdateOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sovrynConverter\",\"outputs\":[{\"internalType\":\"contract ISovrynLiquidityPoolV1Converter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSource\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTarget\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"when_should_update_oracle_in_seconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Oracle/SovrynSwapPriceFeed.sol\":\"SovrynSwapPriceFeed\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"contracts/Oracle/ICryptoPairOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.11;\\n\\ninterface ICryptoPairOracle {\\n    \\n    function consult(address tokenIn, uint256 amountIn)\\n        external\\n        view\\n        returns (uint amountOut);\\n\\n    function updateOracle() external;\\n\\n    function shouldUpdateOracle() external view returns (bool);\\n\\n    function when_should_update_oracle_in_seconds() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2b26edbf96b91272223e45f2268b0c85728b1596b580823e3fe5f0f98ebb1395\",\"license\":\"MIT\"},\"contracts/Oracle/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.11;\\r\\n\\r\\ninterface IPriceFeed {\\r\\n    function decimals() external view returns (uint8);\\r\\n    function price() external view returns (uint256);\\r\\n}\",\"keccak256\":\"0x2f5d486ac3cf6c61f392eb7ca773a7bb2bfc65c1be44fea4d93d73ee556d7bdf\",\"license\":\"MIT\"},\"contracts/Oracle/SovrynSwapPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"./IPriceFeed.sol\\\";\\r\\nimport \\\"./ICryptoPairOracle.sol\\\";\\r\\nimport \\\"../Utils/Sovryn/ISovrynLiquidityPoolV1Converter.sol\\\";\\r\\n\\r\\n// We need feeds with fiats prices. For now on RSK chain there are no such feeds.\\r\\n// We populate our own feeds\\r\\ncontract SovrynSwapPriceFeed is IPriceFeed, ICryptoPairOracle {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint8 private constant DECIMALS = 12;\\r\\n    uint256 private constant PRECISION = 1e12;\\r\\n\\r\\n    ISovrynLiquidityPoolV1Converter public sovrynConverter;\\r\\n    address public tokenSource;\\r\\n    address public tokenTarget;\\r\\n\\r\\n    constructor(address _sovrynConverterAddress, address _tokenSource, address _tokenTarget) public {\\r\\n        sovrynConverter = ISovrynLiquidityPoolV1Converter(_sovrynConverterAddress);\\r\\n        tokenSource = _tokenSource;\\r\\n        tokenTarget = _tokenTarget;\\r\\n    }\\r\\n\\r\\n    // IPriceFeed\\r\\n\\r\\n    function decimals() external view override returns (uint8) {\\r\\n        return DECIMALS;\\r\\n    }\\r\\n\\r\\n    function price() external view override returns (uint256) {\\r\\n        (uint256 amountMinusFee, uint256 fee) = sovrynConverter.targetAmountAndFee(tokenSource, tokenTarget, PRECISION);\\r\\n        return amountMinusFee.add(fee);\\r\\n    }\\r\\n\\r\\n    // ICryptoPairOracle\\r\\n\\r\\n    function consult(address tokenIn, uint256 amountIn) external view override returns (uint256) {     \\r\\n        require(tokenIn == tokenSource, \\\"This oracle only accepts consulting source token input\\\");\\r\\n\\r\\n        (uint256 amountMinusFee, uint256 fee) = sovrynConverter.targetAmountAndFee(tokenSource, tokenTarget, amountIn);\\r\\n        return amountMinusFee.add(fee);\\r\\n    }\\r\\n\\r\\n    function updateOracle() public override {}\\r\\n\\r\\n    function shouldUpdateOracle() public view override returns (bool) {\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function when_should_update_oracle_in_seconds() public view override returns (uint256) {\\r\\n        return uint256(-1);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x09592ae84b7a8997cb0fb126c3eca96cd3d098fc41bef8c3fdb09f2b599e030a\",\"license\":\"MIT\"},\"contracts/Utils/Sovryn/ISovrynLiquidityPoolV1Converter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.11;\\r\\n\\r\\ninterface ISovrynLiquidityPoolV1Converter {\\r\\n    function targetAmountAndFee(address _sourceToken, address _targetToken, uint256 _amount) external view  returns(uint256 amountMinusFee, uint256 fee);\\r\\n}\\r\\n\",\"keccak256\":\"0xd16d7373701d3ca746792f0469352cb55822374d53384e34ecfc5982b8e41d6e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516104af3803806104af8339818101604052606081101561003357600080fd5b5080516020820151604090920151600080546001600160a01b039384166001600160a01b03199182161790915560018054948416948216949094179093556002805492909116919092161790556104208061008f6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063782e1e6c11610066578063782e1e6c146101185780638cec13b81461013c578063a035b1fe14610144578063af1d0d611461014c578063d6f124f01461015457610093565b806309bf39ed146100985780630ccec97a146100b4578063313ce567146100ce5780633ddac953146100ec575b600080fd5b6100a061015e565b604080519115158252519081900360200190f35b6100bc610163565b60408051918252519081900360200190f35b6100d6610169565b6040805160ff9092168252519081900360200190f35b6100bc6004803603604081101561010257600080fd5b506001600160a01b03813516906020013561016e565b610120610270565b604080516001600160a01b039092168252519081900360200190f35b61012061027f565b6100bc61028e565b610120610342565b61015c610351565b005b600090565b60001990565b600c90565b6001546000906001600160a01b038481169116146101bd5760405162461bcd60e51b81526004018080602001828103825260368152602001806103b56036913960400191505060405180910390fd5b60008054600154600254604080516315f2971b60e31b81526001600160a01b03938416600482015291831660248301526044820187905280518594939093169263af94b8d8926064808201939291829003018186803b15801561021f57600080fd5b505afa158015610233573d6000803e3d6000fd5b505050506040513d604081101561024957600080fd5b5080516020909101519092509050610267828263ffffffff61035316565b95945050505050565b6002546001600160a01b031681565b6001546001600160a01b031681565b60008054600154600254604080516315f2971b60e31b81526001600160a01b039384166004820152918316602483015264e8d4a510006044830152805185948594169263af94b8d8926064808301939192829003018186803b1580156102f357600080fd5b505afa158015610307573d6000803e3d6000fd5b505050506040513d604081101561031d57600080fd5b508051602090910151909250905061033b828263ffffffff61035316565b9250505090565b6000546001600160a01b031681565b565b6000828201838110156103ad576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b939250505056fe54686973206f7261636c65206f6e6c79206163636570747320636f6e73756c74696e6720736f7572636520746f6b656e20696e707574a2646970667358221220daa4ee7284ba9862211168b34296e199ff0ff49e6370c6372f6b724001a34b4f64736f6c634300060b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063782e1e6c11610066578063782e1e6c146101185780638cec13b81461013c578063a035b1fe14610144578063af1d0d611461014c578063d6f124f01461015457610093565b806309bf39ed146100985780630ccec97a146100b4578063313ce567146100ce5780633ddac953146100ec575b600080fd5b6100a061015e565b604080519115158252519081900360200190f35b6100bc610163565b60408051918252519081900360200190f35b6100d6610169565b6040805160ff9092168252519081900360200190f35b6100bc6004803603604081101561010257600080fd5b506001600160a01b03813516906020013561016e565b610120610270565b604080516001600160a01b039092168252519081900360200190f35b61012061027f565b6100bc61028e565b610120610342565b61015c610351565b005b600090565b60001990565b600c90565b6001546000906001600160a01b038481169116146101bd5760405162461bcd60e51b81526004018080602001828103825260368152602001806103b56036913960400191505060405180910390fd5b60008054600154600254604080516315f2971b60e31b81526001600160a01b03938416600482015291831660248301526044820187905280518594939093169263af94b8d8926064808201939291829003018186803b15801561021f57600080fd5b505afa158015610233573d6000803e3d6000fd5b505050506040513d604081101561024957600080fd5b5080516020909101519092509050610267828263ffffffff61035316565b95945050505050565b6002546001600160a01b031681565b6001546001600160a01b031681565b60008054600154600254604080516315f2971b60e31b81526001600160a01b039384166004820152918316602483015264e8d4a510006044830152805185948594169263af94b8d8926064808301939192829003018186803b1580156102f357600080fd5b505afa158015610307573d6000803e3d6000fd5b505050506040513d604081101561031d57600080fd5b508051602090910151909250905061033b828263ffffffff61035316565b9250505090565b6000546001600160a01b031681565b565b6000828201838110156103ad576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b939250505056fe54686973206f7261636c65206f6e6c79206163636570747320636f6e73756c74696e6720736f7572636520746f6b656e20696e707574a2646970667358221220daa4ee7284ba9862211168b34296e199ff0ff49e6370c6372f6b724001a34b4f64736f6c634300060b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9617,
        "contract": "contracts/Oracle/SovrynSwapPriceFeed.sol:SovrynSwapPriceFeed",
        "label": "sovrynConverter",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ISovrynLiquidityPoolV1Converter)18871"
      },
      {
        "astId": 9619,
        "contract": "contracts/Oracle/SovrynSwapPriceFeed.sol:SovrynSwapPriceFeed",
        "label": "tokenSource",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9621,
        "contract": "contracts/Oracle/SovrynSwapPriceFeed.sol:SovrynSwapPriceFeed",
        "label": "tokenTarget",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ISovrynLiquidityPoolV1Converter)18871": {
        "encoding": "inplace",
        "label": "contract ISovrynLiquidityPoolV1Converter",
        "numberOfBytes": "20"
      }
    }
  }
}