{
  "language": "Solidity",
  "sources": {
    "contracts/BdStable/BDStable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.11;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../ERC20/ERC20Custom.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"../Bdx/BDXShares.sol\";\nimport \"../Oracle/IOracleBasedCryptoFiatFeed.sol\";\nimport \"../Oracle/ICryptoPairOracle.sol\";\nimport \"./Pools/BdStablePool.sol\";\nimport \"./Pools/BdPoolLibrary.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\n\ncontract BDStable is ERC20Custom, Initializable {\n    using SafeMath for uint256;\n\n    /* ========== STATE VARIABLES ========== */\n    enum PriceChoice { BDSTABLE, BDX }\n\n    uint8 public constant decimals = 18;\n    uint8 private constant MAX_NUMBER_OF_POOLS = 32;\n    uint256 public unclaimedPoolsBDX;\n\n    string public symbol;\n    string public name;\n    string public fiat;\n    address public owner_address;\n    address public treasury_address; // used by pools\n    IERC20 private BDX;\n\n    ICryptoPairOracle private bdstableWethOracle;\n    ICryptoPairOracle private bdxWethOracle;\n\n    IOracleBasedCryptoFiatFeed private weth_fiat_pricer;\n    uint8 private UNUSED_PLACEHOLDER_1; //todo ag remove\n\n    uint256 public global_collateral_ratio_d12; // 12 decimals of precision\n    \n    address public weth_address;\n\n    // The addresses in this array are added by the oracle and these contracts are able to mint bdStable\n    address payable[] public bdstable_pools_array;\n\n    // Mapping is also used for faster verification\n    mapping(address => bool) public bdstable_pools; \n\n    uint256 public bdStable_step_d12; // Amount to change the collateralization ratio by upon refreshCollateralRatio()\n    uint256 public refresh_cooldown; // Seconds to wait before being able to run refreshCollateralRatio() again\n    uint256 public price_target_d12; // The price of BDSTABLE at which the collateral ratio will respond to; this value is only used for the collateral ratio mechanism and not for minting and redeeming which are hardcoded at 1 <fiat>\n    uint256 public price_band_d12; // The bound above and below the price target at which the refreshCollateralRatio() will not change the collateral ratio\n\n    uint256 private minimumMintRedeemDelayInBlocks = 2;\n\n    bool public collateral_ratio_paused;\n\n    mapping(address => uint256) public lastMintByUserBlock;\n\n    // There needs to be a time interval that this can be called. Otherwise it can be called multiple times per expansion.\n    uint256 public refreshCollateralRatio_last_call_time; // Last time the collateral ration was refreshed function was executed\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyPools() {\n       require(bdstable_pools[msg.sender] == true, \"Only bd pools can call this function\");\n        _;\n    } \n    \n    modifier onlyByOwner() {\n        require(msg.sender == owner_address, \"You are not the owner\");\n        _;\n    }\n\n    modifier onlyByOwnerOrPool() {\n        require(\n            msg.sender == owner_address \n            || bdstable_pools[msg.sender] == true, \n            \"You are not the owner or a pool\");\n        _;\n    }\n\n    /* ========== CONSTRUCTOR ========== */\n\n    function initialize (\n        string memory _name,\n        string memory _symbol,\n        string memory _fiat,\n        address _owner_address,\n        address _treasury_address,\n        address _bdx_address,\n        uint256 _initalBdStableToOwner_d18\n    ) \n        public \n        initializer\n    {\n        name = _name;\n        symbol = _symbol;\n        fiat = _fiat;\n        owner_address = _owner_address;\n        treasury_address = _treasury_address;\n        BDX = IERC20(_bdx_address);\n\n        bdStable_step_d12 = uint256(BdPoolLibrary.PRICE_PRECISION).mul(25).div(10000); // 12 decimals of precision, equal to 0.25%\n        global_collateral_ratio_d12 = uint256(BdPoolLibrary.COLLATERAL_RATIO_MAX); // Bdstable system starts off fully collateralized (12 decimals of precision)\n        price_target_d12 = uint256(BdPoolLibrary.PRICE_PRECISION); // Collateral ratio will adjust according to the 1 <fiat> price target at genesis\n        price_band_d12 = uint256(BdPoolLibrary.PRICE_PRECISION).mul(50).div(10000); // Collateral ratio will not adjust if between 0.995<fiat> and 1.005<fiat> at genesis\n        refresh_cooldown = 3600; // Refresh cooldown period is set to 1 hour (3600 seconds) at genesis\n\n        if(_initalBdStableToOwner_d18 > 0) {\n            _mint(_owner_address, _initalBdStableToOwner_d18); // so owner can provide liqidity to swaps and we could get prices from the swaps\n        }\n    }\n\n    /* ========== VIEWS ========== */\n\n    function getBdStablesPoolsLength() public view returns (uint256) {\n        return bdstable_pools_array.length;\n    }\n\n    // collateral value in fiat corresponding to the stable\n    // Iterate through all bd pools and calculate all value of collateral in all pools globally \n    function globalCollateralValue() public view returns (uint256) {\n        uint256 total_collateral_value_d18 = 0; \n\n        // bdstable_pools_array.length is limited by addPool function\n        for (uint i = 0; i < bdstable_pools_array.length; i++){ \n            total_collateral_value_d18 = total_collateral_value_d18.add(BdStablePool(bdstable_pools_array[i]).collatFiatBalance());\n        }\n        return total_collateral_value_d18;\n    }\n\n    // Choice = 'BDSTABLE' or 'BDX' for now\n    function oracle_price(PriceChoice choice) internal view returns (uint256) {\n        uint256 weth_fiat_price_d12 = weth_fiat_price();\n        uint256 price_vs_weth;\n\n        if (choice == PriceChoice.BDSTABLE) {\n            price_vs_weth = uint256(bdstableWethOracle.consult(weth_address, BdPoolLibrary.PRICE_PRECISION)); // How much BDSTABLE if you put in BdPoolLibrary.PRICE_PRECISION WETH\n        }\n        else if (choice == PriceChoice.BDX) {\n            price_vs_weth = uint256(bdxWethOracle.consult(weth_address, BdPoolLibrary.PRICE_PRECISION)); // How much BDX if you put in BdPoolLibrary.PRICE_PRECISION WETH\n        }\n        else revert(\"INVALID PRICE CHOICE. Needs to be either 0 (BDSTABLE) or 1 (BDX)\");\n\n        return weth_fiat_price_d12.mul(BdPoolLibrary.PRICE_PRECISION).div(price_vs_weth);\n    }\n    \n    function updateOraclesIfNeeded() public {\n        if(bdxWethOracle.shouldUpdateOracle()){\n            bdxWethOracle.updateOracle();\n        }\n\n        if(bdstableWethOracle.shouldUpdateOracle()){\n            bdstableWethOracle.updateOracle();\n        } \n    }\n\n    function shouldUpdateOracles() public view returns (bool) {\n        return bdxWethOracle.shouldUpdateOracle() || bdstableWethOracle.shouldUpdateOracle(); \n    }\n\n    // Returns BDSTABLE / <fiat>\n    function bdstable_price_d12() public view returns (uint256) {\n        return oracle_price(PriceChoice.BDSTABLE);\n    }\n\n    // Returns BDX / <fiat>\n    function BDX_price_d12() public view returns (uint256) {\n        return oracle_price(PriceChoice.BDX);\n    }\n\n    function effective_global_collateral_ratio_d12() public view returns (uint256) {\n        uint256 bdStable_total_supply = totalSupply();\n        uint256 global_collat_value = globalCollateralValue();\n        uint256 efCR = global_collat_value.mul(BdPoolLibrary.PRICE_PRECISION).div(bdStable_total_supply);\n        return efCR;\n    }\n\n    function weth_fiat_price() public view returns (uint256) {\n        return uint256(weth_fiat_pricer.getPrice_1e12()).mul(BdPoolLibrary.PRICE_PRECISION).div(1e12);\n    }\n    \n    function canLegallyRedeem(address who) external view returns (bool) {\n        return block.number.sub(lastMintByUserBlock[who]) >= minimumMintRedeemDelayInBlocks;\n    }\n\n    /* ========== PUBLIC FUNCTIONS ========== */\n\n    function when_should_refresh_collateral_ratio_in_seconds() public view returns (uint256) {\n        uint256 secondsSinceLastRefresh = block.timestamp - refreshCollateralRatio_last_call_time;\n\n        return secondsSinceLastRefresh > refresh_cooldown \n            ? 0 \n            : (refresh_cooldown - secondsSinceLastRefresh);\n    }\n\n    function refreshCollateralRatio() external {\n        if(collateral_ratio_paused == true){\n            return;\n        }\n\n        if(when_should_refresh_collateral_ratio_in_seconds() > 0){\n            return;\n        }\n\n        if(bdstableWethOracle.shouldUpdateOracle()){\n            bdstableWethOracle.updateOracle();\n        }\n\n        uint256 bdstable_price_cur = bdstable_price_d12();\n\n        // Step increments are 0.25% (upon genesis, changable) \n\n        if (bdstable_price_cur > price_target_d12.add(price_band_d12)) { //decrease collateral ratio\n            if(global_collateral_ratio_d12 <= bdStable_step_d12){ //if within a step of 0, go to 0\n                global_collateral_ratio_d12 = 0;\n            } else {\n                global_collateral_ratio_d12 = global_collateral_ratio_d12.sub(bdStable_step_d12);\n            }\n        } else if (bdstable_price_cur < price_target_d12.sub(price_band_d12)) { //increase collateral ratio\n            if(global_collateral_ratio_d12.add(bdStable_step_d12) >= BdPoolLibrary.COLLATERAL_RATIO_MAX){\n                global_collateral_ratio_d12 = BdPoolLibrary.COLLATERAL_RATIO_MAX; // cap collateral ratio at 1.000000\n            } else {\n                global_collateral_ratio_d12 = global_collateral_ratio_d12.add(bdStable_step_d12);\n            }\n        }\n\n        refreshCollateralRatio_last_call_time = block.timestamp; // Set the time of the last expansion\n\n        emit CollateralRatioRefreshed(global_collateral_ratio_d12);\n    }\n    \n    function get_effective_bdx_coverage_ratio() public view returns (uint256) {\n        uint256 effective_collateral_ratio_d12 = effective_global_collateral_ratio_d12();\n\n        uint256 cr = global_collateral_ratio_d12 > effective_collateral_ratio_d12 \n            ? effective_collateral_ratio_d12 \n            : global_collateral_ratio_d12;\n\n\n        uint256 expectedBdxValue_d18 = \n            BdPoolLibrary.COLLATERAL_RATIO_MAX.sub(cr)\n            .mul(totalSupply())\n            .div(BdPoolLibrary.COLLATERAL_RATIO_PRECISION);\n\n        if(expectedBdxValue_d18 == 0){\n            return BdPoolLibrary.COLLATERAL_RATIO_MAX; // in we need no BDX, the coverage is 100%\n        } \n\n        uint256 bdxPrice_d12 = oracle_price(PriceChoice.BDX);\n\n        if(bdxPrice_d12 == 0){\n            return 0; // in we need BDX but BDX price is 0, the coverage is 0%\n        } \n\n        uint256 expectedBdx_d18 = expectedBdxValue_d18\n            .mul(BdPoolLibrary.PRICE_PRECISION)\n            .div(bdxPrice_d12);\n\n        uint256 bdxSupply_d18 = BDX.balanceOf(address(this)).sub(unclaimedPoolsBDX);\n        uint256 effectiveBdxCR_d12 = BdPoolLibrary\n            .PRICE_PRECISION\n            .mul(bdxSupply_d18)\n            .div(expectedBdx_d18);\n\n        return effectiveBdxCR_d12 > BdPoolLibrary.COLLATERAL_RATIO_MAX ? BdPoolLibrary.COLLATERAL_RATIO_MAX : effectiveBdxCR_d12;\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    // Used by pools when user redeems\n    function pool_burn_from(address b_address, uint256 b_amount) public onlyPools {\n        super._burnFrom(b_address, b_amount);\n\n        emit BdStableBurned(b_address, msg.sender, b_amount);\n    }\n\n    // This function is what other bd pools will call to mint new bd stable \n    function pool_mint(address m_address, uint256 m_amount) public onlyPools {\n        super._mint(m_address, m_amount);\n        \n        lastMintByUserBlock[m_address] = block.number;\n\n        emit BdStableMinted(msg.sender, m_address, m_amount);\n    }\n\n    // Adds collateral addresses supported, such as tether and busd, must be ERC20 \n    function addPool(address pool_address) external onlyByOwner {\n        require(bdstable_pools[pool_address] == false, \"pool already exists\");\n        require(bdstable_pools_array.length < MAX_NUMBER_OF_POOLS, \"pools limit reached\");\n\n        bdstable_pools[pool_address] = true; \n        bdstable_pools_array.push(payable(pool_address));\n\n        emit PoolAdded(pool_address);\n    }\n\n    // Remove a pool \n    function removePool(address pool_address) external onlyByOwner {\n        require(bdstable_pools[pool_address] == true, \"address doesn't exist already\");\n        \n        delete bdstable_pools[pool_address];\n\n        // bdstable_pools_array.length is limited by addPool function\n        for (uint i = 0; i < bdstable_pools_array.length; i++){ \n            if (bdstable_pools_array[i] == pool_address) {\n                bdstable_pools_array[i] = bdstable_pools_array[bdstable_pools_array.length -1];\n                bdstable_pools_array.pop();\n                break;\n            }\n        }\n\n        emit PoolRemoved(pool_address);\n    }\n\n    function setBDStable_WETH_Oracle(address _bdstable_oracle_addr, address _weth_address) external onlyByOwner {\n        bdstableWethOracle = ICryptoPairOracle(_bdstable_oracle_addr); \n        weth_address = _weth_address;\n\n        emit BDStableWETHOracleSet(_bdstable_oracle_addr, _weth_address);\n    }\n\n    function setBDX_WETH_Oracle(address _bdx_oracle_addr, address _weth_address) external onlyByOwner {\n        bdxWethOracle = ICryptoPairOracle(_bdx_oracle_addr);\n        weth_address = _weth_address;\n\n        emit BDXWETHOracleSet(_bdx_oracle_addr, _weth_address);\n    }\n    \n    function setETH_fiat_Oracle(address _eth_fiat_consumer_address) external onlyByOwner {\n        weth_fiat_pricer = IOracleBasedCryptoFiatFeed(_eth_fiat_consumer_address);\n        \n        emit EthFiatOracleSet(_eth_fiat_consumer_address);\n    }\n\n    function setBdStable_step_d12(uint256 _bdStable_step_d12) external onlyByOwner {\n        bdStable_step_d12 = _bdStable_step_d12;\n\n        emit BdStableStepSet(_bdStable_step_d12);\n    }\n\n    function set_price_target_d12(uint256 _price_target_d12) external onlyByOwner {\n        price_target_d12 = _price_target_d12;\n\n        emit PriceTargetSet(_price_target_d12);\n    }\n\n    function set_price_band_d12(uint256 _price_band_d12) external onlyByOwner {\n        price_band_d12 = _price_band_d12;\n\n        emit PriceBandSet(_price_band_d12);\n    }\n\n    function toggleCollateralRatioPaused() external onlyByOwner {\n        collateral_ratio_paused = !collateral_ratio_paused;\n\n        emit CollateralRatioPausedToggled(collateral_ratio_paused);\n    }\n\n    function lockCollateralRatioAt(uint256 wantedCR_d12) external onlyByOwner {\n        require(wantedCR_d12 >=0 && wantedCR_d12 <=1e12, \"CR must be <0;1>\");\n\n        global_collateral_ratio_d12 = wantedCR_d12;\n        collateral_ratio_paused = true;\n\n        emit CollateralRatioLocked(wantedCR_d12);\n    }\n\n    function setTreasury_address(address _treasury_address) external onlyByOwner {\n        treasury_address = _treasury_address;\n    }\n\n    function setMinimumSwapsDelayInBlocks(uint256 _minimumMintRedeemDelayInBlocks) external onlyByOwner{\n        minimumMintRedeemDelayInBlocks = _minimumMintRedeemDelayInBlocks;\n    }\n\n    function setOwner(address _owner_address) external onlyByOwner {\n        require(_owner_address != address(0), \"New owner can't be zero address\");\n\n        owner_address = _owner_address;\n        emit OwnerSet(_owner_address);\n    }\n\n    function pool_claim_bdx(uint256 amount) public onlyPools {\n        unclaimedPoolsBDX = unclaimedPoolsBDX.add(amount);\n    }\n\n    function pool_transfer_claimed_bdx(address to, uint256 amount) public onlyPools {\n        unclaimedPoolsBDX = unclaimedPoolsBDX.sub(amount);\n        TransferHelper.safeTransfer(address(BDX), to, amount);\n    }\n\n    function transfer_bdx(address to, uint256 BDX_amount) external onlyByOwnerOrPool {\n        require(\n            BDX.balanceOf(address(this)).sub(unclaimedPoolsBDX) >= BDX_amount,\n            \"Not enough BDX\"\n        );\n\n        TransferHelper.safeTransfer(address(BDX), to, BDX_amount);\n    }\n\n    function transfer_bdx_force(address to, uint256 BDX_amount) external onlyByOwner {\n        TransferHelper.safeTransfer(address(BDX), to, BDX_amount);\n    }\n\n    /* ========== EVENTS ========== */\n    \n    event OwnerSet(address indexed newOwner);\n    event CollateralRatioRefreshed(uint256 global_collateral_ratio);\n    event BdStableBurned(address indexed from, address indexed to, uint256 amount);\n    event BdStableMinted(address indexed from, address indexed to, uint256 amount);\n    event PoolAdded(address pool_address);\n    event PoolRemoved(address pool_address);\n    event BDStableWETHOracleSet(address indexed bdstable_oracle_addr, address indexed weth_address);\n    event BDXWETHOracleSet(address indexed bdx_oracle_address, address indexed weth_address);\n    event EthFiatOracleSet(address eth_fiat_consumer_address);\n    event BdStableStepSet(uint256 bdStable_step_d12);\n    event PriceBandSet(uint256 _price_band_d12);\n    event PriceTargetSet(uint256 _price_target_d12);\n    event CollateralRatioPausedToggled(bool collateral_ratio_paused);\n    event CollateralRatioLocked(uint256 lockedCR_d12);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/ERC20/ERC20Custom.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.11;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\n// Due to compiling issues, _name, _symbol, and _decimals were removed\n\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20Mintable}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Custom is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) internal _balances;\n\n    mapping (address => mapping (address => uint256)) internal _allowances;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.approve(address spender, uint256 amount)\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for `sender`'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for `accounts`'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\n\n        _approve(account, _msgSender(), decreasedAllowance);\n        _burn(account, amount);\n    }\n\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n     * from the caller's allowance.\n     *\n     * See {_burn} and {_approve}.\n     */\n    function _burnFrom(address account, uint256 amount) internal virtual {\n        _burn(account, amount);\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of `from`'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of `from`'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:using-hooks.adoc[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n\n    uint256[45] private __gap;\n}"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "contracts/Bdx/BDXShares.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.11;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"../ERC20/ERC20Custom.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"../BdStable/BDStable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\n\ncontract BDXShares is ERC20Custom, Initializable {\n    using SafeMath for uint256;\n\n    /* ========== STATE VARIABLES ========== */\n    uint8 public constant decimals = 18;\n    uint256 public constant MAX_TOTAL_SUPPLY = 21*1e6*1e18;\n\n    string public symbol;\n    string public name;\n    \n    address public owner_address;\n\n    mapping(address => bool) private bdstables;\n\n    /* ========== MODIFIERS ========== */\n    \n    modifier onlyByOwner() {\n        require(msg.sender == owner_address, \"You are not an owner\");\n        _;\n    }\n\n    /* ========== CONSTRUCTOR ========== */\n\n    function initialize(\n        string memory _name,\n        string memory _symbol,\n        address _owner_address\n    )\n        external\n        initializer\n    {\n        name = _name;\n        symbol = _symbol;\n        owner_address = _owner_address;\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    function addBdStableAddress(address bdstable_contract_address) external onlyByOwner {\n        bdstables[bdstable_contract_address] = true;\n        emit BdStableAddressAdded(bdstable_contract_address);\n    }\n\n    function setOwner(address _owner_address) external onlyByOwner {\n        require(_owner_address != address(0), \"New owner can't be zero address\");\n        \n        owner_address = _owner_address;\n        emit OwnerSet(_owner_address);\n    }\n\n    function mint(address bd_stable, address to, uint256 amount) public onlyByOwner {\n        require(totalSupply().add(amount) <= MAX_TOTAL_SUPPLY, \"BDX limit reached\");\n\n        _mint(to, amount);\n\n        emit BdxMinted(address(this), to, bd_stable, amount);\n    }\n\n    /* ========== EVENTS ========== */\n    \n    event OwnerSet(address indexed newOwner);\n    event BdxBurned(address indexed from, address indexed to, address bd_stable, uint256 indexed amount);\n    event BdxMinted(address indexed from, address indexed to, address bd_stable, uint256 indexed amount);\n    event BdStableAddressAdded(address indexed addr);\n}\n"
    },
    "contracts/Oracle/IOracleBasedCryptoFiatFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.11;\r\n\r\ninterface IOracleBasedCryptoFiatFeed {   \r\n    function getPrice_1e12() external view returns (uint256);\r\n    function getDecimals() external view returns (uint8);\r\n}"
    },
    "contracts/Oracle/ICryptoPairOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.11;\n\ninterface ICryptoPairOracle {\n    \n    function consult(address tokenIn, uint256 amountIn)\n        external\n        view\n        returns (uint amountOut);\n\n    function updateOracle() external;\n\n    function shouldUpdateOracle() external view returns (bool);\n\n    function when_should_update_oracle_in_seconds() external view returns (uint256);\n}\n"
    },
    "contracts/BdStable/Pools/BdStablePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.11;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"../../Bdx/BDXShares.sol\";\nimport \"../../BdStable/BDStable.sol\";\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\nimport \"../../Oracle/ICryptoPairOracle.sol\";\nimport \"./BdPoolLibrary.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"../../ERC20/IWETH.sol\";\n\ncontract BdStablePool is Initializable {\n    using SafeMath for uint256;\n\n    /* ========== STATE VARIABLES ========== */\n\n    ERC20 private collateral_token;\n    BDXShares private BDX;\n    BDStable private BDSTABLE;\n    IWETH private NativeTokenWrapper;\n    bool public is_collateral_wrapping_native_token;\n\n    ICryptoPairOracle private collatWEthOracle;\n    address public collateral_address; // Required by frontend - frontend needs to know what collateral is used to mint\n\n    address public owner_address;\n    \n    uint256 private missing_decimals; // Number of decimals needed to get to 18\n    uint256 private collateral_decimals; // Number of decimals needed to get to 18\n    address private weth_address;\n\n    mapping(address => uint256) public redeemBDXBalances;\n    mapping(address => uint256) public redeemCollateralBalances;\n    uint256 public unclaimedPoolCollateral;\n    mapping(address => uint256) public lastRedeemed;\n\n    // AccessControl state variables\n    bool public mintPaused;\n    bool public redeemPaused;\n    bool public recollateralizePaused;\n    bool public buyBackPaused;\n    bool public collateralPricePaused;\n    bool public recollateralizeOnlyForOwner;\n    bool public buybackOnlyForOwner;\n\n    uint256 public minting_fee; //d12\n    uint256 public redemption_fee; //d12\n    uint256 public buyback_fee; //d12\n    uint256 public recollat_fee; //d12\n\n    // Pool_ceiling is the total units of collateral that a pool contract can hold\n    uint256 public pool_ceiling; // d18\n\n    // Stores price of the collateral, if price is paused\n    uint256 public pausedPrice;\n\n    // Bonus rate on BDX minted during recollateralizeBdStable(); 12 decimals of precision, set to 0.75% on genesis\n    uint256 public bonus_rate; // d12\n\n    // Number of blocks to wait before being able to collectRedemption()\n    uint256 public redemption_delay;\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyByOwner() {\n        require(msg.sender == owner_address, \"You are not the owner\");\n        _;\n    }\n\n    modifier notRedeemPaused() {\n        require(redeemPaused == false, \"Redeeming is paused\");\n        _;\n    }\n\n    modifier notMintPaused() {\n        require(mintPaused == false, \"Minting is paused\");\n        _;\n    }\n\n    /* ========== CONSTRUCTOR ========== */\n\n    function initialize(\n        address _bdstable_contract_address,\n        address _bdx_contract_address,\n        address _collateral_address,\n        address _creator_address,\n        bool _is_collateral_wrapping_native_token\n    ) \n        public\n        initializer\n    {\n        BDSTABLE = BDStable(_bdstable_contract_address);\n        BDX = BDXShares(_bdx_contract_address);\n        if(_is_collateral_wrapping_native_token) {\n            NativeTokenWrapper = IWETH(_collateral_address);\n        }\n        collateral_address = _collateral_address;\n        owner_address = _creator_address;\n        collateral_token = ERC20(_collateral_address);\n        collateral_decimals = collateral_token.decimals();\n        missing_decimals = uint256(18).sub(collateral_decimals);\n\n        is_collateral_wrapping_native_token = _is_collateral_wrapping_native_token;\n\n        pool_ceiling = 1e36; // d18\n        bonus_rate = 7500000000; // d12 0.75%\n        redemption_delay = 1;\n        minting_fee = 3000000000; // d12 0.3%\n        redemption_fee = 3000000000; // d12 0.3%\n\n        recollateralizeOnlyForOwner = true;\n        buybackOnlyForOwner = true;\n    }\n\n    /* ========== VIEWS ========== */\n\n    // Returns the value of excess collateral held in all BdStablePool related to this BdStable, compared to what is needed to maintain the global collateral ratio\n    function availableExcessCollatDV() public view returns (uint256) {\n        uint256 total_supply = BDSTABLE.totalSupply();\n        uint256 global_collateral_ratio_d12 = BDSTABLE.global_collateral_ratio_d12();\n        uint256 global_collat_value = BDSTABLE.globalCollateralValue();\n\n        // Calculates collateral needed to back each 1 BdStable with $1 of collateral at current collat ratio\n        uint256 required_collat_fiat_value_d18 = total_supply\n            .mul(global_collateral_ratio_d12)\n            .div(BdPoolLibrary.COLLATERAL_RATIO_MAX); \n\n        if (global_collat_value > required_collat_fiat_value_d18) {\n            return global_collat_value.sub(required_collat_fiat_value_d18);\n        } else {\n            return 0;\n        }\n    }\n\n     // Returns the price of the pool collateral in fiat\n    function getCollateralPrice_d12() public view returns (uint256) {\n        if(collateralPricePaused == true){\n            return pausedPrice;\n        } else {\n            uint256 eth_fiat_price_d12 = BDSTABLE.weth_fiat_price();\n            uint256 collat_eth_price =\n                collatWEthOracle.consult(\n                    weth_address,\n                    BdPoolLibrary.PRICE_PRECISION\n                );\n\n            return eth_fiat_price_d12.mul(BdPoolLibrary.PRICE_PRECISION).div(collat_eth_price);\n        }\n    }\n\n    // Returns fiat value of collateral held in this BdStable pool\n    function collatFiatBalance() public view returns (uint256) {\n        //Expressed in collateral token decimals\n        if(collateralPricePaused == true){\n            return collateral_token.balanceOf(address(this))\n                .sub(unclaimedPoolCollateral)\n                .mul(10 ** missing_decimals)\n                .mul(pausedPrice)\n                .div(BdPoolLibrary.PRICE_PRECISION);\n        } else {\n            return collateral_token.balanceOf(address(this))\n                .sub(unclaimedPoolCollateral)\n                .mul(10 ** missing_decimals)\n                .mul(getCollateralPrice_d12())\n                .div(BdPoolLibrary.PRICE_PRECISION);\n        }\n    }\n\n    /* ========== PUBLIC FUNCTIONS ========== */\n\n    function updateOraclesIfNeeded() public {\n        BDSTABLE.updateOraclesIfNeeded();\n        if(collatWEthOracle.shouldUpdateOracle()){\n            collatWEthOracle.updateOracle();\n        }\n    }\n\n    // We separate out the 1t1, fractional and algorithmic minting functions for gas efficiency\n    function mint1t1BD(uint256 collateral_amount, uint256 BD_out_min, bool useNativeToken)\n        external\n        payable\n        notMintPaused\n    {\n        updateOraclesIfNeeded();\n        uint256 collateral_amount_d18 =\n            collateral_amount * (10**missing_decimals);\n\n        BDSTABLE.refreshCollateralRatio();\n        uint256 globalCR = BDSTABLE.global_collateral_ratio_d12();\n\n        require(\n            globalCR >= BdPoolLibrary.COLLATERAL_RATIO_MAX,\n            \"Collateral ratio must be >= 1\"\n        );\n        \n        require(\n            collateral_token.balanceOf(address(this))\n                .sub(unclaimedPoolCollateral)\n                .add(collateral_amount) <= pool_ceiling,\n            \"[Pool's Closed]: Ceiling reached\"\n        );\n\n        uint256 bd_amount_d18 =\n            BdPoolLibrary.calcMint1t1BD(\n                getCollateralPrice_d12(),\n                collateral_amount_d18\n            ); //1 BD for each $1/€1/etc worth of collateral\n\n        bd_amount_d18 = (bd_amount_d18.mul(uint256(BdPoolLibrary.PRICE_PRECISION).sub(minting_fee))).div(BdPoolLibrary.PRICE_PRECISION); //remove precision at the end\n        require(BD_out_min <= bd_amount_d18, \"Slippage limit reached\");\n\n        if(useNativeToken){\n            assert(is_collateral_wrapping_native_token);\n            require(msg.value == collateral_amount, \"msg.value and collateral_amount do not match\");\n            NativeTokenWrapper.deposit{ value: collateral_amount }();\n        } else {\n            TransferHelper.safeTransferFrom(\n                address(collateral_token),\n                msg.sender,\n                address(this),\n                collateral_amount\n            );\n        }\n\n        BDSTABLE.pool_mint(msg.sender, bd_amount_d18);\n    }\n\n    // Redeem collateral. 100% collateral-backed\n    function redeem1t1BD(uint256 BD_amount, uint256 COLLATERAL_out_min)\n        external\n        notRedeemPaused\n    {\n        updateOraclesIfNeeded();\n        BDSTABLE.refreshCollateralRatio();\n\n        require(\n            BDSTABLE.global_collateral_ratio_d12() == BdPoolLibrary.COLLATERAL_RATIO_MAX,\n            \"Collateral ratio must be == 1\"\n        );\n\n        // Need to adjust for decimals of collateral\n        uint256 col_price_d12 = getCollateralPrice_d12();\n        uint256 effective_collateral_ratio_d12 = BDSTABLE.effective_global_collateral_ratio_d12();\n        uint256 cr_d12 = effective_collateral_ratio_d12 > BdPoolLibrary.COLLATERAL_RATIO_MAX ? BdPoolLibrary.COLLATERAL_RATIO_MAX : effective_collateral_ratio_d12;\n        uint256 collateral_needed = BD_amount.mul(BdPoolLibrary.PRICE_PRECISION).mul(cr_d12).div(BdPoolLibrary.PRICE_PRECISION).div(col_price_d12);\n\n        collateral_needed = (\n            collateral_needed.mul(uint256(BdPoolLibrary.PRICE_PRECISION).sub(redemption_fee))\n        ).div(BdPoolLibrary.PRICE_PRECISION);\n\n        require(\n            collateral_needed <=\n                collateral_token.balanceOf(address(this)).sub(\n                    unclaimedPoolCollateral\n                ),\n            \"Not enough collateral in pool\"\n        );\n        require(\n            COLLATERAL_out_min <= collateral_needed,\n            \"Slippage limit reached\"\n        );\n\n        if(BDSTABLE.canLegallyRedeem(msg.sender)){\n            redeemCollateralBalances[msg.sender] = redeemCollateralBalances[msg.sender]\n                .add(collateral_needed);\n        } else {\n            uint256 collateral_needed_sender = collateral_needed.div(10);\n            uint256 collateral_needed_treasury = collateral_needed.mul(9).div(10);\n\n            redeemCollateralBalances[msg.sender] = redeemCollateralBalances[msg.sender]\n                .add(collateral_needed_sender);\n\n            address treasury_address = BDSTABLE.treasury_address();\n            redeemCollateralBalances[treasury_address] = redeemCollateralBalances[treasury_address]\n                .add(collateral_needed_treasury);\n        }\n\n        unclaimedPoolCollateral = unclaimedPoolCollateral.add(collateral_needed);\n        lastRedeemed[msg.sender] = block.number;\n\n        // Move all external functions to the end\n        BDSTABLE.pool_burn_from(msg.sender, BD_amount);\n    }\n\n    // 0% collateral-backed\n    function mintAlgorithmicBdStable(uint256 bdx_amount_d18, uint256 bdStable_out_min) external notMintPaused {\n        updateOraclesIfNeeded();\n        BDSTABLE.refreshCollateralRatio();\n\n        uint256 bdx_price = BDSTABLE.BDX_price_d12();\n        require(BDSTABLE.global_collateral_ratio_d12() == 0, \"Collateral ratio must be 0\");\n\n        (uint256 bdStable_amount_d18) = BdPoolLibrary.calcMintAlgorithmicBD(bdx_price, bdx_amount_d18);\n\n        bdStable_amount_d18 = (bdStable_amount_d18.mul(uint(BdPoolLibrary.PRICE_PRECISION).sub(minting_fee))).div(BdPoolLibrary.PRICE_PRECISION);\n        require(bdStable_out_min <= bdStable_amount_d18, \"Slippage limit reached\");\n\n        TransferHelper.safeTransferFrom(address(BDX), msg.sender, address(BDSTABLE), bdx_amount_d18);\n        BDSTABLE.pool_mint(msg.sender, bdStable_amount_d18);\n    }\n\n    // Redeem BDSTABLE for BDX. 0% collateral-backed\n    function redeemAlgorithmicBdStable(uint256 bdStable_amount, uint256 bdx_out_min) external notRedeemPaused {\n        updateOraclesIfNeeded();\n        BDSTABLE.refreshCollateralRatio();\n\n        uint256 bdx_price = BDSTABLE.BDX_price_d12();\n        uint256 global_collateral_ratio_d12 = BDSTABLE.global_collateral_ratio_d12();\n\n        require(global_collateral_ratio_d12 == 0, \"Collateral ratio must be 0\"); \n        uint256 bdx_fiat_value_d18 = bdStable_amount;\n\n        bdx_fiat_value_d18 = (bdx_fiat_value_d18.mul(uint(BdPoolLibrary.PRICE_PRECISION).sub(redemption_fee))).div(BdPoolLibrary.PRICE_PRECISION); //apply fees\n\n        uint256 bdx_amount = bdx_fiat_value_d18.mul(BdPoolLibrary.PRICE_PRECISION).div(bdx_price);\n        uint256 bdx_coverage_ratio = BDSTABLE.get_effective_bdx_coverage_ratio();\n        bdx_amount = bdx_amount.mul(bdx_coverage_ratio).div(BdPoolLibrary.COLLATERAL_RATIO_PRECISION);\n        \n        if(bdx_amount > 0){\n            if(BDSTABLE.canLegallyRedeem(msg.sender)){\n               redeemBDXBalances[msg.sender] = redeemBDXBalances[msg.sender].add(bdx_amount);\n            } else {\n               uint256 bdx_amount_sender = bdx_amount.div(10);\n               uint256 bdx_amount_treasury = bdx_amount.mul(9).div(10);\n\n               redeemBDXBalances[msg.sender] = redeemBDXBalances[msg.sender].add(bdx_amount_sender);\n\n               address treasury_address = BDSTABLE.treasury_address();\n               redeemBDXBalances[treasury_address] = redeemBDXBalances[treasury_address].add(bdx_amount_treasury);\n            }\n\n            BDSTABLE.pool_claim_bdx(bdx_amount);\n        }\n        \n        lastRedeemed[msg.sender] = block.number;\n        \n        require(bdx_out_min < bdx_amount, \"Slippage limit reached\");\n\n        // Move all external functions to the end\n        BDSTABLE.pool_burn_from(msg.sender, bdStable_amount);\n    }\n\n    // Will fail if fully collateralized or fully algorithmic\n    // > 0% and < 100% collateral-backed\n    function mintFractionalBdStable(uint256 collateral_amount, uint256 bdx_in_max, uint256 bdStable_out_min, bool useNativeToken)\n        external\n        payable\n        notMintPaused\n    {\n        updateOraclesIfNeeded();\n        BDSTABLE.refreshCollateralRatio();\n\n        uint256 bdx_price = BDSTABLE.BDX_price_d12();\n        uint256 global_collateral_ratio_d12 = BDSTABLE.global_collateral_ratio_d12();\n\n        require(global_collateral_ratio_d12 < BdPoolLibrary.COLLATERAL_RATIO_MAX && global_collateral_ratio_d12 > 0, \n            \"Collateral ratio needs to be between .000001 and .999999\");\n        \n        require(\n            collateral_token.balanceOf(address(this))\n                .sub(unclaimedPoolCollateral)\n                .add(collateral_amount) <= pool_ceiling,\n            \"Pool ceiling reached, no more BdStable can be minted with this collateral\"\n        );\n\n        uint256 collateral_amount_d18 = collateral_amount * (10 ** missing_decimals);\n\n        (uint256 mint_amount, uint256 bdx_needed) = BdPoolLibrary.calcMintFractionalBD(\n            bdx_price,\n            getCollateralPrice_d12(),\n            collateral_amount_d18,\n            global_collateral_ratio_d12\n        );\n\n        mint_amount = (mint_amount.mul(uint(BdPoolLibrary.PRICE_PRECISION).sub(minting_fee))).div(BdPoolLibrary.PRICE_PRECISION);\n\n        require(bdStable_out_min <= mint_amount, \"Slippage limit reached\");\n\n        require(bdx_needed <= bdx_in_max, \"Not enough BDX inputted\");\n\n        TransferHelper.safeTransferFrom(address(BDX), msg.sender, address(BDSTABLE), bdx_needed);\n\n        if(useNativeToken){\n            assert(is_collateral_wrapping_native_token);\n            require(msg.value == collateral_amount, \"msg.value and collateral_amount do not match\");\n            NativeTokenWrapper.deposit{ value: collateral_amount }();\n        } else {\n            TransferHelper.safeTransferFrom(address(collateral_token), msg.sender, address(this), collateral_amount);\n        }\n\n        BDSTABLE.pool_mint(msg.sender, mint_amount);\n    }\n\n    // Will fail if fully collateralized or algorithmic\n    // Redeem BDSTABLE for collateral and BDX. > 0% and < 100% collateral-backed\n    function redeemFractionalBdStable(uint256 BdStable_amount, uint256 BDX_out_min, uint256 COLLATERAL_out_min) external notRedeemPaused {\n        updateOraclesIfNeeded();\n        BDSTABLE.refreshCollateralRatio();\n\n        uint256 global_collateral_ratio_d12 = BDSTABLE.global_collateral_ratio_d12();\n\n        require(    \n            global_collateral_ratio_d12 < BdPoolLibrary.COLLATERAL_RATIO_MAX && global_collateral_ratio_d12 > 0,\n            \"Collateral ratio needs to be between .000001 and .999999\");\n\n        uint256 effective_global_collateral_ratio_d12 = BDSTABLE.effective_global_collateral_ratio_d12();\n\n        uint256 cr_d12 = effective_global_collateral_ratio_d12 < global_collateral_ratio_d12\n            ? effective_global_collateral_ratio_d12\n            : global_collateral_ratio_d12;\n\n        uint256 BdStable_amount_post_fee = (BdStable_amount.mul(uint(BdPoolLibrary.PRICE_PRECISION).sub(redemption_fee))).div(BdPoolLibrary.PRICE_PRECISION);\n\n        uint256 bdx_fiat_value_d18 = BdStable_amount_post_fee.sub(\n                BdStable_amount_post_fee.mul(cr_d12).div(BdPoolLibrary.PRICE_PRECISION)\n            );\n\n        uint256 bdx_amount = bdx_fiat_value_d18.mul(BdPoolLibrary.PRICE_PRECISION).div(BDSTABLE.BDX_price_d12());\n        uint256 bdx_coverage_ratio = BDSTABLE.get_effective_bdx_coverage_ratio();\n        bdx_amount = bdx_amount.mul(bdx_coverage_ratio).div(BdPoolLibrary.COLLATERAL_RATIO_PRECISION);\n\n        // Need to adjust for decimals of collateral\n        uint256 BdStable_amount_precision = BdStable_amount_post_fee.div(10 ** missing_decimals);\n        uint256 collateral_fiat_value = BdStable_amount_precision.mul(cr_d12).div(BdPoolLibrary.PRICE_PRECISION);\n        uint256 collateral_needed = collateral_fiat_value.mul(BdPoolLibrary.PRICE_PRECISION).div(getCollateralPrice_d12());\n\n        require(collateral_needed <= collateral_token.balanceOf(address(this)).sub(unclaimedPoolCollateral), \"Not enough collateral in pool\");\n        require(COLLATERAL_out_min <= collateral_needed, \"Slippage limit reached [collateral]\");\n        require(BDX_out_min <= bdx_amount, \"Slippage limit reached [BDX]\");\n\n        if(BDSTABLE.canLegallyRedeem(msg.sender)){\n            redeemCollateralBalances[msg.sender] = redeemCollateralBalances[msg.sender].add(collateral_needed);\n        } else {\n            uint256 collateral_needed_sender = collateral_needed.div(10);\n            uint256 collateral_needed_treasury = collateral_needed.mul(9).div(10);\n\n            redeemCollateralBalances[msg.sender] = redeemCollateralBalances[msg.sender]\n                .add(collateral_needed_sender);\n\n            address treasury_address = BDSTABLE.treasury_address();\n            redeemCollateralBalances[treasury_address] = redeemCollateralBalances[treasury_address]\n                .add(collateral_needed_treasury);\n        }\n\n        unclaimedPoolCollateral = unclaimedPoolCollateral.add(collateral_needed);\n\n        if(bdx_amount > 0){\n            if(BDSTABLE.canLegallyRedeem(msg.sender)){\n                redeemBDXBalances[msg.sender] = redeemBDXBalances[msg.sender].add(bdx_amount);\n            } else {\n                uint256 bdx_amount_sender = bdx_amount.div(10);\n                uint256 bdx_amount_treasury = bdx_amount.mul(9).div(10);\n\n                redeemBDXBalances[msg.sender] = redeemBDXBalances[msg.sender].add(bdx_amount_sender);\n\n                address treasury_address = BDSTABLE.treasury_address();\n                redeemBDXBalances[treasury_address] = redeemBDXBalances[treasury_address].add(bdx_amount_treasury);\n            }\n\n            BDSTABLE.pool_claim_bdx(bdx_amount);\n        }\n\n        lastRedeemed[msg.sender] = block.number;\n        \n        // Move all external functions to the end\n        BDSTABLE.pool_burn_from(msg.sender, BdStable_amount);\n    }\n\n    // After a redemption happens, transfer the newly minted BDX and owed collateral from this pool\n    // contract to the user. Redemption is split into two functions to prevent flash loans from being able\n    // to take out BdStable/collateral from the system, use an AMM to trade the new price, and then mint back into the system.\n    function collectRedemption(bool useNativeToken)\n        external\n    {\n        require(\n            (lastRedeemed[msg.sender].add(redemption_delay)) <= block.number,\n            \"Must wait for redemption_delay blocks before collecting redemption\"\n        );\n        bool sendBDX = false;\n        bool sendCollateral = false;\n        uint256 BDXAmount;\n        uint256 CollateralAmount;\n\n        // Use Checks-Effects-Interactions pattern\n        if (redeemBDXBalances[msg.sender] > 0) {\n            BDXAmount = redeemBDXBalances[msg.sender];\n            redeemBDXBalances[msg.sender] = 0;\n\n            sendBDX = true;\n        }\n\n        if (redeemCollateralBalances[msg.sender] > 0) {\n            CollateralAmount = redeemCollateralBalances[msg.sender];\n            redeemCollateralBalances[msg.sender] = 0;\n            unclaimedPoolCollateral = unclaimedPoolCollateral.sub(\n                CollateralAmount\n            );\n\n            sendCollateral = true;\n        }\n\n        if (sendBDX == true) {\n            BDSTABLE.pool_transfer_claimed_bdx(msg.sender, BDXAmount);\n        }\n        if (sendCollateral == true) {\n            if(useNativeToken){\n                NativeTokenWrapper.withdraw(CollateralAmount);\n                TransferHelper.safeTransferETH(msg.sender, CollateralAmount);\n            } else {\n                TransferHelper.safeTransfer(address(collateral_token), msg.sender, CollateralAmount);\n            }\n        }\n    }\n\n    // When the protocol is recollateralizing, we need to give a discount of BDX to hit the new CR target\n    // Thus, if the target collateral ratio is higher than the actual value of collateral, minters get BDX for adding collateral\n    // This function simply rewards anyone that sends collateral to a pool with the same amount of BDX + the bonus rate\n    // Anyone can call this function to recollateralize the protocol and take the extra BDX value from the bonus rate as an arb opportunity\n    function recollateralizeBdStable(uint256 collateral_amount, uint256 BDX_out_min, bool useNativeToken)\n        external\n        payable\n    {\n        require(recollateralizePaused == false, \"Recollateralize is paused\");\n\n        if(recollateralizeOnlyForOwner){\n            require(msg.sender == owner_address, \"Currently only owner can recollateralize\");\n        }\n\n        updateOraclesIfNeeded();\n        BDSTABLE.refreshCollateralRatio();\n\n        uint256 collateral_amount_d18 = collateral_amount * (10 ** missing_decimals);\n        uint256 bdx_price = BDSTABLE.BDX_price_d12();\n        uint256 bdStable_total_supply = BDSTABLE.totalSupply();\n        uint256 global_collateral_ratio_d12 = BDSTABLE.global_collateral_ratio_d12();\n        uint256 global_collat_value = BDSTABLE.globalCollateralValue();\n\n        (uint256 collateral_units, uint256 amount_to_recollat) = BdPoolLibrary.calcRecollateralizeBdStableInner(\n            collateral_amount_d18,\n            getCollateralPrice_d12(),\n            global_collat_value,\n            bdStable_total_supply,\n            global_collateral_ratio_d12\n        ); \n\n        uint256 collateral_units_precision = collateral_units.div(10 ** missing_decimals);\n\n        uint256 bdx_paid_back = amount_to_recollat.mul(uint(BdPoolLibrary.PRICE_PRECISION).add(bonus_rate).sub(recollat_fee)).div(bdx_price);\n        uint256 bdx_coverage_ratio = BDSTABLE.get_effective_bdx_coverage_ratio();\n        bdx_paid_back = bdx_paid_back.mul(bdx_coverage_ratio).div(BdPoolLibrary.COLLATERAL_RATIO_PRECISION);\n\n        require(BDX_out_min <= bdx_paid_back, \"Slippage limit reached\");\n\n        if(useNativeToken){\n            assert(is_collateral_wrapping_native_token);\n\n            require(msg.value == collateral_amount, \"msg.value and collateral_amount do not match\");\n            // no need to check collateral_units_precision, it's <= then collateral_amount\n\n            NativeTokenWrapper.deposit{ value: collateral_units_precision }();\n\n            // refund remaining native token, if any left\n            if (msg.value > collateral_units_precision) {\n                TransferHelper.safeTransferETH(msg.sender, msg.value - collateral_units_precision);\n            }\n\n        } else {\n            TransferHelper.safeTransferFrom(address(collateral_token), msg.sender, address(this), collateral_units_precision);\n        }\n\n        if(bdx_paid_back > 0){\n            BDSTABLE.transfer_bdx(msg.sender, bdx_paid_back);\n        }\n\n        emit Recollateralized(collateral_units_precision, bdx_paid_back);\n    }\n\n    // Function can be called by an BDX holder to have the protocol buy back BDX with excess collateral value from a desired collateral pool\n    // This can also happen if the collateral ratio > 1\n    function buyBackBDX(uint256 BDX_amount, uint256 COLLATERAL_out_min, bool useNativeToken)\n        external\n    {\n        require(buyBackPaused == false, \"Buyback is paused\");\n\n        if(buybackOnlyForOwner){\n            require(msg.sender == owner_address, \"Currently only owner can buyback\");\n        }\n\n        updateOraclesIfNeeded();\n        \n        uint256 bdx_price = BDSTABLE.BDX_price_d12();\n    \n        (uint256 collateral_equivalent_d18) = BdPoolLibrary.calcBuyBackBDX(\n            availableExcessCollatDV(),\n            bdx_price,\n            getCollateralPrice_d12(),\n            BDX_amount\n        ).mul(uint(BdPoolLibrary.PRICE_PRECISION).sub(buyback_fee)).div(BdPoolLibrary.PRICE_PRECISION);\n\n        uint256 collateral_precision = collateral_equivalent_d18.div(10 ** missing_decimals);\n\n        require(COLLATERAL_out_min <= collateral_precision, \"Slippage limit reached\");\n        \n        // Take bdx form sender\n        TransferHelper.safeTransferFrom(address(BDX), msg.sender, address(BDSTABLE), BDX_amount);\n        \n        if(useNativeToken){\n            // Give the sender their desired collateral\n            NativeTokenWrapper.withdraw(collateral_precision);\n            TransferHelper.safeTransferETH(msg.sender, collateral_precision);\n        }\n        else {\n            // Give the sender their desired collateral\n            TransferHelper.safeTransfer(address(collateral_token), msg.sender, collateral_precision);\n        }\n        emit BoughtBack(BDX_amount, collateral_precision);\n    }\n\n    receive() external payable {\n        assert(msg.sender == address(NativeTokenWrapper)); // only accept ETH via fallback from the WETH contract\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    function setCollatWETHOracle(\n        address _collateral_weth_oracle_address,\n        address _weth_address\n    ) \n        external\n        onlyByOwner \n    {\n        collatWEthOracle = ICryptoPairOracle(_collateral_weth_oracle_address);\n        weth_address = _weth_address;\n\n        emit CollateralWethOracleSet(_collateral_weth_oracle_address, _weth_address);\n    }\n\n    function toggleMintingPaused() external onlyByOwner {\n        mintPaused = !mintPaused;\n\n        emit MintingPausedToggled(mintPaused);\n    }\n\n    function toggleRedeemingPaused() external onlyByOwner {\n        redeemPaused = !redeemPaused;\n\n        emit RedeemingPausedToggled(redeemPaused);\n    }\n\n    function toggleRecollateralizePaused() external onlyByOwner {\n        recollateralizePaused = !recollateralizePaused;\n\n        emit RecollateralizePausedToggled(recollateralizePaused);\n    }\n    \n    function toggleBuybackPaused() external onlyByOwner {\n        buyBackPaused = !buyBackPaused;\n\n        emit BuybackPausedToggled(buyBackPaused);\n    }\n\n    function toggleBuybackOnlyForOwner() external onlyByOwner {\n        buybackOnlyForOwner = !buybackOnlyForOwner;\n\n        emit BuybackOnlyForOwnerToggled(buybackOnlyForOwner);\n    }\n\n    function toggleRecollateralizeOnlyForOwner() external onlyByOwner {\n        recollateralizeOnlyForOwner = !recollateralizeOnlyForOwner;\n\n        emit RecollateralizeOnlyForOwnerToggled(recollateralizeOnlyForOwner);\n    }\n\n    function toggleCollateralPricePaused(uint256 _new_price) external onlyByOwner {\n        // If pausing, set paused price; else if unpausing, clear pausedPrice\n        if(collateralPricePaused == false){\n            pausedPrice = _new_price;\n        } else {\n            pausedPrice = 0;\n        }\n        collateralPricePaused = !collateralPricePaused;\n\n        emit CollateralPriceToggled(collateralPricePaused);\n    }\n\n    // Combined into one function due to 24KiB contract memory limit\n    function setPoolParameters(\n        uint256 new_ceiling, \n        uint256 new_bonus_rate, \n        uint256 new_redemption_delay, \n        uint256 new_mint_fee,\n        uint256 new_redeem_fee, \n        uint256 new_buyback_fee,\n        uint256 new_recollat_fee\n    )\n        external\n        onlyByOwner \n    {\n        pool_ceiling = new_ceiling;\n        bonus_rate = new_bonus_rate;\n        redemption_delay = new_redemption_delay;\n        minting_fee = new_mint_fee;\n        redemption_fee = new_redeem_fee;\n        buyback_fee = new_buyback_fee;\n        recollat_fee = new_recollat_fee;\n\n        emit PoolParametersSet(new_ceiling, new_bonus_rate, new_redemption_delay, new_mint_fee, new_redeem_fee, new_buyback_fee, new_recollat_fee);\n    }\n\n    function setOwner(address _owner_address) external onlyByOwner {\n        require(_owner_address != address(0), \"New owner can't be zero address\");\n\n        owner_address = _owner_address;\n        emit OwnerSet(_owner_address);\n    }\n\n    /* ========== EVENTS ========== */\n\n    event OwnerSet(address indexed newOwner);\n    event PoolParametersSet(uint256 new_ceiling, uint256 new_bonus_rate, uint256 new_redemption_delay, uint256 new_mint_fee, uint256 new_redeem_fee, uint256 new_buyback_fee, uint256 new_recollat_fee);\n    event MintingPausedToggled(bool toggled);\n    event RedeemingPausedToggled(bool toggled);\n    event RecollateralizePausedToggled(bool toggled);\n    event BuybackPausedToggled(bool toggled);\n    event CollateralPriceToggled(bool toggled);\n    event CollateralWethOracleSet(address indexed collateral_weth_oracle_address, address indexed weth_address);\n    event RecollateralizeOnlyForOwnerToggled(bool recollateralizeOnlyForOwner);\n    event BuybackOnlyForOwnerToggled(bool buybackOnlyForOwner);\n    event Recollateralized(uint256 indexed collateral_amount_paid, uint256 indexed bdx_paid_back);\n    event BoughtBack(uint256 indexed bdx_amount_paid, uint256 indexed collateral_paid_back);\n}\n"
    },
    "contracts/BdStable/Pools/BdPoolLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.6.11;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\nlibrary BdPoolLibrary {\n    using SafeMath for uint256;\n\n    // Constants for various precisions\n    uint256 public constant PRICE_PRECISION = 1e12;\n    uint256 public constant COLLATERAL_RATIO_PRECISION = 1e12;\n    uint256 public constant COLLATERAL_RATIO_MAX = 1e12;\n\n    // ================ Functions ================\n\n    function calcMint1t1BD(uint256 col_price, uint256 collateral_amount_d18) public pure returns (uint256) {\n        return (collateral_amount_d18.mul(col_price)).div(PRICE_PRECISION);\n    }\n\n    // Must be internal because of the struct\n    function calcMintFractionalBD(uint256 bdx_price_fiat_d12, uint256 col_price_fiat_d12, uint256 collateral_amount_d18, uint256 col_ratio_d12) internal pure returns (uint256, uint256) {\n        // Since solidity truncates division, every division operation must be the last operation in the equation to ensure minimum error\n        // The contract must check the proper ratio was sent to mint BdStable. We do this by seeing the minimum mintable BdStable based on each amount \n\n        uint256 c_fiat_value_d18 = collateral_amount_d18.mul(col_price_fiat_d12).div(PRICE_PRECISION);\n        \n        uint calculated_bdx_fiat_value_d18 = \n                    (c_fiat_value_d18.mul(COLLATERAL_RATIO_PRECISION).div(col_ratio_d12))\n                    .sub(c_fiat_value_d18);\n\n        uint calculated_bdx_needed = calculated_bdx_fiat_value_d18.mul(PRICE_PRECISION).div(bdx_price_fiat_d12);\n\n        return (\n            c_fiat_value_d18.add(calculated_bdx_fiat_value_d18),\n            calculated_bdx_needed\n        );\n    }\n\n    function calcMintAlgorithmicBD(uint256 bdx_price_fiat_d12, uint256 bdx_amount_d18) public pure returns (uint256) {\n        return bdx_amount_d18.mul(bdx_price_fiat_d12).div(PRICE_PRECISION);\n    }\n\n    function calcRecollateralizeBdStableInner(\n        uint256 collateral_amount_d18,\n        uint256 col_price,\n        uint256 global_collat_value,\n        uint256 bdStable_total_supply,\n        uint256 global_collateral_ratio\n    ) public pure returns (uint256, uint256) {\n        uint256 collat_value_attempted = collateral_amount_d18.mul(col_price).div(PRICE_PRECISION);\n        uint256 effective_collateral_ratio = global_collat_value.mul(PRICE_PRECISION).div(bdStable_total_supply); //returns it in 1e12\n        uint256 recollat_possible = (global_collateral_ratio.mul(bdStable_total_supply).sub(bdStable_total_supply.mul(effective_collateral_ratio))).div(COLLATERAL_RATIO_PRECISION);\n\n        uint256 amount_to_recollat;\n        if(collat_value_attempted <= recollat_possible){\n            amount_to_recollat = collat_value_attempted;\n        } else {\n            amount_to_recollat = recollat_possible;\n        }\n\n        return (amount_to_recollat.mul(PRICE_PRECISION).div(col_price), amount_to_recollat);\n    }\n\n    // Must be internal because of the struct\n    function calcBuyBackBDX(uint256 excess_collateral_fiat_value_d18, uint256 bdx_price_fiat_d12, uint256 col_price_fiat_d12, uint256 bdx_amount_d18) internal pure returns (uint256) {\n        // If the total collateral value is higher than the amount required at the current collateral ratio then buy back up to the possible BDX with the desired collateral\n        require(excess_collateral_fiat_value_d18 > 0, \"No excess collateral to buy back!\");\n\n        // Make sure not to take more than is available\n        uint256 bdx_fiat_value_d18 = bdx_amount_d18.mul(bdx_price_fiat_d12).div(PRICE_PRECISION);\n        require(bdx_fiat_value_d18 <= excess_collateral_fiat_value_d18, \"You are trying to buy back more than the excess!\");\n\n        // Get the equivalent amount of collateral based on the market value of BDX provided \n        uint256 collateral_equivalent_d18 = bdx_fiat_value_d18.mul(PRICE_PRECISION).div(col_price_fiat_d12);\n\n        return (\n            collateral_equivalent_d18\n        );\n    }\n}"
    },
    "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity >=0.4.24 <0.8.0;\n\nimport \"../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@uniswap/lib/contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.6.0;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeApprove: approve failed'\n        );\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeTransfer: transfer failed'\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::transferFrom: transferFrom failed'\n        );\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\n    }\n}\n"
    },
    "contracts/ERC20/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.11;\n\ninterface IWETH {\n    function deposit() external payable;\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address src, address dst, uint wad) external returns (bool);\n    function withdraw(uint) external;\n}"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/Utils/BDLens.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma experimental ABIEncoderV2;\npragma solidity 0.6.11;\n// file: BDLens.sol\n\nimport \"../BdStable/BDStable.sol\";\nimport \"../Staking/StakingRewards.sol\";\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\n// used to \"waste\" blocks for truffle tests\ncontract BDLens is OwnableUpgradeable {\n    address public BDX;\n    address public SwapFactory;\n    address public SwapRouter;\n    address public StakingRewardsDistribution;\n    address public Vesting;\n    address[] public BdStables;\n    address[] public Stakings;\n    address public PriceFeed_EUR_USD;\n\n    string public nativeTokenName;\n\n    function initialize(string memory _nativeTokenName) \n        public\n        initializer\n    {\n        nativeTokenName = _nativeTokenName;\n        __Ownable_init();\n    }\n\n    function setBDX(address _bdx)\n        external\n        onlyByOwner\n    {\n        BDX = _bdx;\n    }\n\n    function setSwapFactory(address _swapFactory)\n        external\n        onlyByOwner\n    {\n        SwapFactory = _swapFactory;\n    }\n\n    function setSwapRouter(address _swapRouter)\n        external\n        onlyByOwner\n    {\n        SwapRouter = _swapRouter;\n    }\n\n    function setStakingRewardsDistribution(address _stakingRewardsDistribution)\n        external\n        onlyByOwner\n    {\n        StakingRewardsDistribution = _stakingRewardsDistribution;\n    }\n\n    function setVesting(address _vesting)\n    external\n    onlyByOwner\n    {\n        Vesting = _vesting;\n    }\n\n    function pushBdStable(address _bdstable)\n        external\n        onlyByOwner\n    {\n        BdStables.push(_bdstable);\n    }\n\n    function pushStaking(address _staking)\n        external\n        onlyByOwner\n    {\n        Stakings.push(_staking);\n    }\n\n    function setPriceFeed_EUR_USD(address feed)\n        external\n        onlyByOwner\n    {\n        PriceFeed_EUR_USD = feed;\n    }\n\n    function deleteFromBdStables(address _bdStable)\n        external\n        onlyByOwner\n    {\n        for (uint i = 0; i < BdStables.length; i++) {\n            if (BdStables[i] == _bdStable) {\n                BdStables[i] = BdStables[BdStables.length - 1];\n                BdStables.pop();\n                return;\n            }\n        }\n    }\n\n    function deleteFromStakings(address _stakings)\n        external\n        onlyByOwner\n    {\n        for (uint i = 0; i < Stakings.length; i++) {\n            if (Stakings[i] == _stakings) {\n                Stakings[i] = Stakings[Stakings.length - 1];\n                Stakings.pop();\n                return;\n            }\n        }\n    }\n\n    function BdStablesLength() public view returns (uint256) {\n        return BdStables.length;\n    }\n\n    struct BdStableInfo {\n        string fiat;\n        address token;\n    }\n\n    function AllBdStables() external view returns (BdStableInfo[] memory) {\n        BdStableInfo[] memory infos = new BdStableInfo[](BdStables.length);\n        for(uint i = 0; i < BdStables.length; i++) {\n            infos[i] = (BdStableInfo(BDStable(BdStables[i]).fiat(), BdStables[i]));\n        }\n        return infos;\n    }\n\n    function StakingsLength() public view returns (uint256) {\n        return Stakings.length;\n    }\n\n    struct StakingInfo {\n        address lp;\n        address token;\n    }\n\n    function AllStakings() external view returns (StakingInfo[] memory) {\n        StakingInfo[] memory infos = new StakingInfo[](Stakings.length);\n        for(uint i = 0; i < Stakings.length; i++) {\n            infos[i] = (StakingInfo(address(StakingRewards(Stakings[i]).stakingToken()), Stakings[i]));\n        }\n        return infos;\n    }\n\n    modifier onlyByOwner() {\n        require(msg.sender == owner(),  \"You are not the owner\");\n        _;\n    }   \n}\n"
    },
    "contracts/Staking/StakingRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.11;\npragma experimental ABIEncoderV2;\n\n// Modified from Synthetixio\n// https://raw.githubusercontent.com/Synthetixio/synthetix/develop/contracts/StakingRewards.sol\n// Then modified from FRAX\n// https://github.com/blindexgit/BlinDEX/blob/551b521/contracts/Staking/StakingRewards.sol\n\nimport \"../Math/Math.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"./StakingRewardsDistribution.sol\";\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\ncontract StakingRewards is \n    PausableUpgradeable,\n    OwnableUpgradeable\n{\n    using SafeERC20 for ERC20;\n    using SafeMath for uint256;\n\n    // Constant for various precisions\n    uint256 public constant LOCK_MULTIPLIER_PRECISION = 1e6;\n\n    uint256 public constant REWARD_PRECISION = 1e18;\n\n    uint256 private DeploymentTimestamp;\n\n    uint256 private constant _REENTRY_GUARD_NOT_ENTERED = 1;\n    uint256 private constant _REENTRY_GUARD_ENTERED = 2;\n\n    // uint256 is cheaper than bool\n    uint256 private _reentry_guard_status;\n\n    /* ========== STATE VARIABLES ========== */\n\n    ERC20 public stakingToken;\n    StakingRewardsDistribution private stakingRewardsDistribution;\n\n    uint256 public periodFinish;\n    bool public isTrueBdPool;\n\n    uint256 public rewardsDurationSeconds;\n\n    uint256 public lastUpdateTime; // time when recent reward per token has been calculated\n    uint256 public rewardPerTokenStored_REWARD_PRECISION;\n\n    mapping(address => uint256) public userRewardPerTokenPaid_REWARD_PRECISION;\n    mapping(address => uint256) public rewards;\n\n    uint256 private _staking_token_supply;\n    uint256 private _staking_token_boosted_supply;\n    mapping(address => uint256) private _unlocked_balances;\n    mapping(address => uint256) private _locked_balances;\n    mapping(address => uint256) private _boosted_balances;\n\n    mapping(address => LockedStake[]) private lockedStakes;\n\n    mapping(address => bool) public greylist;\n\n    bool public unlockedStakes; // Release lock stakes in case of system migration\n\n    struct LockedStake {\n        bytes32 kek_id;\n        uint256 start_timestamp;\n        uint256 amount;\n        uint256 ending_timestamp;\n        uint256 multiplier_LOCK_MULTIPLIER_PRECISION;\n    }\n\n    /* ========== CONSTRUCTOR ========== */\n\n    function initialize (\n        address _stakingToken,\n        address _stakingRewardsDistribution,\n        bool _isTrueBdPool\n    ) \n        external\n        initializer\n    {\n        __Ownable_init();\n        __Pausable_init();\n\n        stakingToken = ERC20(_stakingToken);\n        stakingRewardsDistribution = StakingRewardsDistribution(_stakingRewardsDistribution);\n        DeploymentTimestamp = block.timestamp;\n        isTrueBdPool = _isTrueBdPool;\n\n        rewardsDurationSeconds = 604800; // 7 * 86400  (7 days)\n        unlockedStakes = false;\n\n        lastUpdateTime = block.timestamp;\n        periodFinish = block.timestamp.add(rewardsDurationSeconds);\n\n        _reentry_guard_status = _REENTRY_GUARD_NOT_ENTERED;\n    }\n\n    /* ========== VIEWS ========== */\n\n    function totalSupply() public view returns (uint256) {\n        return _staking_token_supply;\n    }\n\n    function totalBoostedSupply() external view returns (uint256) {\n        return _staking_token_boosted_supply;\n    }\n\n    function lockedStakingMultiplier_LOCK_MULTIPLIER_PRECISION(uint256 yearsNo) public pure returns (uint256) {\n        if(yearsNo == 10){\n            return 50000000;\n        } else if(yearsNo == 5){\n            return 10000000;\n        } else if(yearsNo == 3){\n            return 3000000;\n        } else if(yearsNo == 2){\n            return 2333000;\n        } else if(yearsNo == 1){\n            return 1667000;\n        }\n        else{\n            revert(\"Not supported staking duration\");\n        }\n    }\n\n    // Total unlocked and locked liquidity tokens\n    function balanceOf(address account) public view returns (uint256) {\n        return (_unlocked_balances[account]).add(_locked_balances[account]);\n    }\n\n    // Total unlocked liquidity tokens\n    function unlockedBalanceOf(address account) external view returns (uint256) {\n        return _unlocked_balances[account];\n    }\n\n    // Total locked liquidity tokens\n    function lockedBalanceOf(address account) public view returns (uint256) {\n        return _locked_balances[account];\n    }\n\n    // Total 'balance' used for calculating the percent of the pool the account owns\n    // Takes into account the locked stake time multiplier\n    function boostedBalanceOf(address account) external view returns (uint256) {\n        return _boosted_balances[account];\n    }\n\n    function lockedStakesOf(address account) external view returns (LockedStake[] memory) {\n        return lockedStakes[account];\n    }\n\n    function stakingDecimals() external view returns (uint256) {\n        return stakingToken.decimals();\n    }\n\n    function lastTimeRewardApplicable() public view returns (uint256) {\n        return Math.min(block.timestamp, periodFinish);\n    }\n\n    function rewardPerToken() public view returns (uint256) {\n        if (_staking_token_supply == 0) {\n            return rewardPerTokenStored_REWARD_PRECISION;\n        }\n        else {\n            return rewardPerTokenStored_REWARD_PRECISION\n                .add(lastTimeRewardApplicable()\n                    .sub(lastUpdateTime)\n                    .mul(stakingRewardsDistribution.getRewardRatePerSecond(address(this)))\n                    .mul(REWARD_PRECISION)\n                    .div(_staking_token_boosted_supply));\n        }\n    }\n\n    function earned(address account) public view returns (uint256) {\n        return _boosted_balances[account]\n            .mul(\n                rewardPerToken()\n                .sub(userRewardPerTokenPaid_REWARD_PRECISION[account]))\n            .div(REWARD_PRECISION)\n            .add(rewards[account]);\n    }\n\n    // Precision 1e18 for compatibility with ERC20 token\n    function getRewardForDuration() external view returns (uint256) {\n        return stakingRewardsDistribution.getRewardRatePerSecond(address(this))\n            .mul(rewardsDurationSeconds);\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    function stake(uint256 amount) external nonReentrant whenNotPaused updateReward(msg.sender) {\n        require(amount > 0, \"Cannot stake 0\");\n        require(greylist[msg.sender] == false, \"address has been greylisted\");\n\n        // Staking token supply and boosted supply\n        _staking_token_supply = _staking_token_supply.add(amount);\n        _staking_token_boosted_supply = _staking_token_boosted_supply.add(amount);\n\n        // Staking token balance and boosted balance\n        _unlocked_balances[msg.sender] = _unlocked_balances[msg.sender].add(amount);\n        _boosted_balances[msg.sender] = _boosted_balances[msg.sender].add(amount);\n\n        // Pull the tokens from the staker\n        TransferHelper.safeTransferFrom(address(stakingToken), msg.sender, address(this), amount);\n\n        emit Staked(msg.sender, amount);\n    }\n\n    function stakeLocked(uint256 amount, uint256 yearsNo) external nonReentrant whenNotPaused updateReward(msg.sender) {\n        require(amount > 0, \"Cannot stake 0\");\n        if(yearsNo == 10){\n            require(\n                isTrueBdPool,\n                \"You can only stake locked liquidity 10 years for true BD pools\"\n            );\n        }\n        else{\n            require(\n                yearsNo == 1 || yearsNo == 2 || yearsNo == 3 || yearsNo == 5 || yearsNo == 10,\n                \"You can only stake locked liquidity for 1, 2, 3, 5 or 10 years\"\n            );\n        }\n        require(greylist[msg.sender] == false, \"address has been greylisted\");\n\n        uint256 secs = yearsNo * 365 * 24 * 60 * 60;\n\n        uint256 multiplier = lockedStakingMultiplier_LOCK_MULTIPLIER_PRECISION(yearsNo);\n        uint256 boostedAmount = amount.mul(multiplier).div(LOCK_MULTIPLIER_PRECISION);\n        lockedStakes[msg.sender].push(LockedStake(\n            keccak256(abi.encodePacked(msg.sender, block.timestamp, amount)),\n            block.timestamp,\n            amount,\n            block.timestamp.add(secs),\n            multiplier\n        ));\n\n        // Staking token supply and boosted supply\n        _staking_token_supply = _staking_token_supply.add(amount);\n        _staking_token_boosted_supply = _staking_token_boosted_supply.add(boostedAmount);\n\n        // Staking token balance and boosted balance\n        _locked_balances[msg.sender] = _locked_balances[msg.sender].add(amount);\n        _boosted_balances[msg.sender] = _boosted_balances[msg.sender].add(boostedAmount);\n\n        // Pull the tokens from the staker\n        TransferHelper.safeTransferFrom(address(stakingToken), msg.sender, address(this), amount);\n\n        emit StakeLocked(msg.sender, amount, secs);\n    }\n\n    function withdraw(uint256 amount) public nonReentrant updateReward(msg.sender) {\n        require(amount > 0, \"Cannot withdraw 0\");\n\n        // Staking token balance and boosted balance\n        _unlocked_balances[msg.sender] = _unlocked_balances[msg.sender].sub(amount);\n        _boosted_balances[msg.sender] = _boosted_balances[msg.sender].sub(amount);\n\n        // Staking token supply and boosted supply\n        _staking_token_supply = _staking_token_supply.sub(amount);\n        _staking_token_boosted_supply = _staking_token_boosted_supply.sub(amount);\n\n        // Give the tokens to the withdrawer\n        stakingToken.safeTransfer(msg.sender, amount);\n        emit Withdrawn(msg.sender, amount);\n    }\n\n    function withdrawLocked(bytes32 kek_id) public nonReentrant updateReward(msg.sender) {\n        LockedStake memory thisStake;\n        thisStake.amount = 0;\n        uint theIndex;\n        for (uint i = 0; i < lockedStakes[msg.sender].length; i++){ \n            if (kek_id == lockedStakes[msg.sender][i].kek_id){\n                thisStake = lockedStakes[msg.sender][i];\n                theIndex = i;\n                break;\n            }\n        }\n        require(thisStake.kek_id == kek_id, \"Stake not found\");\n        require(block.timestamp >= thisStake.ending_timestamp || unlockedStakes == true, \"Stake is still locked!\");\n\n        uint256 theAmount = thisStake.amount;\n        uint256 boostedAmount = theAmount.mul(thisStake.multiplier_LOCK_MULTIPLIER_PRECISION).div(LOCK_MULTIPLIER_PRECISION);\n\n        if (theAmount > 0){\n            // Staking token balance and boosted balance\n            _locked_balances[msg.sender] = _locked_balances[msg.sender].sub(theAmount);\n            _boosted_balances[msg.sender] = _boosted_balances[msg.sender].sub(boostedAmount);\n\n            // Staking token supply and boosted supply\n            _staking_token_supply = _staking_token_supply.sub(theAmount);\n            _staking_token_boosted_supply = _staking_token_boosted_supply.sub(boostedAmount);\n\n            // Remove the stake from the array\n            delete lockedStakes[msg.sender][theIndex];\n\n            // Give the tokens to the withdrawer\n            stakingToken.safeTransfer(msg.sender, theAmount);\n\n            emit WithdrawnLocked(msg.sender, theAmount, kek_id);\n        }\n    }\n\n    function getReward() public nonReentrant updateReward(msg.sender) {\n        uint256 reward = rewards[msg.sender];\n        if (reward > 0) {\n            rewards[msg.sender] = 0;\n\n            uint256 immediatelyReleasedReward = stakingRewardsDistribution.releaseReward(msg.sender, reward);\n\n            emit RewardPaid(msg.sender, immediatelyReleasedReward);\n            emit RewardVested(msg.sender, reward - immediatelyReleasedReward);\n        }\n    }\n\n    function renewIfApplicable() external {\n        if (block.timestamp > periodFinish) {\n            retroCatchUp();\n        }\n    }\n\n    // If the period expired, renew it\n    function retroCatchUp() internal {\n        // Failsafe check\n        require(block.timestamp > periodFinish, \"Period has not expired yet!\");\n\n        uint256 num_periods_elapsed = uint256(block.timestamp.sub(periodFinish)) / rewardsDurationSeconds; // Floor division to the nearest period\n\n        periodFinish = periodFinish.add((num_periods_elapsed.add(1)).mul(rewardsDurationSeconds));\n\n        rewardPerTokenStored_REWARD_PRECISION = rewardPerToken();\n\n        lastUpdateTime = lastTimeRewardApplicable();\n\n        emit RewardsPeriodRenewed(address(stakingToken));\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    // Added to support recovering LP Rewards from other systems to be distributed to holders\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyByOwner {\n        // Admin cannot withdraw the staking token from the contract\n        require(tokenAddress != address(stakingToken));\n        ERC20(tokenAddress).transfer(owner(), tokenAmount);\n        emit Recovered(tokenAddress, tokenAmount);\n    }\n\n    function setRewardsDuration(uint256 _rewardsDurationSeconds) external onlyByOwner {\n        require(\n            periodFinish == 0 || block.timestamp > periodFinish,\n            \"Previous rewards period must be complete before changing the duration for the new period\"\n        );\n        rewardsDurationSeconds = _rewardsDurationSeconds;\n        emit RewardsDurationUpdated(rewardsDurationSeconds);\n    }\n\n    function setIsAddressGraylisted(address _address, bool isGraylisted) external onlyByOwner {\n        greylist[_address] = isGraylisted;\n    }\n\n    function toggleUnlockStakes() external onlyByOwner {\n        unlockedStakes = !unlockedStakes;\n    }\n\n    function setOwner(address _new_owner) external onlyByOwner {\n        transferOwnership(_new_owner);\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier updateReward(address account) {\n        \n        // Need to retro-adjust some things if the period hasn't been renewed, then start a new one\n        if (block.timestamp > periodFinish) {\n            retroCatchUp();\n        }\n        else {\n            rewardPerTokenStored_REWARD_PRECISION = rewardPerToken();\n            lastUpdateTime = lastTimeRewardApplicable();\n        }\n\n        if (account != address(0)) {\n            rewards[account] = earned(account);\n            userRewardPerTokenPaid_REWARD_PRECISION[account] = rewardPerTokenStored_REWARD_PRECISION;\n        }\n        _;\n    }\n\n    modifier onlyByOwner() {\n        require(msg.sender == owner(), \"You are not the owner\");\n        _;\n    }\n\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_reentry_guard_status != _REENTRY_GUARD_ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _reentry_guard_status = _REENTRY_GUARD_ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _reentry_guard_status = _REENTRY_GUARD_NOT_ENTERED;\n    }\n\n    /* ========== EVENTS ========== */\n\n    event Staked(address indexed user, uint256 amount);\n    event StakeLocked(address indexed user, uint256 amount, uint256 secs);\n    event Withdrawn(address indexed user, uint256 amount);\n    event WithdrawnLocked(address indexed user, uint256 amount, bytes32 kek_id);\n    event RewardPaid(address indexed user, uint256 reward);\n    event RewardsDurationUpdated(uint256 newDuration);\n    event Recovered(address token, uint256 amount);\n    event RewardsPeriodRenewed(address token);\n    event RewardVested(address user, uint256 amount);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/Initializable.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/Math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.11;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n    function sqrt(uint y) internal pure returns (uint z) {\n        if (y > 3) {\n            z = y;\n            uint x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/Staking/StakingRewardsDistribution.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.11;\r\n\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"../Bdx/BDXShares.sol\";\r\nimport \"./Vesting.sol\";\r\n\r\ncontract StakingRewardsDistribution is OwnableUpgradeable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public TOTAL_BDX_SUPPLY;\r\n    \r\n    uint256 public constant HUNDRED_PERCENT = 100;\r\n\r\n    // BDX minting schedule\r\n    // They sum up to 50% of TOTAL_BDX_SUPPLY\r\n    //   as this much is reserved for liquidity mining rewards\r\n    uint256 public constant BDX_MINTING_SCHEDULE_PRECISON = 1000;\r\n    uint256 public BDX_MINTING_SCHEDULE_YEAR_1;\r\n    uint256 public BDX_MINTING_SCHEDULE_YEAR_2;\r\n    uint256 public BDX_MINTING_SCHEDULE_YEAR_3;\r\n    uint256 public BDX_MINTING_SCHEDULE_YEAR_4;\r\n    uint256 public BDX_MINTING_SCHEDULE_YEAR_5;\r\n\r\n    uint256 public EndOfYear_1;\r\n    uint256 public EndOfYear_2;\r\n    uint256 public EndOfYear_3;\r\n    uint256 public EndOfYear_4;\r\n    uint256 public EndOfYear_5;\r\n\r\n    uint256 public vestingRewardRatio_percent;\r\n\r\n    BDXShares private rewardsToken;\r\n    Vesting private vesting;\r\n\r\n    mapping(address => uint256) public stakingRewardsWeights;\r\n    address[] public stakingRewardsAddresses;\r\n    uint256 public stakingRewardsWeightsTotal;\r\n\r\n    function initialize(\r\n        address _rewardsToken,\r\n        address _vesting,\r\n        uint256 _vestingRewardRatio_percent\r\n    ) external initializer {\r\n        __Ownable_init();\r\n\r\n        rewardsToken = BDXShares(_rewardsToken);\r\n        vesting = Vesting(_vesting);\r\n        TOTAL_BDX_SUPPLY = rewardsToken.MAX_TOTAL_SUPPLY();\r\n\r\n        BDX_MINTING_SCHEDULE_YEAR_1 = TOTAL_BDX_SUPPLY.mul(200).div(BDX_MINTING_SCHEDULE_PRECISON);\r\n        BDX_MINTING_SCHEDULE_YEAR_2 = TOTAL_BDX_SUPPLY.mul(125).div(BDX_MINTING_SCHEDULE_PRECISON);\r\n        BDX_MINTING_SCHEDULE_YEAR_3 = TOTAL_BDX_SUPPLY.mul(100).div(BDX_MINTING_SCHEDULE_PRECISON);\r\n        BDX_MINTING_SCHEDULE_YEAR_4 = TOTAL_BDX_SUPPLY.mul(50).div(BDX_MINTING_SCHEDULE_PRECISON);\r\n        BDX_MINTING_SCHEDULE_YEAR_5 = TOTAL_BDX_SUPPLY.mul(25).div(BDX_MINTING_SCHEDULE_PRECISON);\r\n\r\n        EndOfYear_1 = block.timestamp + 365 days;\r\n        EndOfYear_2 = block.timestamp + 2 * 365 days;\r\n        EndOfYear_3 = block.timestamp + 3 * 365 days;\r\n        EndOfYear_4 = block.timestamp + 4 * 365 days;\r\n        EndOfYear_5 = block.timestamp + 5 * 365 days;\r\n\r\n        vestingRewardRatio_percent = _vestingRewardRatio_percent;\r\n    }\r\n\r\n    // Precision 1e18 for compatibility with ERC20 token\r\n    function getRewardRatePerSecond(address _stakingRewardsAddress) external view returns (uint256) {\r\n        uint256 yearSchedule = 0;\r\n\r\n        if(block.timestamp < EndOfYear_1){\r\n            yearSchedule = BDX_MINTING_SCHEDULE_YEAR_1;\r\n        } else if(block.timestamp < EndOfYear_2){\r\n            yearSchedule = BDX_MINTING_SCHEDULE_YEAR_2;\r\n        } else if(block.timestamp < EndOfYear_3){\r\n            yearSchedule = BDX_MINTING_SCHEDULE_YEAR_3;\r\n        } else if(block.timestamp < EndOfYear_4){\r\n            yearSchedule = BDX_MINTING_SCHEDULE_YEAR_4;\r\n        } else if(block.timestamp < EndOfYear_5){\r\n            yearSchedule = BDX_MINTING_SCHEDULE_YEAR_5;\r\n        } else {\r\n            yearSchedule = 0;\r\n        }\r\n\r\n        uint256 bdxPerSecond = yearSchedule.div(365*24*60*60).mul(stakingRewardsWeights[_stakingRewardsAddress]).div(stakingRewardsWeightsTotal);\r\n\r\n        return bdxPerSecond;\r\n    }\r\n\r\n    function registerPools(address[] calldata _stakingRewardsAddresses, uint[] calldata _stakingRewardsWeights) external onlyByOwner {\r\n        require(_stakingRewardsAddresses.length == _stakingRewardsWeights.length, \"Pools addresses and weights lengths should be the same\");\r\n\r\n        for(uint i = 0; i < _stakingRewardsAddresses.length; i++){\r\n            if(stakingRewardsWeights[_stakingRewardsAddresses[i]] == 0) { // to avoid duplicates\r\n                stakingRewardsAddresses.push(_stakingRewardsAddresses[i]);\r\n            }\r\n\r\n            stakingRewardsWeightsTotal -= stakingRewardsWeights[_stakingRewardsAddresses[i]]; // to support override\r\n            stakingRewardsWeights[_stakingRewardsAddresses[i]] = _stakingRewardsWeights[i];\r\n            stakingRewardsWeightsTotal += _stakingRewardsWeights[i];\r\n            emit PoolRegistered(_stakingRewardsAddresses[i], _stakingRewardsWeights[i]);\r\n        }\r\n    }\r\n\r\n    function resetRewardsWeights() external onlyByOwner {\r\n        for(uint i = 0; i < stakingRewardsAddresses.length; i++){\r\n            stakingRewardsWeights[stakingRewardsAddresses[i]] = 0;\r\n        }\r\n\r\n        stakingRewardsWeightsTotal = 0;\r\n\r\n        delete stakingRewardsAddresses;\r\n\r\n        emit RewardsWeightsReset();\r\n    }\r\n\r\n    function releaseReward(address to, uint256 reward) external onlyStakingRewards returns(uint256 immediatelyReleasedReward) {\r\n        immediatelyReleasedReward = reward.mul(HUNDRED_PERCENT.sub(vestingRewardRatio_percent)).div(HUNDRED_PERCENT);\r\n        uint256 vestedReward = reward.sub(immediatelyReleasedReward);\r\n\r\n        rewardsToken.approve(address(vesting), vestedReward);\r\n        vesting.schedule(to, vestedReward);\r\n\r\n        TransferHelper.safeTransfer(address(rewardsToken), to, immediatelyReleasedReward);\r\n    }\r\n\r\n    function setVestingRewardRatio(uint256 _vestingRewardRatio) external onlyByOwner {\r\n        require(0 <= _vestingRewardRatio && _vestingRewardRatio <= 100, \"vestingRewardRatio should be expressed as percent\");\r\n        vestingRewardRatio_percent = _vestingRewardRatio;\r\n    }\r\n\r\n    modifier onlyStakingRewards() {\r\n        require(stakingRewardsWeights[msg.sender] > 0, \"Only registered staking rewards contracts allowed\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyByOwner() {\r\n        require(msg.sender == owner(), \"You are not the owner\");\r\n        _;\r\n    }\r\n\r\n    // ---------- EVENTS ----------\r\n    event RewardsWeightsReset();\r\n    event PoolRegistered(address stakingRewardsAddress, uint stakingRewardsWeight);\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"./IERC20Upgradeable.sol\";\nimport \"../../math/SafeMathUpgradeable.sol\";\nimport \"../../proxy/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\n    using SafeMathUpgradeable for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n    uint256[44] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./ContextUpgradeable.sol\";\nimport \"../proxy/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal initializer {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal initializer {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/Staking/Vesting.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.11;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"./StakingRewardsDistribution.sol\";\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\n\r\ncontract Vesting is OwnableUpgradeable\r\n{\r\n    using SafeERC20 for ERC20;\r\n    using SafeMath for uint256;\r\n\r\n    struct VestingSchedule {\r\n        uint256 vestingStartedTimeStamp;\r\n        uint256 vestingEndTimeStamp;\r\n        uint256 totalVestedAmount_d18;\r\n        uint256 releasedAmount_d18;\r\n    }\r\n\r\n    mapping(address => VestingSchedule[]) public vestingSchedules;\r\n    \r\n    address public vestingScheduler;\r\n    address public fundsProvider;\r\n    uint256 public vestingTimeInSeconds;\r\n    uint256 public constant MAX_VESTING_SCHEDULES_PER_USER = 128;\r\n\r\n    ERC20 private vestedToken;\r\n\r\n    function initialize(\r\n        address _vestedTokenAddress,\r\n        address _vestingScheduler,\r\n        address _fundsProvider,\r\n        uint256 _vestingTimeInSeconds\r\n    ) \r\n        external\r\n        initializer\r\n    {\r\n        require( _vestingTimeInSeconds > 0, \"Vesting timme cannot be set to 0\");\r\n\r\n        __Ownable_init();\r\n\r\n        vestedToken = ERC20(_vestedTokenAddress);\r\n        vestingScheduler = _vestingScheduler;\r\n        fundsProvider = _fundsProvider;\r\n        vestingTimeInSeconds = _vestingTimeInSeconds;\r\n    }\r\n\r\n    /* ========== MUTATIVE FUNCTIONS ========== */\r\n\r\n    function schedule(address _receiver, uint256 _amount_d18) external {\r\n        // to prevent melicious users form cloging user's schedules\r\n        require(msg.sender == vestingScheduler,\r\n            \"Only vesting scheduler can create vesting schedules\");\r\n        require(vestingSchedules[_receiver].length < MAX_VESTING_SCHEDULES_PER_USER,\r\n            \"Limit for vesting schedules for user exceeded\");\r\n\r\n        vestingSchedules[_receiver].push(VestingSchedule(\r\n            block.timestamp,\r\n            block.timestamp.add(vestingTimeInSeconds),\r\n            _amount_d18,\r\n            0\r\n        ));\r\n\r\n        TransferHelper.safeTransferFrom(address(vestedToken), fundsProvider, address(this), _amount_d18);\r\n\r\n        emit ScheduleCreated(_receiver, _amount_d18);\r\n    }\r\n\r\n    function claim() external {\r\n        VestingSchedule[] storage userVestingSchedules = vestingSchedules[msg.sender];\r\n        uint256 rewardsToClaim = 0;\r\n        for (uint256 i = 0; i < userVestingSchedules.length; i++) {\r\n            if (isFullyVested(userVestingSchedules[i])) {\r\n                rewardsToClaim = rewardsToClaim.add(userVestingSchedules[i].totalVestedAmount_d18.sub(userVestingSchedules[i].releasedAmount_d18));\r\n                delete userVestingSchedules[i];\r\n            } else {\r\n                uint256 proprtionalReward = getAvailableReward(userVestingSchedules[i]);\r\n                rewardsToClaim = rewardsToClaim.add(proprtionalReward);\r\n                userVestingSchedules[i].releasedAmount_d18 = userVestingSchedules[i].releasedAmount_d18.add(proprtionalReward);\r\n            }\r\n        }\r\n\r\n        TransferHelper.safeTransfer(address(vestedToken), msg.sender, rewardsToClaim);\r\n\r\n        emit RewardClaimed(msg.sender, rewardsToClaim);\r\n    }\r\n\r\n    /* ========== VIEWS ========== */\r\n\r\n    function isFullyVested(VestingSchedule memory _schedule) public view returns(bool) {\r\n        return _schedule.vestingEndTimeStamp <= block.timestamp;\r\n    }\r\n\r\n    function getAvailableReward(VestingSchedule memory _schedule) public view returns(uint256) {\r\n        if (isFullyVested(_schedule)) {\r\n            return _schedule.totalVestedAmount_d18.sub(_schedule.releasedAmount_d18);\r\n        }\r\n        return (_schedule.totalVestedAmount_d18\r\n            .mul(block.timestamp.sub(_schedule.vestingStartedTimeStamp))\r\n            .div(vestingTimeInSeconds)\r\n        )\r\n        .sub(_schedule.releasedAmount_d18);\r\n    }\r\n\r\n    function vestingSchedulesOf(address account) external view returns (VestingSchedule[] memory) {\r\n        return vestingSchedules[account];\r\n    }\r\n\r\n    /* ========== RESTRICTED FUNCTIONS ========== */\r\n\r\n    function setVestingScheduler(address _vestingScheduler)\r\n        external\r\n        onlyByOwner\r\n    {\r\n        vestingScheduler = _vestingScheduler;\r\n    }\r\n\r\n    function setVestingTimeInSeconds(uint256 _vestingTimeInSeconds)\r\n        external\r\n        onlyByOwner\r\n    {\r\n        require( _vestingTimeInSeconds > 0, \"Vesting timme cannot be set to 0\");\r\n        vestingTimeInSeconds = _vestingTimeInSeconds;\r\n    }\r\n\r\n    function setFundsProvider(address _fundsProvider) external onlyByOwner {\r\n        fundsProvider = _fundsProvider;\r\n    }\r\n\r\n    modifier onlyByOwner() {\r\n        require(msg.sender == owner(),  \"You are not the owner\");\r\n        _;\r\n    }\r\n\r\n    event ScheduleCreated(address user, uint256 amount);\r\n    event RewardClaimed(address user, uint256 amount);\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\nimport \"../proxy/Initializable.sol\";\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "contracts/Uniswap/UniswapV2Router02.sol": {
      "content": "// SPDX-License-Identifier: GNU General Public License v3.0\n// Based on https://github.com/Uniswap/v2-core\n\npragma solidity 0.6.11;\n\nimport \"./Interfaces/IUniswapV2Factory.sol\";\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\nimport \"./Interfaces/IUniswapV2Router02.sol\";\nimport \"./Interfaces/IUniswapV2PairOracle.sol\";\nimport \"./UniswapV2Library.sol\";\nimport \"./UniswapV2Pair.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../ERC20/IWETH.sol\";\n\ncontract UniswapV2Router02 is IUniswapV2Router02 {\n    using SafeMath for uint;\n\n    address public immutable override factory;\n    address public immutable override WETH;\n\n    modifier ensure(uint deadline) {\n        require(deadline >= block.timestamp, \"UniswapV2Router: EXPIRED\");\n        _;\n    }\n\n    constructor(address _factory, address _WETH) public {\n        factory = _factory;\n        WETH = _WETH;\n    }\n\n    receive() external payable {\n        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\n    }\n\n    function relativeDiffFromLarger_d12(uint a, uint b) internal pure returns(uint256){\n        if(a > b){\n            return (a-b).mul(1e12).div(a);\n        } else {\n            return (b-a).mul(1e12).div(b);\n        }\n    }\n\n    // **** ADD LIQUIDITY ****\n    function _addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin\n    ) internal virtual returns (uint amountA, uint amountB) {\n        // create the pair if it doesn't exist yet\n        \n        address pairAddress = IUniswapV2Factory(factory).getPair(tokenA, tokenB);\n        if (pairAddress == address(0)) {\n            pairAddress = IUniswapV2Factory(factory).createPair(tokenA, tokenB);\n        }\n\n        UniswapV2Pair pair = UniswapV2Pair(pairAddress);\n\n        (uint reserveA, uint reserveB) = UniswapV2Library.getReserves(factory, tokenA, tokenB);\n        if (reserveA == 0 && reserveB == 0) {\n            (amountA, amountB) = (amountADesired, amountBDesired);\n        } else {\n            uint amountBOptimal = UniswapV2Library.quote(amountADesired, reserveA, reserveB);\n            if (amountBOptimal <= amountBDesired) {\n                require(amountBOptimal >= amountBMin, \"UniswapV2Router: INSUFFICIENT_B_AMOUNT\");\n\n                uint256 amountBFromOracle = pair.consult(tokenA, amountADesired);\n                uint256 spotVsOraclePriceDivergence_d12 = relativeDiffFromLarger_d12(amountBOptimal, amountBFromOracle);\n\n                // amountBFromOracle == 0, for the first liquidity\n                require(amountBFromOracle == 0 || spotVsOraclePriceDivergence_d12 < IUniswapV2Factory(factory).maxSpotVsOraclePriceDivergence_d12(), \"Spot vs Oracle Averaged price divergence exceedes limit\");\n\n                (amountA, amountB) = (amountADesired, amountBOptimal);\n            } else {\n                uint amountAOptimal = UniswapV2Library.quote(amountBDesired, reserveB, reserveA);\n                assert(amountAOptimal <= amountADesired);\n                require(amountAOptimal >= amountAMin, \"UniswapV2Router: INSUFFICIENT_A_AMOUNT\");\n\n                uint256 amountAFromOracle = pair.consult(tokenB, amountBDesired);\n                uint256 spotVsOraclePriceDivergence_d12 = relativeDiffFromLarger_d12(amountAOptimal, amountAFromOracle);\n\n                // amountAFromOracle == 0, for the first liquidity\n                require(amountAFromOracle == 0 || spotVsOraclePriceDivergence_d12 < IUniswapV2Factory(factory).maxSpotVsOraclePriceDivergence_d12(), \"Spot vs Oracle Averaged price divergence exceedes limit\");\n\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\n            }\n        }\n    }\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external virtual override ensure(deadline) returns (uint amountA, uint amountB, uint liquidity) {\n        (amountA, amountB) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);\n        address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\n        TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\n        TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\n\n        liquidity = IUniswapV2Pair(pair).mint(to);\n    }\n\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external virtual override payable ensure(deadline) returns (uint amountToken, uint amountETH, uint liquidity) {\n        (amountToken, amountETH) = _addLiquidity(\n            token,\n            WETH,\n            amountTokenDesired,\n            msg.value,\n            amountTokenMin,\n            amountETHMin\n        );\n        address pair = UniswapV2Library.pairFor(factory, token, WETH);\n        TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\n        IWETH(WETH).deposit{value: amountETH}();\n        assert(IWETH(WETH).transfer(pair, amountETH));\n        liquidity = IUniswapV2Pair(pair).mint(to);\n        // refund dust eth, if any\n        if (msg.value > amountETH) TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\n    }\n\n    // **** REMOVE LIQUIDITY ****\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) public virtual override ensure(deadline) returns (uint amountA, uint amountB) {\n        address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\n        IUniswapV2Pair(pair).transferFrom(msg.sender, pair, liquidity); // send liquidity to pair\n        (uint amount0, uint amount1) = IUniswapV2Pair(pair).burn(to);\n        (address token0,) = UniswapV2Library.sortTokens(tokenA, tokenB);\n        (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\n        require(amountA >= amountAMin, \"UniswapV2Router: INSUFFICIENT_A_AMOUNT\");\n        require(amountB >= amountBMin, \"UniswapV2Router: INSUFFICIENT_B_AMOUNT\");\n    }\n\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) public virtual override ensure(deadline) returns (uint amountToken, uint amountETH) {\n        (amountToken, amountETH) = removeLiquidity(\n            token,\n            WETH,\n            liquidity,\n            amountTokenMin,\n            amountETHMin,\n            address(this),\n            deadline\n        );\n        TransferHelper.safeTransfer(token, to, amountToken);\n        IWETH(WETH).withdraw(amountETH);\n        TransferHelper.safeTransferETH(to, amountETH);\n    }\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external virtual override returns (uint amountA, uint amountB) {\n        address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);\n        uint value = approveMax ? uint(-1) : liquidity;\n        IUniswapV2Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n        (amountA, amountB) = removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);\n    }\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external virtual override returns (uint amountToken, uint amountETH) {\n        address pair = UniswapV2Library.pairFor(factory, token, WETH);\n        uint value = approveMax ? uint(-1) : liquidity;\n        IUniswapV2Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n        (amountToken, amountETH) = removeLiquidityETH(token, liquidity, amountTokenMin, amountETHMin, to, deadline);\n    }\n\n    // **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) public virtual override ensure(deadline) returns (uint amountETH) {\n        (, amountETH) = removeLiquidity(\n            token,\n            WETH,\n            liquidity,\n            amountTokenMin,\n            amountETHMin,\n            address(this),\n            deadline\n        );\n        TransferHelper.safeTransfer(token, to, IERC20(token).balanceOf(address(this)));\n        IWETH(WETH).withdraw(amountETH);\n        TransferHelper.safeTransferETH(to, amountETH);\n    }\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external virtual override returns (uint amountETH) {\n        address pair = UniswapV2Library.pairFor(factory, token, WETH);\n        uint value = approveMax ? uint(-1) : liquidity;\n        IUniswapV2Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n        amountETH = removeLiquidityETHSupportingFeeOnTransferTokens(\n            token, liquidity, amountTokenMin, amountETHMin, to, deadline\n        );\n    }\n\n    // **** SWAP ****\n    // requires the initial amount to have already been sent to the first pair\n    function _swap(uint[] memory amounts, address[] memory path, address _to) internal virtual {\n        for (uint i; i < path.length - 1; i++) {\n            (address input, address output) = (path[i], path[i + 1]);\n            (address token0,) = UniswapV2Library.sortTokens(input, output);\n            uint amountOut = amounts[i + 1];\n            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\n            address to = i < path.length - 2 ? UniswapV2Library.pairFor(factory, output, path[i + 2]) : _to;\n            IUniswapV2Pair(UniswapV2Library.pairFor(factory, input, output)).swap(\n                amount0Out, amount1Out, to, new bytes(0)\n            );\n        }\n    }\n\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external virtual override ensure(deadline) returns (uint[] memory amounts) {\n        amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);\n        require(amounts[amounts.length - 1] >= amountOutMin, \"UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\");\n\n        TransferHelper.safeTransferFrom(\n            path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]\n        );\n\n        _swap(amounts, path, to);\n    }\n\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external virtual override ensure(deadline) returns (uint[] memory amounts) {\n        amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);\n        require(amounts[0] <= amountInMax, \"UniswapV2Router: EXCESSIVE_INPUT_AMOUNT\");\n        TransferHelper.safeTransferFrom(\n            path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]\n        );\n        _swap(amounts, path, to);\n    }\n\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        virtual\n        override\n        payable\n        ensure(deadline)\n        returns (uint[] memory amounts)\n    {\n        require(path[0] == WETH, \"UniswapV2Router: INVALID_PATH\");\n        amounts = UniswapV2Library.getAmountsOut(factory, msg.value, path);\n\n        require(amounts[amounts.length - 1] >= amountOutMin, \"UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\");\n        IWETH(WETH).deposit{value: amounts[0]}();\n        assert(IWETH(WETH).transfer(UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]));\n        _swap(amounts, path, to);\n    }\n\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        virtual\n        override\n        ensure(deadline)\n        returns (uint[] memory amounts)\n    {\n        require(path[path.length - 1] == WETH, \"UniswapV2Router: INVALID_PATH\");\n        amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);\n        \n        require(amounts[0] <= amountInMax, \"UniswapV2Router: EXCESSIVE_INPUT_AMOUNT\");\n        TransferHelper.safeTransferFrom(\n            path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]\n        );\n        _swap(amounts, path, address(this));\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\n    }\n\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        virtual\n        override\n        ensure(deadline)\n        returns (uint[] memory amounts)\n    {\n        require(path[path.length - 1] == WETH, \"UniswapV2Router: INVALID_PATH\");\n        amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);\n        require(amounts[amounts.length - 1] >= amountOutMin, \"UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\");\n        TransferHelper.safeTransferFrom(\n            path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]\n        );\n        _swap(amounts, path, address(this));\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\n    }\n\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        virtual\n        override\n        payable\n        ensure(deadline)\n        returns (uint[] memory amounts)\n    {\n        require(path[0] == WETH, \"UniswapV2Router: INVALID_PATH\");\n        amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);\n        require(amounts[0] <= msg.value, \"UniswapV2Router: EXCESSIVE_INPUT_AMOUNT\");\n        IWETH(WETH).deposit{value: amounts[0]}();\n        assert(IWETH(WETH).transfer(UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]));\n        _swap(amounts, path, to);\n        // refund dust eth, if any\n        if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\n    }\n\n    // **** SWAP (supporting fee-on-transfer tokens) ****\n    // requires the initial amount to have already been sent to the first pair\n    function _swapSupportingFeeOnTransferTokens(address[] memory path, address _to) internal virtual {\n        for (uint i; i < path.length - 1; i++) {\n            (address input, address output) = (path[i], path[i + 1]);\n            (address token0,) = UniswapV2Library.sortTokens(input, output);\n            IUniswapV2Pair pair = IUniswapV2Pair(UniswapV2Library.pairFor(factory, input, output));\n            uint amountInput;\n            uint amountOutput;\n            { // scope to avoid stack too deep errors\n            (uint reserve0, uint reserve1,) = pair.getReserves();\n            (uint reserveInput, uint reserveOutput) = input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n            amountInput = IERC20(input).balanceOf(address(pair)).sub(reserveInput);\n            amountOutput = UniswapV2Library.getAmountOut(amountInput, reserveInput, reserveOutput);\n            }\n            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOutput) : (amountOutput, uint(0));\n            address to = i < path.length - 2 ? UniswapV2Library.pairFor(factory, output, path[i + 2]) : _to;\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\n        }\n    }\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external virtual override ensure(deadline) {\n        TransferHelper.safeTransferFrom(\n            path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amountIn\n        );\n        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\n        _swapSupportingFeeOnTransferTokens(path, to);\n        require(\n            IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\n            \"UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n    }\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    )\n        external\n        virtual\n        override\n        payable\n        ensure(deadline)\n    {\n        require(path[0] == WETH, \"UniswapV2Router: INVALID_PATH\");\n        uint amountIn = msg.value;\n        IWETH(WETH).deposit{value: amountIn}();\n        assert(IWETH(WETH).transfer(UniswapV2Library.pairFor(factory, path[0], path[1]), amountIn));\n        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\n        _swapSupportingFeeOnTransferTokens(path, to);\n        require(\n            IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\n            \"UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n    }\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    )\n        external\n        virtual\n        override\n        ensure(deadline)\n    {\n        require(path[path.length - 1] == WETH, \"UniswapV2Router: INVALID_PATH\");\n        TransferHelper.safeTransferFrom(\n            path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amountIn\n        );\n        _swapSupportingFeeOnTransferTokens(path, address(this));\n        uint amountOut = IERC20(WETH).balanceOf(address(this));\n        require(amountOut >= amountOutMin, \"UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\");\n        IWETH(WETH).withdraw(amountOut);\n        TransferHelper.safeTransferETH(to, amountOut);\n    }\n\n    // **** LIBRARY FUNCTIONS ****\n    function quote(uint amountA, uint reserveA, uint reserveB) public pure virtual override returns (uint amountB) {\n        return UniswapV2Library.quote(amountA, reserveA, reserveB);\n    }\n\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut)\n        public\n        pure\n        virtual\n        override\n        returns (uint amountOut)\n    {\n        return UniswapV2Library.getAmountOut(amountIn, reserveIn, reserveOut);\n    }\n\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut)\n        public\n        pure\n        virtual\n        override\n        returns (uint amountIn)\n    {\n        return UniswapV2Library.getAmountIn(amountOut, reserveIn, reserveOut);\n    }\n\n    function getAmountsOut(uint amountIn, address[] memory path)\n        public\n        view\n        virtual\n        override\n        returns (uint[] memory amounts)\n    {\n        return UniswapV2Library.getAmountsOut(factory, amountIn, path);\n    }\n\n    function getAmountsIn(uint amountOut, address[] memory path)\n        public\n        view\n        virtual\n        override\n        returns (uint[] memory amounts)\n    {\n        return UniswapV2Library.getAmountsIn(factory, amountOut, path);\n    }\n\n    function consult(address tokenIn, uint amountIn, address tokenOut)\n        external\n        view\n        override\n        returns (uint amountOut)\n    {\n        IUniswapV2PairOracle pair = IUniswapV2PairOracle(IUniswapV2Factory(factory).getPair(tokenIn, tokenOut));\n        amountOut = pair.consult(tokenIn, amountIn);\n    }\n\n    function getReserves(address _tokenA, address _tokenB) external view returns(uint256, uint256) {\n        (uint256 reserveA_d18, uint256 reserveB_d18) = UniswapV2Library.getReserves(factory, _tokenA, _tokenB);\n        return (reserveA_d18, reserveB_d18);\n    }\n}"
    },
    "contracts/Uniswap/Interfaces/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: GNU General Public License v3.0\n// Based on https://github.com/Uniswap/v2-core\n\npragma solidity 0.6.11;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function treasury() external view returns (address);\n    function maxSpotVsOraclePriceDivergence_d12() external view returns (uint256);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setTreasury(address) external;\n    function setMaxSpotVsOraclePriceDivergence_d12(uint256) external;\n}\n"
    },
    "contracts/Uniswap/Interfaces/IUniswapV2Router02.sol": {
      "content": "// SPDX-License-Identifier: GNU General Public License v3.0\n// Based on https://github.com/Uniswap/v2-core\n\npragma solidity 0.6.11;\n\nimport \"./IUniswapV2Router01.sol\";\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n\n    function consult(address tokenIn, uint amountIn, address tokenOut)\n        external\n        view\n        returns (uint amountOut);\n}"
    },
    "contracts/Uniswap/Interfaces/IUniswapV2PairOracle.sol": {
      "content": "// SPDX-License-Identifier: GNU General Public License v3.0\n// Based on https://github.com/Uniswap/v2-core\n\npragma solidity 0.6.11;\n\ninterface IUniswapV2PairOracle {\n    \n    function consult(address tokenIn, uint amountIn)\n        external\n        view\n        returns (uint amountOut);\n}\n"
    },
    "contracts/Uniswap/UniswapV2Library.sol": {
      "content": "// SPDX-License-Identifier: GNU General Public License v3.0\n// Based on https://github.com/Uniswap/v2-core\n\npragma solidity 0.6.11;\n\nimport \"./Interfaces/IUniswapV2Pair.sol\";\nimport \"./Interfaces/IUniswapV2Factory.sol\";\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\nlibrary UniswapV2Library {\n    using SafeMath for uint;\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, \"UniswapV2Library: IDENTICAL_ADDRESSES\");\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), \"UniswapV2Library: ZERO_ADDRESS\");\n    }\n\n    // Less efficient than the CREATE2 method below\n    function pairFor(address factory, address tokenA, address tokenB) internal view returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = IUniswapV2Factory(factory).getPair(token0, token1);\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairForCreate2(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(uint(keccak256(abi.encodePacked(\n                hex\"ff\",\n                factory,\n                keccak256(abi.encodePacked(token0, token1)),\n                hex\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\" // init code hash\n            )))); // this matches the CREATE2 in UniswapV2Factory.createPair\n    }\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n        (address token0,) = sortTokens(tokenA, tokenB);\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n        require(amountA > 0, \"UniswapV2Library: INSUFFICIENT_AMOUNT\");\n        require(reserveA > 0 && reserveB > 0, \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\");\n        amountB = amountA.mul(reserveB) / reserveA;\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n        require(amountIn > 0, \"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\");\n        require(reserveIn > 0 && reserveOut > 0, \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\");\n        uint amountInWithFee = amountIn.mul(997);\n        uint numerator = amountInWithFee.mul(reserveOut);\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n        require(amountOut > 0, \"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\");\n        require(reserveIn > 0 && reserveOut > 0, \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\");\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\n        uint denominator = reserveOut.sub(amountOut).mul(997);\n        amountIn = (numerator / denominator).add(1);\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, \"UniswapV2Library: INVALID_PATH\");\n        amounts = new uint[](path.length);\n        amounts[0] = amountIn;\n        for (uint i; i < path.length - 1; i++) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, \"UniswapV2Library: INVALID_PATH\");\n        amounts = new uint[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint i = path.length - 1; i > 0; i--) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n}"
    },
    "contracts/Uniswap/UniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: GNU General Public License v3.0\n// Based on https://github.com/Uniswap/v2-core\n\npragma solidity 0.6.11;\n\n\nimport \"./Interfaces/IUniswapV2Pair.sol\";\nimport \"./UniswapV2ERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"../Math/Math.sol\";\nimport \"../Math/UQ112x112.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../Math/FixedPoint.sol\";\nimport \"./Interfaces/IUniswapV2Factory.sol\";\nimport \"./Interfaces/IUniswapV2Callee.sol\";\nimport \"./Interfaces/IUniswapV2Factory.sol\";\nimport \"../Oracle/ICryptoPairOracle.sol\";\nimport \"./UniswapV2OracleLibrary.sol\";\n\ncontract UniswapV2Pair is IUniswapV2Pair, ICryptoPairOracle {\n    using FixedPoint for *;\n    using SafeMath  for uint;\n    using UQ112x112 for uint224;\n\n    string public override constant name = \"Blindex Swap\";\n    string public override constant symbol = \"BDSWAP\";\n    uint8 public override constant decimals = 18;\n    uint  public override totalSupply;\n    mapping(address => uint) public override balanceOf;\n    mapping(address => mapping(address => uint)) public override allowance;\n\n    uint public override constant MINIMUM_LIQUIDITY = 10**3;\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\n    bytes32 public override DOMAIN_SEPARATOR;\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    bytes32 public constant override PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n    mapping(address => uint) public override nonces;\n\n    address public override factory;\n    address public override token0;\n    address public override token1;\n\n    uint112 internal reserve0;           // uses single storage slot, accessible via getReserves\n    uint112 internal reserve1;           // uses single storage slot, accessible via getReserves\n    uint32  internal blockTimestampLast; // uses single storage slot, accessible via getReserves\n\n    uint public override price0CumulativeLast;\n    uint public override price1CumulativeLast;\n    uint public override kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\n\n    uint public period = 3600; // 1 hour TWAP (time-weighted average price)\n    uint public consultLatency = 360; // Used for being able to consult past the period end\n    bool public allowStaleConsult = false; // If false, consult() will fail if the TWAP is stale\n    FixedPoint.uq112x112 public price0AverageOracle;\n    FixedPoint.uq112x112 public price1AverageOracle;\n    uint    public price0CumulativeLastOracle;\n    uint    public price1CumulativeLastOracle;\n    uint32  public blockTimestampLastOracle;\n\n    mapping(address => uint256) public lastSwapByUserOut0;\n    mapping(address => uint256) public lastSwapByUserOut1;\n\n    uint256 private minimumSwapsDelayInBlocks = 0;\n\n    address public owner_address;\n    address public treasury_address;\n\n    uint private unlocked = 1;\n    modifier lock() {\n        require(unlocked == 1, \"UniswapV2: LOCKED\");\n        unlocked = 0;\n        _;\n        unlocked = 1;\n    }\n\n    function getReserves() public override view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\n        _reserve0 = reserve0;\n        _reserve1 = reserve1;\n        _blockTimestampLast = blockTimestampLast;\n    }\n\n    function _safeTransfer(address token, address to, uint value) private {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"UniswapV2: TRANSFER_FAILED\");\n    }\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    constructor(address _owner_address, address _treasury_address) public {\n        factory = msg.sender;\n\n        owner_address = _owner_address;\n        treasury_address = _treasury_address;\n    }\n\n    // called once by the factory at time of deployment\n    function initialize(address _token0, address _token1) external override {\n        require(msg.sender == factory, \"UniswapV2: FORBIDDEN\"); // sufficient check\n        token0 = _token0;\n        token1 = _token1;\n    }\n\n    // update reserves and, on the first call per block, price accumulators\n    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) virtual internal {\n        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), \"UniswapV2: OVERFLOW\");\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\n            // * never overflows, and + overflow is desired\n            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\n            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\n        }\n        reserve0 = uint112(balance0);\n        reserve1 = uint112(balance1);\n        blockTimestampLast = blockTimestamp;\n\n        updateOracle();\n\n        emit Sync(reserve0, reserve1);\n    }\n\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\n        address feeTo = IUniswapV2Factory(factory).feeTo();\n        feeOn = feeTo != address(0);\n        uint _kLast = kLast; // gas savings\n        if (feeOn) {\n            if (_kLast != 0) {\n                uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));\n                uint rootKLast = Math.sqrt(_kLast);\n                if (rootK > rootKLast) {\n                    uint numerator = totalSupply.mul(rootK.sub(rootKLast));\n                    uint denominator = rootK.mul(5).add(rootKLast);\n                    uint liquidity = numerator / denominator;\n                    if (liquidity > 0) _mint(feeTo, liquidity);\n                }\n            }\n        } else if (_kLast != 0) {\n            kLast = 0;\n        }\n    }\n\n    // this low-level function should be called from a contract which performs important safety checks\n    function mint(address to) external override lock returns (uint liquidity) {\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\n        uint balance0 = IERC20(token0).balanceOf(address(this));\n        uint balance1 = IERC20(token1).balanceOf(address(this));\n\n        uint amount0 = balance0.sub(_reserve0);\n        uint amount1 = balance1.sub(_reserve1);\n        bool feeOn = _mintFee(_reserve0, _reserve1);\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n\n        if (_totalSupply == 0) {\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\n           _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\n        } else {\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\n        }\n\n        require(liquidity > 0, \"UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED\");\n        _mint(to, liquidity);\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\n        emit Mint(msg.sender, amount0, amount1);\n    }\n\n    // this low-level function should be called from a contract which performs important safety checks\n    function burn(address to) external override lock returns (uint amount0, uint amount1) {\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\n        address _token0 = token0;                                // gas savings\n        address _token1 = token1;                                // gas savings\n        uint balance0 = IERC20(_token0).balanceOf(address(this));\n        uint balance1 = IERC20(_token1).balanceOf(address(this));\n        uint liquidity = balanceOf[address(this)];\n\n        bool feeOn = _mintFee(_reserve0, _reserve1);\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\n        require(amount0 > 0 && amount1 > 0, \"UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED\");\n        _burn(address(this), liquidity);\n        _safeTransfer(_token0, to, amount0);\n        _safeTransfer(_token1, to, amount1);\n        balance0 = IERC20(_token0).balanceOf(address(this));\n        balance1 = IERC20(_token1).balanceOf(address(this));\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\n        emit Burn(msg.sender, amount0, amount1, to);\n    }\n\n    // this low-level function should be called from a contract which performs important safety checks\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external override lock {\n        require(amount0Out > 0 || amount1Out > 0, \"UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT\");\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, \"UniswapV2: INSUFFICIENT_LIQUIDITY\");\n\n        uint balance0;\n        uint balance1;\n\n        {\n            require(to != token0 && to != token1, \"UniswapV2: INVALID_TO\");\n\n            if (amount0Out > 0) {\n                if(block.number.sub(lastSwapByUserOut1[to]) < minimumSwapsDelayInBlocks) {\n                    _safeTransfer(token0, to, amount0Out.div(10)); // optimistically transfer tokens\n                    _safeTransfer(token0, treasury_address, amount0Out.mul(9).div(10)); // optimistically transfer tokens\n                } else {\n                    _safeTransfer(token0, to, amount0Out); // optimistically transfer tokens\n                }\n\n                lastSwapByUserOut0[to] = block.number;\n            }\n\n            if (amount1Out > 0) {\n                if(block.number.sub(lastSwapByUserOut0[to]) < minimumSwapsDelayInBlocks){\n                    _safeTransfer(token1, to, amount1Out.div(10)); // optimistically transfer tokens\n                    _safeTransfer(token1, treasury_address, amount1Out.mul(9).div(10)); // optimistically transfer tokens\n                } else {\n                    _safeTransfer(token1, to, amount1Out); // optimistically transfer tokens\n                }\n\n                lastSwapByUserOut1[to] = block.number;\n            }\n\n            if (data.length > 0) IUniswapV2Callee(to).uniswapV2Call(msg.sender, amount0Out, amount1Out, data);\n            balance0 = IERC20(token0).balanceOf(address(this));\n            balance1 = IERC20(token1).balanceOf(address(this));\n        }\n        \n        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\n        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\n        require(amount0In > 0 || amount1In > 0, \"UniswapV2: INSUFFICIENT_INPUT_AMOUNT\");\n\n        { // scope for reserve{0,1}Adjusted, avoids stack too deep errors\n            uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\n            uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\n            require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000**2), \"UniswapV2: K\");\n        }\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\n    }\n\n    // force balances to match reserves\n    function skim(address to) external override lock {\n        address _token0 = token0; // gas savings\n        address _token1 = token1; // gas savings\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\n    }\n\n    // force reserves to match balances\n    function sync() external override lock {\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\n    }\n\n    // Migrated over from UniswapV2ERC20. Needed for ^0.6.11\n    // ===============================================\n\n    function _mint(address to, uint value) internal {\n        totalSupply = totalSupply.add(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        emit Transfer(address(0), to, value);\n    }\n\n    function _burn(address from, uint value) internal {\n        balanceOf[from] = balanceOf[from].sub(value);\n        totalSupply = totalSupply.sub(value);\n        emit Transfer(from, address(0), value);\n    }\n\n    function _approve(address owner, address spender, uint value) private {\n        allowance[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    function _transfer(address from, address to, uint value) private {\n        balanceOf[from] = balanceOf[from].sub(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    function approve(address spender, uint value) external override returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    function transfer(address to, uint value) external override returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint value) external override returns (bool) {\n        if (allowance[from][msg.sender] != uint(-1)) {\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n        }\n        _transfer(from, to, value);\n        return true;\n    }\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external override {\n        require(deadline >= block.timestamp, \"UniswapV2: EXPIRED\");\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                DOMAIN_SEPARATOR,\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n            )\n        );\n        address recoveredAddress = ecrecover(digest, v, r, s);\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \"UniswapV2: INVALID_SIGNATURE\");\n        _approve(owner, spender, value);\n    }\n\n    function setOwner_address(address _owner_address) external onlyByOwner {\n        owner_address = _owner_address;\n    }\n\n    function setTreasury_address(address _treasury_address) external onlyByOwner {\n        treasury_address = _treasury_address;\n    }\n\n    function setMinimumSwapsDelayInBlocks(uint256 _minimumSwapsDelayInBlocks) external onlyByOwner{\n        minimumSwapsDelayInBlocks = _minimumSwapsDelayInBlocks;\n    }\n\n    function setPeriod(uint _period) external onlyByOwner {\n        period = _period;\n    }\n\n    function setConsultLeniency(uint _consult_leniency) external onlyByOwner {\n        consultLatency = _consult_leniency;\n    }\n\n    function setAllowStaleConsults(bool _allow_stale_consults) external onlyByOwner {\n        allowStaleConsult = _allow_stale_consults;\n    }\n\n    function updateOracle() public override {\n        uint32 blockTimestamp = UniswapV2OracleLibrary.currentBlockTimestamp();\n        uint32 timeElapsed = blockTimestamp - blockTimestampLastOracle; // Overflow is desired\n\n        if(timeElapsed >= period || msg.sender == owner_address) {\n            uint price0Cumulative = price0CumulativeLast;\n            uint price1Cumulative = price1CumulativeLast;\n\n            if (blockTimestampLast != blockTimestamp) {\n                // This if (coppied form original UniswapV2OracleLibrary) handles the case\n                // when oracle update is called some time after swap update this compensates \n                // for the elapsed time.\n                // Execution only enters this if when update oracle is called manually\n                // when called as a part of minting, redeeming, swapping, etc., this if is skipped.\n                // Which is fine since in the cases above happen in the same blocka as oracle\n                // update, so there is nothing to compensate for.\n\n                // subtraction overflow is desired\n                uint32 timeElapsedInner = blockTimestamp - blockTimestampLast;\n                // addition overflow is desired\n                // counterfactual\n                price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsedInner;\n                // counterfactual\n                price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsedInner;\n            }\n\n            price0AverageOracle = FixedPoint.uq112x112(uint224((price0Cumulative - price0CumulativeLastOracle) / timeElapsed));\n            price1AverageOracle = FixedPoint.uq112x112(uint224((price1Cumulative - price1CumulativeLastOracle) / timeElapsed));\n\n            price0CumulativeLastOracle = price0Cumulative;\n            price1CumulativeLastOracle = price1Cumulative;\n            blockTimestampLastOracle = blockTimestamp;\n        }\n    }\n\n    function when_should_update_oracle_in_seconds() external view override returns (uint256) {\n        uint256 blockTimestamp = UniswapV2OracleLibrary.currentBlockTimestamp();\n        \n        uint256 timeElapsed = blockTimestamp <= blockTimestampLastOracle\n            ? 0\n            : blockTimestamp - blockTimestampLastOracle;\n\n        return period < timeElapsed\n            ? 0\n            : period - timeElapsed;\n    }\n\n    function shouldUpdateOracle() public view override returns (bool) {\n        uint256 blockTimestamp = UniswapV2OracleLibrary.currentBlockTimestamp();\n        uint256 timeElapsed = blockTimestamp - blockTimestampLastOracle; // Overflow is desired\n\n        if((timeElapsed < period) || allowStaleConsult || reserve0 == 0 || reserve1 == 0){\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    // Note this will always return 0 before update has been called successfully for the first time.\n    function consult(address token, uint256 amountIn) external view override returns (uint256 amountOut) {\n        uint256 blockTimestamp = UniswapV2OracleLibrary.currentBlockTimestamp();\n        uint256 timeElapsed = blockTimestamp - blockTimestampLastOracle; // Overflow is desired\n\n        // Ensure that the price is not stale\n        require((timeElapsed < (period + consultLatency)) || allowStaleConsult,\n                \"UniswapV2Pair Oracle: PRICE_IS_STALE_NEED_TO_CALL_UPDATE\");\n\n        if (token == token0) {\n            amountOut = price0AverageOracle.mul(amountIn).decode144();\n        } else {\n            require(token == token1, \"UniswapV2Pair Oracle: INVALID_TOKEN\");\n            amountOut = price1AverageOracle.mul(amountIn).decode144();\n        }\n    }\n\n    modifier onlyByOwner() {\n        require(msg.sender == owner_address, \"You are not an owner\");\n        _;\n    }\n\n}"
    },
    "contracts/Uniswap/Interfaces/IUniswapV2Router01.sol": {
      "content": "// SPDX-License-Identifier: GNU General Public License v3.0\n// Based on https://github.com/Uniswap/v2-core\n\npragma solidity 0.6.11;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}"
    },
    "contracts/Uniswap/Interfaces/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: GNU General Public License v3.0\n// Based on https://github.com/Uniswap/v2-core\n\npragma solidity 0.6.11;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "contracts/Uniswap/UniswapV2ERC20.sol": {
      "content": "// SPDX-License-Identifier: GNU General Public License v3.0\n// Based on https://github.com/Uniswap/v2-core\n\npragma solidity 0.6.11;\n\nimport \"./Interfaces/IUniswapV2ERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\ncontract UniswapV2ERC20 is IUniswapV2ERC20 {\n    using SafeMath for uint;\n\n    string public override constant name = \"Blindex Swap\";\n    string public override constant symbol = \"BDSWAP\";\n    uint8 public override constant decimals = 18;\n    uint  public override totalSupply;\n    mapping(address => uint) public override balanceOf;\n    mapping(address => mapping(address => uint)) public override allowance;\n\n    bytes32 public override DOMAIN_SEPARATOR;\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    bytes32 public constant override PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n    mapping(address => uint) public override nonces;\n\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    constructor() public {\n        uint chainId;\n        assembly {\n            chainId := chainid()\n        }\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                keccak256(bytes(name)),\n                keccak256(bytes(\"1\")),\n                chainId,\n                address(this)\n            )\n        );\n    }\n\n    function _mint(address to, uint value) internal {\n        totalSupply = totalSupply.add(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        emit Transfer(address(0), to, value);\n    }\n\n    function _burn(address from, uint value) internal {\n        balanceOf[from] = balanceOf[from].sub(value);\n        totalSupply = totalSupply.sub(value);\n        emit Transfer(from, address(0), value);\n    }\n\n    function _approve(address owner, address spender, uint value) private {\n        allowance[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    function _transfer(address from, address to, uint value) private {\n        balanceOf[from] = balanceOf[from].sub(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    function approve(address spender, uint value) external override returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    function transfer(address to, uint value) external override returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint value) external override returns (bool) {\n        if (allowance[from][msg.sender] != uint(-1)) {\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n        }\n        _transfer(from, to, value);\n        return true;\n    }\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external override {\n        require(deadline >= block.timestamp, \"UniswapV2: EXPIRED\");\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                DOMAIN_SEPARATOR,\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n            )\n        );\n        address recoveredAddress = ecrecover(digest, v, r, s);\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \"UniswapV2: INVALID_SIGNATURE\");\n        _approve(owner, spender, value);\n    }\n}\n"
    },
    "contracts/Math/UQ112x112.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.11;\n\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\n\n// range: [0, 2**112 - 1]\n// resolution: 1 / 2**112\n\nlibrary UQ112x112 {\n    uint224 private constant Q112 = 2**112;\n\n    // encode a uint112 as a UQ112x112\n    function encode(uint112 y) internal pure returns (uint224 z) {\n        z = uint224(y) * Q112; // never overflows\n    }\n\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\n        z = x / uint224(y);\n    }\n}"
    },
    "contracts/Math/FixedPoint.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.11;\n\nimport \"./Babylonian.sol\";\n\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\nlibrary FixedPoint {\n    // range: [0, 2**112 - 1]\n    // resolution: 1 / 2**112\n    struct uq112x112 {\n        uint224 _x;\n    }\n\n    // range: [0, 2**144 - 1]\n    // resolution: 1 / 2**112\n    struct uq144x112 {\n        uint _x;\n    }\n\n    uint8 private constant RESOLUTION = 112;\n    uint private constant Q112 = uint(1) << RESOLUTION;\n    uint private constant Q224 = Q112 << RESOLUTION;\n\n    // encode a uint112 as a UQ112x112\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\n        return uq112x112(uint224(x) << RESOLUTION);\n    }\n\n    // encodes a uint144 as a UQ144x112\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\n        return uq144x112(uint256(x) << RESOLUTION);\n    }\n\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\n    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\n        require(x != 0, \"FixedPoint: DIV_BY_ZERO\");\n        return uq112x112(self._x / uint224(x));\n    }\n\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\n    // reverts on overflow\n    function mul(uq112x112 memory self, uint y) internal pure returns (uq144x112 memory) {\n        uint z;\n        require(y == 0 || (z = uint(self._x) * y) / y == uint(self._x), \"FixedPoint: MULTIPLICATION_OVERFLOW\");\n        return uq144x112(z);\n    }\n\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\n    // equivalent to encode(numerator).div(denominator)\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\n        require(denominator > 0, \"FixedPoint: DIV_BY_ZERO\");\n        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\n    }\n\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\n        return uint112(self._x >> RESOLUTION);\n    }\n\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\n        return uint144(self._x >> RESOLUTION);\n    }\n\n    // take the reciprocal of a UQ112x112\n    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\n        require(self._x != 0, \"FixedPoint: ZERO_RECIPROCAL\");\n        return uq112x112(uint224(Q224 / self._x));\n    }\n\n    // square root of a UQ112x112\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x)) << 56));\n    }\n}"
    },
    "contracts/Uniswap/Interfaces/IUniswapV2Callee.sol": {
      "content": "// SPDX-License-Identifier: GNU General Public License v3.0\n// Based on https://github.com/Uniswap/v2-core\n\npragma solidity 0.6.11;\n\ninterface IUniswapV2Callee {\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\n}\n"
    },
    "contracts/Uniswap/UniswapV2OracleLibrary.sol": {
      "content": "// SPDX-License-Identifier: GNU General Public License v3.0\n// Based on https://github.com/Uniswap/v2-core\n\npragma solidity 0.6.11;\n\nimport \"../Uniswap/Interfaces/IUniswapV2Pair.sol\";\nimport \"../Math/FixedPoint.sol\";\n\n// library with helper methods for oracles that are concerned with computing average prices\nlibrary UniswapV2OracleLibrary {\n    using FixedPoint for *;\n\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\n    function currentBlockTimestamp() internal view returns (uint32) {\n        return uint32(block.timestamp % 2 ** 32);\n    }\n\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\n    function currentCumulativePrices(\n        address pair\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\n        blockTimestamp = currentBlockTimestamp();\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\n\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\n        if (blockTimestampLast != blockTimestamp) {\n            // subtraction overflow is desired\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n            // addition overflow is desired\n            // counterfactual\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\n            // counterfactual\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\n        }\n    }\n}"
    },
    "contracts/Uniswap/Interfaces/IUniswapV2ERC20.sol": {
      "content": "// SPDX-License-Identifier: GNU General Public License v3.0\n// Based on https://github.com/Uniswap/v2-core\n\npragma solidity 0.6.11;\n\ninterface IUniswapV2ERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n}\n"
    },
    "contracts/Math/Babylonian.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.11;\n\n// computes square roots using the babylonian method\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\nlibrary Babylonian {\n    function sqrt(uint y) internal pure returns (uint z) {\n        if (y > 3) {\n            z = y;\n            uint x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n        // else z = 0\n    }\n}"
    },
    "contracts/Oracle/WethToWethOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.11;\n\nimport \"../Uniswap/Interfaces/IUniswapV2Factory.sol\";\nimport \"../Uniswap/Interfaces/IUniswapV2Pair.sol\";\nimport \"../Math/FixedPoint.sol\";\n\nimport \"../Uniswap/UniswapV2OracleLibrary.sol\";\nimport \"../Uniswap/UniswapV2Library.sol\";\nimport \"./ICryptoPairOracle.sol\";\n\n// Fixed window oracle that recomputes the average price for the entire period once every period\n// Note that the price average is only guaranteed to be over at least 1 period, but may be over a longer period\ncontract WethToWethOracle is ICryptoPairOracle {\n    \n    address internal wethAddress;\n\n    constructor(address _wethAddress) public {\n        wethAddress = _wethAddress;\n    }\n\n    function consult(address tokenIn, uint256 amountIn) external view override returns (uint amountOut) {\n        require(tokenIn == wethAddress, \"This oracle only accepts consulting WETH input\");\n\n        return amountIn;\n    }\n\n    function updateOracle() public override {}\n\n    function shouldUpdateOracle() public view override returns (bool) {\n        return false;\n    }\n\n    function when_should_update_oracle_in_seconds() public view override returns (uint256) {\n        return 1e12;\n    }\n}"
    },
    "contracts/Oracle/BtcToEthOracleMoneyOnChain.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.11;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./IMoCBaseOracle.sol\";\nimport \"./ICryptoPairOracle.sol\";\n\ncontract BtcToEthOracleMoneyOnChain is ICryptoPairOracle, Ownable {\n    using SafeMath for uint256;\n\n    IMoCBaseOracle internal feed;\n    address internal wethAddress;\n    \n    uint8 private precision = 18;\n\n    constructor(address _btcEthFeedAddress, address _wethAddress) public {\n        feed = IMoCBaseOracle(_btcEthFeedAddress);\n        wethAddress = _wethAddress;\n    }\n\n    function getPrice_1e12() public view returns (uint256) {       \n        (bytes32 priceVal, bool isValid) = feed.peek();\n\n        require(isValid, \"Invalid price feed\");\n\n        return uint256(1e12)\n            .mul(uint256(priceVal))\n            .div(uint256(10)**precision);\n    }\n\n    function consult(address tokenIn, uint256 amountIn) external view override returns (uint256) {     \n        require(tokenIn == wethAddress, \"This oracle only accepts consulting WETH input\");\n\n        return amountIn.mul(1e12).div(getPrice_1e12());\n    }\n\n    function updateOracle() public override {}\n\n    function shouldUpdateOracle() public view override returns (bool) {\n        return false;\n    }\n\n    function when_should_update_oracle_in_seconds() public view override returns (uint256) {\n        return 1e12;\n    }\n\n    function setPrecision(uint8 _precision) public onlyOwner {\n        precision = _precision;\n    }\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "contracts/Oracle/IMoCBaseOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.11;\r\n\r\ninterface IMoCBaseOracle {\r\n  function peek() external view returns (bytes32, bool);\r\n}\r\n"
    },
    "contracts/Oracle/MoneyOnChainPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.11;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./IPriceFeed.sol\";\r\nimport \"./IMoCBaseOracle.sol\";\r\n\r\ncontract MoneyOnChainPriceFeed is IPriceFeed, Ownable {\r\n    IMoCBaseOracle private feed;\r\n\r\n    uint8 private precision = 18;\r\n\r\n    constructor(address _feedAddress) public {\r\n        feed = IMoCBaseOracle(_feedAddress);\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return precision;\r\n    }\r\n\r\n    function price() external view override returns (uint256) {\r\n        (bytes32 priceVal, bool isValid) = feed.peek();\r\n\r\n        require(isValid, \"Invalid price feed\");\r\n\r\n        return uint256(priceVal);\r\n    }\r\n\r\n    function setPrecision(uint8 _precision) public onlyOwner {\r\n        precision = _precision;\r\n    }\r\n}"
    },
    "contracts/Oracle/IPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.11;\r\n\r\ninterface IPriceFeed {\r\n    function decimals() external view returns (uint8);\r\n    function price() external view returns (uint256);\r\n}"
    },
    "contracts/Oracle/OracleBasedCryptoFiatFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.11;\r\n\r\nimport \"./IPriceFeed.sol\";\r\nimport \"./IOracleBasedCryptoFiatFeed.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\ncontract OracleBasedCryptoFiatFeed is IOracleBasedCryptoFiatFeed {\r\n    using SafeMath for uint256;\r\n\r\n    IPriceFeed internal fiatToUsdFeed;\r\n    IPriceFeed internal cryptoToUsdFeed;\r\n    \r\n    constructor(address _fiatToUsdFeedAddress, address _cryptUsdFeedAddress) public {\r\n        fiatToUsdFeed = IPriceFeed(_fiatToUsdFeedAddress);\r\n        cryptoToUsdFeed = IPriceFeed(_cryptUsdFeedAddress);\r\n    }\r\n\r\n    function getPrice_1e12() override public view returns (uint256) {\r\n        uint256 fiatUsdPrice = fiatToUsdFeed.price();\r\n        uint256 cryptoUsdPrice = cryptoToUsdFeed.price();\r\n\r\n        return uint256(1e12)\r\n            .mul(cryptoUsdPrice)\r\n            .mul(uint256(10)**fiatToUsdFeed.decimals())\r\n            .div(fiatUsdPrice)\r\n            .div(uint256(10)**cryptoToUsdFeed.decimals());\r\n    }\r\n    \r\n    function getDecimals() override public view returns (uint8) {\r\n        return 12;\r\n    }\r\n}"
    },
    "contracts/Uniswap/UniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: GNU General Public License v3.0\n// Based on https://github.com/Uniswap/v2-core\n\npragma solidity 0.6.11;\n\nimport \"./Interfaces/IUniswapV2Factory.sol\";\nimport \"./UniswapV2Pair.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract UniswapV2Factory is IUniswapV2Factory, Ownable {\n    address public override feeTo;\n    address public override treasury;\n    uint256 public override maxSpotVsOraclePriceDivergence_d12;\n\n    mapping(address => mapping(address => address)) public override getPair;\n    address[] public override allPairs;\n\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    constructor(address _treasury, uint256 _maxSpotVsOraclePriceDivergence_d12) public {\n        treasury = _treasury;\n        maxSpotVsOraclePriceDivergence_d12 = _maxSpotVsOraclePriceDivergence_d12;\n    }\n\n    function allPairsLength() external override view returns (uint) {\n        return allPairs.length;\n    }\n\n    function createPair(address tokenA, address tokenB) external override returns (address pair) {\n        require(tokenA != tokenB, \"UniswapV2: IDENTICAL_ADDRESSES\");\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), \"UniswapV2: ZERO_ADDRESS\");\n        require(getPair[token0][token1] == address(0), \"UniswapV2: PAIR_EXISTS\"); // single check is sufficient\n        bytes memory bytecode = abi.encodePacked(\n            type(UniswapV2Pair).creationCode,\n            abi.encode(owner()),\n            abi.encode(treasury));\n\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\n\n        // This creates a new contract\n        assembly {\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\n        }\n        IUniswapV2Pair(pair).initialize(token0, token1);\n        getPair[token0][token1] = pair;\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\n        allPairs.push(pair);\n        emit PairCreated(token0, token1, pair, allPairs.length);\n    }\n\n    function setFeeTo(address _feeTo) external override onlyOwner {\n        feeTo = _feeTo;\n    }\n\n    function setTreasury(address _treasury) external override onlyOwner {\n        treasury = _treasury;\n    }\n\n    function setMaxSpotVsOraclePriceDivergence_d12(uint256 _maxSpotVsOraclePriceDivergence_d12) external override onlyOwner {\n        maxSpotVsOraclePriceDivergence_d12 = _maxSpotVsOraclePriceDivergence_d12;\n    }\n}\n"
    },
    "contracts/Oracle/FiatToFiatPseudoOracleFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.11;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./IPriceFeed.sol\";\r\n\r\n// We need feeds with fiats prices. For now on RSK chain there are no such feeds.\r\n// We populate our own feeds\r\ncontract FiatToFiatPseudoOracleFeed is IPriceFeed, Ownable {\r\n    \r\n    uint8 private constant DECIMALS = 12;\r\n    uint256 private recentPrice = 1e12;\r\n\r\n    address private updater;\r\n\r\n    constructor(address _updater) public {\r\n        updater = _updater;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return DECIMALS;\r\n    }\r\n\r\n    function price() external view override returns (uint256) {\r\n        return recentPrice;\r\n    }\r\n\r\n    function setUpdater(address newUpdater) public onlyOwner {\r\n        address oldUpdater = updater;\r\n        updater = newUpdater;\r\n        emit UpdaterChanged(oldUpdater, updater);\r\n    }\r\n\r\n    function setPrice(uint256 _price) public onlyUpdater {\r\n        recentPrice = _price;\r\n        emit PriceChanged(_price);\r\n    }\r\n\r\n    modifier onlyUpdater()\r\n    {\r\n        require(msg.sender == updater, \"You're not updater\");\r\n        _;\r\n    }\r\n\r\n    event UpdaterChanged(address indexed oldUpdater, address indexed newUpdater);\r\n    event PriceChanged(uint256 indexed newPrice);\r\n}"
    },
    "contracts/Oracle/BtcToEthOracleChinlink.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.11;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"./AggregatorV3Interface.sol\";\nimport \"./ICryptoPairOracle.sol\";\n\ncontract BtcToEthOracleChinlink is ICryptoPairOracle {\n    using SafeMath for uint256;\n\n    AggregatorV3Interface internal feed;\n    address internal wethAddress;\n    \n    constructor(address _btcEthFeedAddress, address _wethAddress) public {\n        feed = AggregatorV3Interface(_btcEthFeedAddress);\n        wethAddress = _wethAddress;\n    }\n\n    function getPrice_1e12() public view returns (uint256) {       \n        uint256 price = getLatestPrice(feed);\n\n        return uint256(1e12)\n            .mul(price)\n            .div(uint256(10)**feed.decimals());\n    }\n\n    function consult(address tokenIn, uint256 amountIn) external view override returns (uint256) {     \n        require(tokenIn == wethAddress, \"This oracle only accepts consulting WETH input\");\n\n        return amountIn.mul(1e12).div(getPrice_1e12());\n    }\n\n    function getLatestPrice(AggregatorV3Interface _feed) internal view returns (uint256) {\n        (\n            , \n            int256 price,\n            ,\n            ,\n            \n        ) = _feed.latestRoundData();\n        return uint256(price);\n    }\n\n    function updateOracle() public override {}\n\n    function shouldUpdateOracle() public view override returns (bool) {\n        return false;\n    }\n\n    function when_should_update_oracle_in_seconds() public view override returns (uint256) {\n        return 1e12;\n    }\n}"
    },
    "contracts/Oracle/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.11;\n\ninterface AggregatorV3Interface {\n\n  function decimals() external view returns (uint8);\n  function description() external view returns (string memory);\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n}"
    },
    "contracts/Oracle/AggregatorV3PriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.11;\r\n\r\nimport \"./IPriceFeed.sol\";\r\nimport \"./AggregatorV3Interface.sol\";\r\n\r\ncontract AggregatorV3PriceFeed is IPriceFeed {\r\n    AggregatorV3Interface private feed;\r\n\r\n    constructor(address _feedAddress) public {\r\n        feed = AggregatorV3Interface(_feedAddress);\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return feed.decimals();\r\n    }\r\n\r\n    function price() external view override returns (uint256) {\r\n        (\r\n            , \r\n            int256 priceVal,\r\n            ,\r\n            ,\r\n            \r\n        ) = feed.latestRoundData();\r\n        return uint256(priceVal);\r\n    }\r\n}"
    },
    "contracts/Governance/Timelock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.11;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\ncontract Timelock {\n    using SafeMath for uint;\n\n    event NewAdmin(address indexed newAdmin);\n    event NewPendingAdmin(address indexed newPendingAdmin);\n    event NewDelay(uint indexed newDelay);\n    event CancelTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature,  bytes data, uint eta);\n    event ExecuteTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature,  bytes data, uint eta);\n    event QueueTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature, bytes data, uint eta);\n\n    uint public constant GRACE_PERIOD = 14 days;\n    uint public constant MINIMUM_DELAY = 2 days;\n    uint public constant MAXIMUM_DELAY = 30 days;\n\n    address public admin;\n    address public pendingAdmin;\n    uint public delay;\n\n    mapping (bytes32 => bool) public queuedTransactions;\n\n    constructor(address admin_, uint delay_) public {\n        require(delay_ >= MINIMUM_DELAY, \"Timelock::constructor: Delay must exceed minimum delay.\");\n        require(delay_ <= MAXIMUM_DELAY, \"Timelock::setDelay: Delay must not exceed maximum delay.\");\n\n        admin = admin_;\n        delay = delay_;\n    }\n\n    function setDelay(uint delay_) public {\n        require(msg.sender == address(this), \"Timelock::setDelay: Call must come from Timelock.\");\n        require(delay_ >= MINIMUM_DELAY, \"Timelock::setDelay: Delay must exceed minimum delay.\");\n        require(delay_ <= MAXIMUM_DELAY, \"Timelock::setDelay: Delay must not exceed maximum delay.\");\n        delay = delay_;\n\n        emit NewDelay(delay);\n    }\n\n    function acceptAdmin() public {\n        require(msg.sender == pendingAdmin, \"Timelock::acceptAdmin: Call must come from pendingAdmin.\");\n        admin = msg.sender;\n        pendingAdmin = address(0);\n\n        emit NewAdmin(admin);\n    }\n\n    function setPendingAdmin(address pendingAdmin_) public {\n        require(msg.sender == address(this), \"Timelock::setPendingAdmin: Call must come from Timelock.\");\n        pendingAdmin = pendingAdmin_;\n\n        emit NewPendingAdmin(pendingAdmin);\n    }\n\n    function queueTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public returns (bytes32) {\n        require(msg.sender == admin, \"Timelock::queueTransaction: Call must come from admin.\");\n        require(eta >= getBlockTimestamp().add(delay), \"Timelock::queueTransaction: Estimated execution block must satisfy delay.\");\n\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n        queuedTransactions[txHash] = true;\n\n        emit QueueTransaction(txHash, target, value, signature, data, eta);\n        return txHash;\n    }\n\n    function cancelTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public {\n        require(msg.sender == admin, \"Timelock::cancelTransaction: Call must come from admin.\");\n\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n        queuedTransactions[txHash] = false;\n\n        emit CancelTransaction(txHash, target, value, signature, data, eta);\n    }\n\n    function executeTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public payable returns (bytes memory) {\n        require(msg.sender == admin, \"Timelock::executeTransaction: Call must come from admin.\");\n\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n        require(queuedTransactions[txHash], \"Timelock::executeTransaction: Transaction hasn't been queued.\");\n        require(getBlockTimestamp() >= eta, \"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\");\n        require(getBlockTimestamp() <= eta.add(GRACE_PERIOD), \"Timelock::executeTransaction: Transaction is stale.\");\n\n        queuedTransactions[txHash] = false;\n\n        bytes memory callData;\n\n        if (bytes(signature).length == 0) {\n            callData = data;\n        } else {\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\n        }\n\n        // Execute the call\n        (bool success, bytes memory returnData) = target.call{ value: value }(callData);\n        require(success, \"Timelock::executeTransaction: Transaction execution reverted.\");\n\n        emit ExecuteTransaction(txHash, target, value, signature, data, eta);\n\n        return returnData;\n    }\n\n    function getBlockTimestamp() internal view returns (uint) {\n        return block.timestamp;\n    }\n}"
    },
    "contracts/ERC20/WETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.6.11;\n\nimport \"./IWETH.sol\";\n\n// Copyright (C) 2015, 2016, 2017 Dapphub\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\ncontract WETH is IWETH {\n    string public name     = \"Wrapped Ether\";\n    string public symbol   = \"WETH\";\n    uint8  public decimals = 18;\n\n    event  Approval(address indexed src, address indexed guy, uint wad);\n    event  Transfer(address indexed src, address indexed dst, uint wad);\n    event  Deposit(address indexed dst, uint wad);\n    event  Withdrawal(address indexed src, uint wad);\n\n    mapping (address => uint)                       public  balanceOf;\n    mapping (address => mapping (address => uint))  public  allowance;\n\n    fallback() external payable {\n        deposit();\n    }\n\n    receive() external payable { }\n\n    constructor (address _creator_address ) public \n    {\n        balanceOf[_creator_address] = 1000000e18; // this is for testing only\n    }\n\n\n    function deposit() public override payable {\n        balanceOf[msg.sender] += msg.value;\n        emit Deposit(msg.sender, msg.value);\n    }\n    function withdraw(uint wad) override public {\n        require(balanceOf[msg.sender] >= wad);\n        balanceOf[msg.sender] -= wad;\n        msg.sender.transfer(wad);\n        emit Withdrawal(msg.sender, wad);\n    }\n\n    function totalSupply() public view returns (uint) {\n        return address(this).balance;\n    }\n\n    function approve(address guy, uint wad) public returns (bool) {\n        allowance[msg.sender][guy] = wad;\n        emit Approval(msg.sender, guy, wad);\n        return true;\n    }\n\n    function transfer(address dst, uint wad) public override returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(address src, address dst, uint wad)\n        public\n        override\n        returns (bool)\n    {\n        require(balanceOf[src] >= wad);\n\n        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n            require(allowance[src][msg.sender] >= wad);\n            allowance[src][msg.sender] -= wad;\n        }\n\n        balanceOf[src] -= wad;\n        balanceOf[dst] += wad;\n\n        emit Transfer(src, dst, wad);\n\n        return true;\n    }\n}\n\n\n/*\n                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n\n*/"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}